{"version":3,"file":"193db7014a5ea2c5f506389ee7f621cf606a0676-42ab6420600450a69a13.js","mappings":"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","sources":["webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicTag.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicTag.jsx","webpack://jeffdoes/./src/components/Tag.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicGlobalVariant__Arrangement.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__ArrowRight.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicStripe.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicStripe.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicPreview.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Duo.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Figma.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Plasmic.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Neovim.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Processing.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Linkedin.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Dribbble.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Github.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/selfPortrait.png","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicPreview.jsx","webpack://jeffdoes/./src/components/Preview.jsx","webpack://jeffdoes/./src/components/Stripe.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHeadlineButton.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHeadlineButton.jsx","webpack://jeffdoes/./src/components/HeadlineButton.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHeadline.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHeadline.jsx","webpack://jeffdoes/./src/components/Headline.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHomepage.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Thirtysix.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Twentytwo.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Face.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Info.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Paint.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Map.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Learnax.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Sprints.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Track.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHomepage.jsx","webpack://jeffdoes/./src/pages/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicTag-module--root--pTGDs\";\nexport var rootstroke = \"PlasmicTag-module--rootstroke--+ZG-S\";\nexport var rootflippabble = \"PlasmicTag-module--rootflippabble--2dGdV\";\nexport var slotTargetLabel = \"PlasmicTag-module--slotTargetLabel--6vRHo\";\nexport var text___7ZTu = \"PlasmicTag-module--text___7ZTu---EpSK\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: lqv31eB-tK\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicTag.module.css\" // plasmic-import: lqv31eB-tK/css\n\nexport const PlasmicTag__VariantProps = new Array(\"stroke\", \"flippabble\")\n\nexport const PlasmicTag__ArgProps = new Array(\"label\")\n\nfunction PlasmicTag__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n    screen: useScreenVariantsekypzdksLjd0F(),\n  })\n\n  return (\n    <div\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.rootflippabble]: hasVariant(\n            variants,\n            \"flippabble\",\n            \"flippabble\"\n          ),\n\n          [sty.rootstroke]: hasVariant(variants, \"stroke\", \"stroke\"),\n        }\n      )}\n    >\n      {p.renderPlasmicSlot({\n        defaultContents: (\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text___7ZTu\n            )}\n          >\n            {\"label\"}\n          </div>\n        ),\n\n        value: args.label,\n        className: classNames(sty.slotTargetLabel, {\n          [sty.slotTargetLabelflippabble]: hasVariant(\n            variants,\n            \"flippabble\",\n            \"flippabble\"\n          ),\n\n          [sty.slotTargetLabelglobal_mode_dark_flippabble]:\n            hasVariant(variants, \"flippabble\", \"flippabble\") &&\n            hasVariant(globalVariants, \"mode\", \"dark\"),\n        }),\n      })}\n    </div>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicTag__ArgProps,\n      internalVariantPropNames: PlasmicTag__VariantProps,\n    })\n\n    return PlasmicTag__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicTag\"\n  } else {\n    func.displayName = `PlasmicTag.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicTag = Object.assign(\n  // Top-level PlasmicTag renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    // Metadata about props expected for PlasmicTag\n    internalVariantProps: PlasmicTag__VariantProps,\n    internalArgProps: PlasmicTag__ArgProps,\n  }\n)\n\nexport default PlasmicTag\n/* prettier-ignore-end */\n","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport { PlasmicTag } from \"./plasmic/jeffdo_es/PlasmicTag\"\n\nfunction Tag_(props, ref) {\n  // Use PlasmicTag to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicTag are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all TagProps here, but feel free\n  // to do whatever works for you.\n  return <PlasmicTag root={{ ref }} {...props} />\n}\n\nconst Tag = React.forwardRef(Tag_)\n\nexport default Tag\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport * as React from \"react\"\n\nexport const ArrangementContext = React.createContext(\n  \"PLEASE_RENDER_INSIDE_PROVIDER\"\n)\n\nexport function useArrangement() {\n  return React.useContext(ArrangementContext)\n}\n\nexport default ArrangementContext\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function ArrowRightIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M15.5 8l.354.354a.5.5 0 000-.708L15.5 8zM0 10.5c.841 0 1.495-.212 2.03-.544.523-.325.91-.752 1.23-1.136.337-.405.576-.726.862-.972.26-.223.524-.348.878-.348v-1c-.646 0-1.132.25-1.529.59-.37.316-.693.745-.98 1.09-.305.366-.607.69-.99.926C1.13 9.337.66 9.5 0 9.5v1zm5-3a.61.61 0 01.348.09.823.823 0 01.251.287c.176.3.286.723.416 1.244.12.48.26 1.057.522 1.506.136.234.318.457.57.62.255.167.554.253.893.253v-1a.61.61 0 01-.348-.09.823.823 0 01-.251-.287c-.176-.3-.286-.723-.416-1.244-.12-.48-.26-1.057-.522-1.506a1.813 1.813 0 00-.57-.62A1.607 1.607 0 005 6.5v1zm3 4c.634 0 1.17-.24 1.628-.558.45-.311.858-.72 1.226-1.088.382-.383.725-.723 1.087-.974.354-.245.693-.38 1.059-.38v-1c-.634 0-1.17.24-1.628.558-.45.311-.858.72-1.226 1.088-.382.383-.724.723-1.087.974-.354.245-.693.38-1.059.38v1zm5-3h2.5v-1H13v1zm2.146-.854l-3 3 .708.708 3-3-.708-.708zm.708 0l-3-3-.708.708 3 3 .708-.708z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default ArrowRightIcon\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicStripe-module--root--bJ9kr\";\nexport var rootcolor_grey = \"PlasmicStripe-module--rootcolor_grey--8US11\";\nexport var rootlowlighted = \"PlasmicStripe-module--rootlowlighted--tU-Cw\";\nexport var rootcolor_orange = \"PlasmicStripe-module--rootcolor_orange--uU0Ei\";\nexport var rootcolor_blue = \"PlasmicStripe-module--rootcolor_blue--NC+T2\";\nexport var roothighlighted = \"PlasmicStripe-module--roothighlighted--EiH--\";\nexport var root___focusVisibleWithin = \"PlasmicStripe-module--root___focusVisibleWithin--ptI+B\";\nexport var title = \"PlasmicStripe-module--title--Bk9i2\";\nexport var titlecolor_grey = \"PlasmicStripe-module--titlecolor_grey--5WPD+\";\nexport var titlelowlighted = \"PlasmicStripe-module--titlelowlighted--4ExYL\";\nexport var titlecolor_red = \"PlasmicStripe-module--titlecolor_red--Znku5\";\nexport var titlecolor_orange = \"PlasmicStripe-module--titlecolor_orange--sn6Vg\";\nexport var titlecolor_yellow = \"PlasmicStripe-module--titlecolor_yellow--AAXd1\";\nexport var titlecolor_green = \"PlasmicStripe-module--titlecolor_green--YTxHx\";\nexport var titlecolor_mint = \"PlasmicStripe-module--titlecolor_mint--bLTfB\";\nexport var titlecolor_blue = \"PlasmicStripe-module--titlecolor_blue--Cu8nK\";\nexport var titlecolor_purple = \"PlasmicStripe-module--titlecolor_purple--PHLn3\";\nexport var title___focusVisibleWithin = \"PlasmicStripe-module--title___focusVisibleWithin--2G1rb\";\nexport var slotTargetLabel = \"PlasmicStripe-module--slotTargetLabel--j7CQY\";\nexport var slotTargetLabelcolor_grey = \"PlasmicStripe-module--slotTargetLabelcolor_grey--3uumD\";\nexport var slotTargetLabelcolor_orange = \"PlasmicStripe-module--slotTargetLabelcolor_orange--1MxUY\";\nexport var slotTargetLabelcolor_yellow = \"PlasmicStripe-module--slotTargetLabelcolor_yellow--GkuRT\";\nexport var slotTargetLabelcolor_green = \"PlasmicStripe-module--slotTargetLabelcolor_green--VzVFa\";\nexport var slotTargetLabelcolor_mint = \"PlasmicStripe-module--slotTargetLabelcolor_mint--r5Fpo\";\nexport var slotTargetLabelcolor_blue = \"PlasmicStripe-module--slotTargetLabelcolor_blue--TqwF5\";\nexport var __wab_slot = \"PlasmicStripe-module--__wab_slot--sA5So\";\nexport var slotTargetLabel___focusVisibleWithin = \"PlasmicStripe-module--slotTargetLabel___focusVisibleWithin--Y9tT1\";\nexport var slotTargetIcon = \"PlasmicStripe-module--slotTargetIcon--kh1EI\";\nexport var slotTargetIconcolor_grey = \"PlasmicStripe-module--slotTargetIconcolor_grey--z7Si2\";\nexport var slotTargetIconcolor_orange = \"PlasmicStripe-module--slotTargetIconcolor_orange--FRrGL\";\nexport var slotTargetIconcolor_yellow = \"PlasmicStripe-module--slotTargetIconcolor_yellow--HdCc5\";\nexport var slotTargetIconcolor_green = \"PlasmicStripe-module--slotTargetIconcolor_green--jn51U\";\nexport var slotTargetIconcolor_mint = \"PlasmicStripe-module--slotTargetIconcolor_mint--s99Ub\";\nexport var slotTargetIconcolor_blue = \"PlasmicStripe-module--slotTargetIconcolor_blue--Aj2zt\";\nexport var slotTargetIcon___focusVisibleWithin = \"PlasmicStripe-module--slotTargetIcon___focusVisibleWithin--H7FZZ\";\nexport var svg__rm0Cy = \"PlasmicStripe-module--svg__rm0Cy--CmxF9\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: JaZPnDe4BQ\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  useTrigger,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicStripe.module.css\" // plasmic-import: JaZPnDe4BQ/css\nimport ArrowRightIcon from \"./icons/PlasmicIcon__ArrowRight\" // plasmic-import: iZuEl1jiaD/icon\n\nexport const PlasmicStripe__VariantProps = new Array(\n  \"color\",\n  \"highlighted\",\n  \"lowlighted\"\n)\n\nexport const PlasmicStripe__ArgProps = new Array(\n  \"label\",\n  \"icon\",\n  \"category\",\n  \"name\"\n)\n\nfunction PlasmicStripe__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =\n    useTrigger(\"useFocusVisibleWithin\", {\n      isTextInput: false,\n    })\n\n  const [isRootHover, triggerRootHoverProps] = useTrigger(\"useHover\", {})\n  const [isRootFocusWithin, triggerRootFocusWithinProps] = useTrigger(\n    \"useFocusedWithin\",\n    {}\n  )\n\n  const triggers = {\n    focusVisibleWithin_root: isRootFocusVisibleWithin,\n    hover_root: isRootHover,\n    focusWithin_root: isRootFocusWithin,\n  }\n\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n  })\n\n  return true ? (\n    <button\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.button,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,\n          [sty.rootcolor_blue]: hasVariant(variants, \"color\", \"blue\"),\n          [sty.rootcolor_green]: hasVariant(variants, \"color\", \"green\"),\n          [sty.rootcolor_grey]: hasVariant(variants, \"color\", \"grey\"),\n          [sty.rootcolor_mint]: hasVariant(variants, \"color\", \"mint\"),\n          [sty.rootcolor_orange]: hasVariant(variants, \"color\", \"orange\"),\n          [sty.rootcolor_purple]: hasVariant(variants, \"color\", \"purple\"),\n          [sty.rootcolor_red]: hasVariant(variants, \"color\", \"red\"),\n          [sty.rootcolor_yellow]: hasVariant(variants, \"color\", \"yellow\"),\n          [sty.rootglobal_mode_reveal]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"reveal\"\n          ),\n\n          [sty.roothighlighted]: hasVariant(\n            variants,\n            \"highlighted\",\n            \"highlighted\"\n          ),\n\n          [sty.rootlowlighted]: hasVariant(\n            variants,\n            \"lowlighted\",\n            \"lowlighted\"\n          ),\n        }\n      )}\n      id={args.name}\n      tabIndex={0}\n      data-plasmic-trigger-props={[\n        triggerRootFocusVisibleWithinProps,\n        triggerRootHoverProps,\n        triggerRootFocusWithinProps,\n      ]}\n    >\n      <p.Stack\n        as={\"div\"}\n        data-plasmic-name={\"title\"}\n        data-plasmic-override={overrides.title}\n        hasGap={true}\n        className={classNames(projectcss.all, sty.title, {\n          [sty.title___focusVisibleWithin]: triggers.focusVisibleWithin_root,\n          [sty.titlecolor_blue]: hasVariant(variants, \"color\", \"blue\"),\n          [sty.titlecolor_green]: hasVariant(variants, \"color\", \"green\"),\n          [sty.titlecolor_grey]: hasVariant(variants, \"color\", \"grey\"),\n          [sty.titlecolor_mint]: hasVariant(variants, \"color\", \"mint\"),\n          [sty.titlecolor_orange]: hasVariant(variants, \"color\", \"orange\"),\n          [sty.titlecolor_purple]: hasVariant(variants, \"color\", \"purple\"),\n          [sty.titlecolor_red]: hasVariant(variants, \"color\", \"red\"),\n          [sty.titlecolor_yellow]: hasVariant(variants, \"color\", \"yellow\"),\n          [sty.titleglobal_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.titleglobal_mode_reveal]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"reveal\"\n          ),\n\n          [sty.titlehighlighted]: hasVariant(\n            variants,\n            \"highlighted\",\n            \"highlighted\"\n          ),\n\n          [sty.titlelowlighted]: hasVariant(\n            variants,\n            \"lowlighted\",\n            \"lowlighted\"\n          ),\n        })}\n      >\n        {(\n          triggers.focusVisibleWithin_root\n            ? true\n            : triggers.focusWithin_root\n            ? true\n            : hasVariant(variants, \"highlighted\", \"highlighted\") &&\n              triggers.hover_root\n            ? true\n            : triggers.hover_root &&\n              hasVariant(globalVariants, \"mode\", \"reveal\")\n            ? true\n            : triggers.hover_root\n            ? true\n            : hasVariant(variants, \"highlighted\", \"highlighted\")\n            ? true\n            : hasVariant(globalVariants, \"mode\", \"reveal\")\n            ? true\n            : false\n        )\n          ? p.renderPlasmicSlot({\n              defaultContents: \"label\",\n              value: args.label,\n              className: classNames(sty.slotTargetLabel, {\n                [sty.slotTargetLabel___focusVisibleWithin]:\n                  triggers.focusVisibleWithin_root,\n                [sty.slotTargetLabelcolor_blue]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"blue\"\n                ),\n\n                [sty.slotTargetLabelcolor_green]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"green\"\n                ),\n\n                [sty.slotTargetLabelcolor_grey]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"grey\"\n                ),\n\n                [sty.slotTargetLabelcolor_mint]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"mint\"\n                ),\n\n                [sty.slotTargetLabelcolor_orange]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"orange\"\n                ),\n\n                [sty.slotTargetLabelcolor_yellow]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"yellow\"\n                ),\n\n                [sty.slotTargetLabelglobal_mode_reveal]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"reveal\"\n                ),\n\n                [sty.slotTargetLabelhighlighted]: hasVariant(\n                  variants,\n                  \"highlighted\",\n                  \"highlighted\"\n                ),\n              }),\n            })\n          : null}\n        {(\n          triggers.focusVisibleWithin_root\n            ? true\n            : triggers.focusWithin_root\n            ? true\n            : hasVariant(variants, \"highlighted\", \"highlighted\") &&\n              triggers.hover_root\n            ? true\n            : triggers.hover_root &&\n              hasVariant(globalVariants, \"mode\", \"reveal\")\n            ? true\n            : triggers.hover_root\n            ? true\n            : hasVariant(variants, \"highlighted\", \"highlighted\")\n            ? true\n            : hasVariant(globalVariants, \"mode\", \"reveal\")\n            ? true\n            : false\n        )\n          ? p.renderPlasmicSlot({\n              defaultContents: (\n                <ArrowRightIcon\n                  className={classNames(projectcss.all, sty.svg__rm0Cy)}\n                  role={\"img\"}\n                />\n              ),\n\n              value: args.icon,\n              className: classNames(sty.slotTargetIcon, {\n                [sty.slotTargetIcon___focusVisibleWithin]:\n                  triggers.focusVisibleWithin_root,\n                [sty.slotTargetIconcolor_blue]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"blue\"\n                ),\n\n                [sty.slotTargetIconcolor_green]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"green\"\n                ),\n\n                [sty.slotTargetIconcolor_grey]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"grey\"\n                ),\n\n                [sty.slotTargetIconcolor_mint]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"mint\"\n                ),\n\n                [sty.slotTargetIconcolor_orange]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"orange\"\n                ),\n\n                [sty.slotTargetIconcolor_yellow]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"yellow\"\n                ),\n\n                [sty.slotTargetIconglobal_mode_reveal]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"reveal\"\n                ),\n\n                [sty.slotTargetIconhighlighted]: hasVariant(\n                  variants,\n                  \"highlighted\",\n                  \"highlighted\"\n                ),\n              }),\n            })\n          : null}\n      </p.Stack>\n    </button>\n  ) : null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"title\"],\n  title: [\"title\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicStripe__ArgProps,\n      internalVariantPropNames: PlasmicStripe__VariantProps,\n    })\n\n    return PlasmicStripe__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicStripe\"\n  } else {\n    func.displayName = `PlasmicStripe.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicStripe = Object.assign(\n  // Top-level PlasmicStripe renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    title: makeNodeComponent(\"title\"),\n    // Metadata about props expected for PlasmicStripe\n    internalVariantProps: PlasmicStripe__VariantProps,\n    internalArgProps: PlasmicStripe__ArgProps,\n  }\n)\n\nexport default PlasmicStripe\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicPreview-module--root--BE+4N\";\nexport var rootname_likeness = \"PlasmicPreview-module--rootname_likeness--klGzG\";\nexport var rootname_words = \"PlasmicPreview-module--rootname_words--RnW95\";\nexport var rootname_learnin = \"PlasmicPreview-module--rootname_learnin--yAS7l\";\nexport var rootname_ui = \"PlasmicPreview-module--rootname_ui--vtkpq\";\nexport var rootname_ux = \"PlasmicPreview-module--rootname_ux--1iUdR\";\nexport var rootname_service = \"PlasmicPreview-module--rootname_service--wZWYZ\";\nexport var rootname_tracks = \"PlasmicPreview-module--rootname_tracks--p+4dB\";\nexport var words = \"PlasmicPreview-module--words--FMnB9\";\nexport var wordsname_likeness = \"PlasmicPreview-module--wordsname_likeness--3O90u\";\nexport var wordsname_words = \"PlasmicPreview-module--wordsname_words--7+qUE\";\nexport var wordsname_ui = \"PlasmicPreview-module--wordsname_ui--PqGC+\";\nexport var wordsname_ux = \"PlasmicPreview-module--wordsname_ux--2G-t1\";\nexport var slotTargetWords = \"PlasmicPreview-module--slotTargetWords--sZRPs\";\nexport var text__tUkGt = \"PlasmicPreview-module--text__tUkGt--r0HwV\";\nexport var text__eActQ = \"PlasmicPreview-module--text__eActQ--a3Guy\";\nexport var text__q4H87 = \"PlasmicPreview-module--text__q4H87--D9IUB\";\nexport var text__ggcwH = \"PlasmicPreview-module--text__ggcwH--+7Ipz\";\nexport var text__jmRsy = \"PlasmicPreview-module--text__jmRsy--N63Mf\";\nexport var likeness = \"PlasmicPreview-module--likeness--NEbCM\";\nexport var __wab_imgSpacer = \"PlasmicPreview-module--__wab_img-spacer--B-zd5\";\nexport var likenessname_likeness = \"PlasmicPreview-module--likenessname_likeness--oHghB\";\nexport var likenessname_words = \"PlasmicPreview-module--likenessname_words--SQIQl\";\nexport var likenessname_learnin = \"PlasmicPreview-module--likenessname_learnin--GMuwN\";\nexport var likenessname_ui = \"PlasmicPreview-module--likenessname_ui--pjZwy\";\nexport var likenessname_ux = \"PlasmicPreview-module--likenessname_ux--roJ+f\";\nexport var likenessname_service = \"PlasmicPreview-module--likenessname_service--hUmmn\";\nexport var likenessname_tracks = \"PlasmicPreview-module--likenessname_tracks--X4RTC\";\nexport var orgtool = \"PlasmicPreview-module--orgtool--8Et4n\";\nexport var orgtoolname_ux = \"PlasmicPreview-module--orgtoolname_ux--bW9hF\";\nexport var text__vluzm = \"PlasmicPreview-module--text__vluzm--fnvSF\";\nexport var columns__fKfqK = \"PlasmicPreview-module--columns__fKfqK--gD6Ft\";\nexport var columnsname_ui__fKfqK02Dcx = \"PlasmicPreview-module--columnsname_ui__fKfqK02Dcx--5-cav\";\nexport var columnsname_ux__fKfqKmi7Gi = \"PlasmicPreview-module--columnsname_ux__fKfqKmi7Gi--QC5Gj\";\nexport var column__czaT = \"PlasmicPreview-module--column__czaT--1PHnq\";\nexport var columnname_ui__czaT02Dcx = \"PlasmicPreview-module--columnname_ui__czaT02Dcx--2llVO\";\nexport var columnname_ux__czaTmi7Gi = \"PlasmicPreview-module--columnname_ux__czaTmi7Gi--aLJf4\";\nexport var tag__jlXbo = \"PlasmicPreview-module--tag__jlXbo--JqwPC\";\nexport var text__oMpwN = \"PlasmicPreview-module--text__oMpwN--o29BL\";\nexport var column__vlSb0 = \"PlasmicPreview-module--column__vlSb0--WZiCk\";\nexport var columnname_ux__vlSb0Mi7Gi = \"PlasmicPreview-module--columnname_ux__vlSb0Mi7Gi--Igt7q\";\nexport var tag___3Z4Ni = \"PlasmicPreview-module--tag___3Z4Ni--KmLgJ\";\nexport var text__qHpmv = \"PlasmicPreview-module--text__qHpmv--ftEuD\";\nexport var column__ltGx2 = \"PlasmicPreview-module--column__ltGx2--rLtvA\";\nexport var columnname_ui__ltGx202Dcx = \"PlasmicPreview-module--columnname_ui__ltGx202Dcx--iJtzT\";\nexport var columnname_ux__ltGx2Mi7Gi = \"PlasmicPreview-module--columnname_ux__ltGx2Mi7Gi--JljMP\";\nexport var tag___80Bgw = \"PlasmicPreview-module--tag___80Bgw--8pT4i\";\nexport var text__eJah = \"PlasmicPreview-module--text__eJah--83Bie\";\nexport var learnin = \"PlasmicPreview-module--learnin--nfDvS\";\nexport var learninname_learnin = \"PlasmicPreview-module--learninname_learnin--DzJA1\";\nexport var text__z9Ey = \"PlasmicPreview-module--text__z9Ey--55WM3\";\nexport var freeBox__r0Wut = \"PlasmicPreview-module--freeBox__r0Wut--c3ecQ\";\nexport var freeBox__b8ZD3 = \"PlasmicPreview-module--freeBox__b8ZD3--S45ml\";\nexport var svg__hgkQw = \"PlasmicPreview-module--svg__hgkQw--iKZpF\";\nexport var text__tuHAs = \"PlasmicPreview-module--text__tuHAs--9QaCD\";\nexport var freeBox__qHaYy = \"PlasmicPreview-module--freeBox__qHaYy--j2IFV\";\nexport var svg__y70L2 = \"PlasmicPreview-module--svg__y70L2--+O7lV\";\nexport var text__xzO0C = \"PlasmicPreview-module--text__xzO0C--Og4BF\";\nexport var freeBox__rjN70 = \"PlasmicPreview-module--freeBox__rjN70--NyVJf\";\nexport var svg__cZkPa = \"PlasmicPreview-module--svg__cZkPa--0EzhY\";\nexport var text__tCun = \"PlasmicPreview-module--text__tCun--uQW3O\";\nexport var freeBox__mnFug = \"PlasmicPreview-module--freeBox__mnFug--399aX\";\nexport var svg__qRw6L = \"PlasmicPreview-module--svg__qRw6L--8arfc\";\nexport var text__u6AAk = \"PlasmicPreview-module--text__u6AAk--1qG11\";\nexport var freeBox__a5ZKr = \"PlasmicPreview-module--freeBox__a5ZKr--9qzmJ\";\nexport var svg__sK1Ji = \"PlasmicPreview-module--svg__sK1Ji--zOKn9\";\nexport var text__hHbAf = \"PlasmicPreview-module--text__hHbAf--8lbW1\";\nexport var tracks = \"PlasmicPreview-module--tracks--3lwkH\";\nexport var tracksname_tracks = \"PlasmicPreview-module--tracksname_tracks--VGbw+\";\nexport var text__rDhas = \"PlasmicPreview-module--text__rDhas--Ml72U\";\nexport var freeBox__xSz8B = \"PlasmicPreview-module--freeBox__xSz8B--5XND0\";\nexport var link__xs6V = \"PlasmicPreview-module--link__xs6V--b0DGM\";\nexport var svg__sdmbw = \"PlasmicPreview-module--svg__sdmbw--pmLou\";\nexport var text__sO13D = \"PlasmicPreview-module--text__sO13D--vOx7e\";\nexport var link__bIrkC = \"PlasmicPreview-module--link__bIrkC--sMUR0\";\nexport var svg__wjqFi = \"PlasmicPreview-module--svg__wjqFi--diha9\";\nexport var text__d3Yj = \"PlasmicPreview-module--text__d3Yj--7z+K1\";\nexport var link___6NQdw = \"PlasmicPreview-module--link___6NQdw--Ak9Zf\";\nexport var svg__cpFny = \"PlasmicPreview-module--svg__cpFny--EMft3\";\nexport var text__aampz = \"PlasmicPreview-module--text__aampz--fQ16t\";\nexport var text__qsBq = \"PlasmicPreview-module--text__qsBq--UXad8\";\nexport var span = \"PlasmicPreview-module--span--qP-y6\";\nexport var sprints = \"PlasmicPreview-module--sprints--2Eyaf\";\nexport var sprintsname_ux = \"PlasmicPreview-module--sprintsname_ux--tiAku\";\nexport var sprintsname_service = \"PlasmicPreview-module--sprintsname_service--dBpM9\";\nexport var text__jtaLp = \"PlasmicPreview-module--text__jtaLp--evyDB\";\nexport var columns__chWye = \"PlasmicPreview-module--columns__chWye--S9r8c\";\nexport var columnsname_ui__chWye02Dcx = \"PlasmicPreview-module--columnsname_ui__chWye02Dcx--gxvAT\";\nexport var columnsname_ux__chWyeMi7Gi = \"PlasmicPreview-module--columnsname_ux__chWyeMi7Gi--Wcvnm\";\nexport var columnsname_service__chWye9XxcC = \"PlasmicPreview-module--columnsname_service__chWye9XxcC--kRIVS\";\nexport var column__uozKt = \"PlasmicPreview-module--column__uozKt--UvFrt\";\nexport var columnname_ui__uozKt02Dcx = \"PlasmicPreview-module--columnname_ui__uozKt02Dcx--jurMk\";\nexport var columnname_ux__uozKtMi7Gi = \"PlasmicPreview-module--columnname_ux__uozKtMi7Gi--7tX5T\";\nexport var columnname_service__uozKt9XxcC = \"PlasmicPreview-module--columnname_service__uozKt9XxcC--i9EA9\";\nexport var tag__nAeA4 = \"PlasmicPreview-module--tag__nAeA4--8susL\";\nexport var text__oOtr7 = \"PlasmicPreview-module--text__oOtr7--yxq1f\";\nexport var column__hg2Hk = \"PlasmicPreview-module--column__hg2Hk--gefkD\";\nexport var columnname_ui__hg2Hk02Dcx = \"PlasmicPreview-module--columnname_ui__hg2Hk02Dcx--T33nI\";\nexport var columnname_ux__hg2Hkmi7Gi = \"PlasmicPreview-module--columnname_ux__hg2Hkmi7Gi--fSqwb\";\nexport var columnname_service__hg2Hk9XxcC = \"PlasmicPreview-module--columnname_service__hg2Hk9XxcC--QaWOT\";\nexport var tag__c7IVv = \"PlasmicPreview-module--tag__c7IVv--hikHF\";\nexport var text__v9MUp = \"PlasmicPreview-module--text__v9MUp--WM3Tc\";\nexport var column__kcC5 = \"PlasmicPreview-module--column__kcC5--EzZB-\";\nexport var columnname_ui__kcC502Dcx = \"PlasmicPreview-module--columnname_ui__kcC502Dcx--phgbr\";\nexport var columnname_ux__kcC5Mi7Gi = \"PlasmicPreview-module--columnname_ux__kcC5Mi7Gi--VFXAC\";\nexport var columnname_service__kcC59XxcC = \"PlasmicPreview-module--columnname_service__kcC59XxcC--4H9-d\";\nexport var tag__v3NoT = \"PlasmicPreview-module--tag__v3NoT--rynXl\";\nexport var text__oTmx5 = \"PlasmicPreview-module--text__oTmx5--ok4M4\";\nexport var brandtool = \"PlasmicPreview-module--brandtool--wUY9d\";\nexport var brandtoolname_ux = \"PlasmicPreview-module--brandtoolname_ux--X9q6b\";\nexport var text__yFoO8 = \"PlasmicPreview-module--text__yFoO8--1bWXP\";\nexport var textname_ui__yFoO802Dcx = \"PlasmicPreview-module--textname_ui__yFoO802Dcx--yqwHc\";\nexport var columns__gt8Ac = \"PlasmicPreview-module--columns__gt8Ac--5HgS2\";\nexport var columnsname_ui__gt8Ac02Dcx = \"PlasmicPreview-module--columnsname_ui__gt8Ac02Dcx--WyUQ1\";\nexport var columnsname_ux__gt8Acmi7Gi = \"PlasmicPreview-module--columnsname_ux__gt8Acmi7Gi--Bte-Q\";\nexport var column__pc6K5 = \"PlasmicPreview-module--column__pc6K5--T0E10\";\nexport var columnname_ui__pc6K502Dcx = \"PlasmicPreview-module--columnname_ui__pc6K502Dcx--lHM7A\";\nexport var columnname_ux__pc6K5Mi7Gi = \"PlasmicPreview-module--columnname_ux__pc6K5Mi7Gi--Bk8n5\";\nexport var tag__aS62V = \"PlasmicPreview-module--tag__aS62V--PJSaB\";\nexport var text__bjBvD = \"PlasmicPreview-module--text__bjBvD--QLocz\";\nexport var textname_ui__bjBvD02Dcx = \"PlasmicPreview-module--textname_ui__bjBvD02Dcx--FOma7\";\nexport var column__rgUz1 = \"PlasmicPreview-module--column__rgUz1--U9r+b\";\nexport var columnname_ui__rgUz102Dcx = \"PlasmicPreview-module--columnname_ui__rgUz102Dcx--Rcjv1\";\nexport var columnname_ux__rgUz1Mi7Gi = \"PlasmicPreview-module--columnname_ux__rgUz1Mi7Gi--F4NnE\";\nexport var tag__bfqLc = \"PlasmicPreview-module--tag__bfqLc--2yLUS\";\nexport var tagname_ui__bfqLc02Dcx = \"PlasmicPreview-module--tagname_ui__bfqLc02Dcx--JzYa0\";\nexport var text___4AXb2 = \"PlasmicPreview-module--text___4AXb2--IcBXK\";\nexport var textname_ui___4AXb202Dcx = \"PlasmicPreview-module--textname_ui___4AXb202Dcx--wty87\";\nexport var column__xwus4 = \"PlasmicPreview-module--column__xwus4--mf1Ca\";\nexport var columnname_ui__xwus402Dcx = \"PlasmicPreview-module--columnname_ui__xwus402Dcx--cgmgN\";\nexport var columnname_ux__xwus4Mi7Gi = \"PlasmicPreview-module--columnname_ux__xwus4Mi7Gi--h-CIw\";\nexport var tag__oB0D = \"PlasmicPreview-module--tag__oB0D--KF3VX\";\nexport var text__c1Qk = \"PlasmicPreview-module--text__c1Qk--hUrkM\";\nexport var textname_ui__c1Qk02Dcx = \"PlasmicPreview-module--textname_ui__c1Qk02Dcx--To1jk\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function DuoIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M3.625 7.39a.744.744 0 01-.8.737v.97c0 .623.517 1.131 1.15 1.131.632 0 1.148-.508 1.148-1.132V7.85c0-.623-.516-1.132-1.148-1.132-.208 0-.402.055-.57.15a.73.73 0 01.22.523zm7.946 0a.744.744 0 01-.799.737v.97c0 .623.516 1.131 1.149 1.131s1.149-.508 1.149-1.132V7.85c0-.623-.516-1.132-1.15-1.132-.206 0-.4.055-.569.15a.73.73 0 01.22.523z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M6.279 5.293L3.763 2.6c-.15-.148-.333-.132-.45.049-.26.452-.353.967-.284 1.466l-.748-.826c-.15-.148-.4-.132-.5.065-.253.428-.354.91-.308 1.383A3.462 3.462 0 000 7.57v1.821c0 1.903 1.565 3.462 3.513 3.462h.1a3.521 3.521 0 003.152-1.931l-.405-.07c-.05 0-.067-.017-.067-.066v-.066c.15-.754.883-1.312 1.749-1.312.815 0 1.531.574 1.681 1.312v.066c0 .05-.016.082-.066.066l-.402.069a3.517 3.517 0 003.149 1.932h.083C14.418 12.853 16 11.31 16 9.39V7.554a3.445 3.445 0 00-1.457-2.807 2.268 2.268 0 00-.308-1.393c-.083-.197-.333-.213-.483-.065l-.75.822a2.269 2.269 0 00-.299-1.462.3.3 0 00-.482-.05l-2.142 2.337a3.478 3.478 0 00-.289.276c-1.019.842-2.54.869-3.511.081zm-.135 2.458c0-1.329-1.1-2.412-2.448-2.412-1.348 0-2.447 1.083-2.447 2.412v1.46c0 1.329 1.099 2.412 2.447 2.412 1.349 0 2.448-1.083 2.448-2.412v-1.46zm6.16-2.412c1.348 0 2.447 1.083 2.447 2.412v1.46c0 1.329-1.099 2.412-2.447 2.412-1.349 0-2.448-1.083-2.448-2.412v-1.46c0-1.329 1.1-2.412 2.448-2.412z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        d={\n          \"M8.032 9.408zM6.9 10.925v.098a1.125 1.125 0 002.25 0v-.103l-1.11.192h-.06l-1.08-.187z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default DuoIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function FigmaIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        stroke: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M7.533 8A1.833 1.833 0 1111.2 8a1.833 1.833 0 01-3.667 0zm-3.196 5.963a1.833 1.833 0 011.296-3.13h1.834v1.834a1.833 1.833 0 01-3.13 1.296zm5.03-8.796H7.533V1.5h1.834a1.833 1.833 0 110 3.667zm-5.03-.537A1.833 1.833 0 015.633 1.5h1.834v3.667H5.633c-.486 0-.952-.193-1.296-.537zm0 4.666a1.833 1.833 0 011.296-3.13h1.834v3.667H5.633c-.486 0-.952-.193-1.296-.537z\"\n        }\n        stroke={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default FigmaIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function PlasmicIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M.889 12c-.49 0-.894-.4-.84-.887a8 8 0 0115.902 0c.053.488-.35.887-.84.887h-.889a6.222 6.222 0 10-12.444 0h-.89z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M2.667 12a5.333 5.333 0 0110.666 0h-1.777a3.555 3.555 0 10-7.112 0H2.667z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M5.333 12a2.667 2.667 0 015.334 0H9.333c-.245 0-.435-.21-.553-.427a.89.89 0 00-1.56 0c-.118.217-.308.427-.553.427H5.333z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default PlasmicIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function NeovimIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M3 4.182L5.308 2 13 11.818 10.692 14 3 4.182zm10 .363L10.308 2v6L13 11.454V4.545z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M5.692 14V8L3 4.545v6.91L5.692 14zm-.769-1.756V8.24L3.77 6.759v4.394l1.154 1.091z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default NeovimIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function ProcessingIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M12.683 10.31C11.62 11.375 10.097 12 8.248 12V9c1.15 0 1.878-.374 2.314-.81.45-.451.686-1.061.686-1.69s-.236-1.239-.686-1.69C10.126 4.375 9.398 4 8.248 4V1c1.85 0 3.372.626 4.435 1.69a5.378 5.378 0 011.565 3.81 5.378 5.378 0 01-1.565 3.81z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        d={\n          \"M2.245 10.004L1.048 11.6l2.4 1.8 6-8-2.4-1.8L4.35 7.196 5.683 9.86l-2.808 1.405-.63-1.26z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        d={\"M2.338 9.879l.6 1.198 2.557-1.28-1.238-2.476-1.919 2.558z\"}\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        d={\"M1 7.202l2.558-1.279 1.937 3.875-2.558 1.279L1 7.202z\"}\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default ProcessingIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function LinkedinIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M13.633 13.633h-2.37V9.92c0-.885-.017-2.025-1.234-2.025-1.235 0-1.424.965-1.424 1.96v3.778h-2.37V5.998H8.51V7.04h.031a2.494 2.494 0 012.246-1.233c2.403 0 2.846 1.58 2.846 3.637l-.001 4.188zM3.56 4.954a1.376 1.376 0 110-2.751 1.376 1.376 0 010 2.751zm1.185 8.68H2.372V5.997h2.373v7.635zM14.815 0H1.18A1.168 1.168 0 000 1.154v13.691A1.168 1.168 0 001.18 16h13.635A1.17 1.17 0 0016 14.845V1.153A1.17 1.17 0 0014.815 0\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default LinkedinIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function DribbbleIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M8 16A8 8 0 108 0a8 8 0 000 16zM1 8c0-3.864 3.136-7 7-7 3.857 0 7 3.136 7 7s-3.143 7-7 7c-3.864 0-7-3.136-7-7zm12.975-.053a5.951 5.951 0 00-1.351-3.72c-.13.167-1.132 1.457-3.333 2.353.136.281.273.577.394.866.02.044.037.088.055.132.024.061.048.121.075.179 1.935-.244 3.856.13 4.14.186l.02.004zm-2.012-4.411A5.966 5.966 0 008 2.033a6.08 6.08 0 00-1.405.159l.008.01c.192.261 1.26 1.717 2.225 3.49 2.125-.797 3.029-2.004 3.135-2.156zm-4.29 2.513a37.73 37.73 0 00-2.216-3.455 6.007 6.007 0 00-3.31 4.184h.015c.335 0 2.766.002 5.512-.73zM2.018 7.825v.183c0 1.533.585 2.938 1.534 3.993.137-.228 1.777-2.946 4.859-3.94l.117-.034.118-.035a17.784 17.784 0 00-.486-1.017c-2.983.896-5.884.858-6.142.85zm2.316 4.897A5.937 5.937 0 008 13.982a5.88 5.88 0 002.338-.478 24.719 24.719 0 00-1.275-4.532c-.008.004-.013.005-.02.007a.131.131 0 00-.018.008c-3.371 1.177-4.586 3.515-4.692 3.735zm5.838-4.024c.782 2.15 1.101 3.895 1.162 4.26a5.928 5.928 0 002.559-4.001c-.205-.069-1.845-.555-3.72-.259z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default DribbbleIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function GithubIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0016 8c0-4.42-3.58-8-8-8z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default GithubIcon\n/* prettier-ignore-end */\n","export default __webpack_public_path__ + \"static/selfPortrait-d6048d3ff3da15534ddebd1d956f9713.png\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: owBVWJcT4K\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport Tag from \"../../Tag\" // plasmic-import: lqv31eB-tK/component\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicPreview.module.css\" // plasmic-import: owBVWJcT4K/css\nimport DuoIcon from \"./icons/PlasmicIcon__Duo\" // plasmic-import: -Sn3oKbpj/icon\nimport FigmaIcon from \"./icons/PlasmicIcon__Figma\" // plasmic-import: 0E6VNpvfVZ/icon\nimport PlasmicIcon from \"./icons/PlasmicIcon__Plasmic\" // plasmic-import: brPKQ_p-dZ/icon\nimport NeovimIcon from \"./icons/PlasmicIcon__Neovim\" // plasmic-import: vdZN0hmLgA/icon\nimport ProcessingIcon from \"./icons/PlasmicIcon__Processing\" // plasmic-import: fhhpKKup_h/icon\nimport LinkedinIcon from \"./icons/PlasmicIcon__Linkedin\" // plasmic-import: fNKpYQeP9/icon\nimport DribbbleIcon from \"./icons/PlasmicIcon__Dribbble\" // plasmic-import: ihEMujSlj/icon\nimport GithubIcon from \"./icons/PlasmicIcon__Github\" // plasmic-import: CEDPVo8n8/icon\nimport selfPortraitBj4ZnGhn7D from \"./images/selfPortrait.png\" // plasmic-import: BJ4znGHN7D/picture\n\nexport const PlasmicPreview__VariantProps = new Array(\"name\")\n\nexport const PlasmicPreview__ArgProps = new Array(\"words\")\n\nfunction PlasmicPreview__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    screen: useScreenVariantsekypzdksLjd0F(),\n    mode: useMode(),\n  })\n\n  return (\n    <div\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.rootname_learnin]: hasVariant(variants, \"name\", \"learnin\"),\n          [sty.rootname_likeness]: hasVariant(variants, \"name\", \"likeness\"),\n          [sty.rootname_service]: hasVariant(variants, \"name\", \"service\"),\n          [sty.rootname_tracks]: hasVariant(variants, \"name\", \"tracks\"),\n          [sty.rootname_ui]: hasVariant(variants, \"name\", \"ui\"),\n          [sty.rootname_ux]: hasVariant(variants, \"name\", \"ux\"),\n          [sty.rootname_words]: hasVariant(variants, \"name\", \"words\"),\n        }\n      )}\n      id={hasVariant(variants, \"name\", \"tracks\") ? \"contact\" : undefined}\n    >\n      {(\n        hasVariant(variants, \"name\", \"ux\")\n          ? true\n          : hasVariant(variants, \"name\", \"ui\")\n          ? true\n          : hasVariant(variants, \"name\", \"words\")\n          ? true\n          : hasVariant(variants, \"name\", \"likeness\")\n          ? true\n          : true\n      ) ? (\n        <div\n          data-plasmic-name={\"words\"}\n          data-plasmic-override={overrides.words}\n          className={classNames(projectcss.all, sty.words, {\n            [sty.wordsname_likeness]: hasVariant(variants, \"name\", \"likeness\"),\n            [sty.wordsname_ui]: hasVariant(variants, \"name\", \"ui\"),\n            [sty.wordsname_ux]: hasVariant(variants, \"name\", \"ux\"),\n            [sty.wordsname_words]: hasVariant(variants, \"name\", \"words\"),\n          })}\n        >\n          {p.renderPlasmicSlot({\n            defaultContents: (\n              <React.Fragment>\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__tUkGt\n                  )}\n                >\n                  {\"only a few. i'm not a fan of using a lot.\"}\n                </div>\n\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__eActQ\n                  )}\n                >\n                  {\n                    \"however, i am a fan of thinking through complex systems and mapping them to intuitive representations———facilitating experiences that make sense.\"\n                  }\n                </div>\n\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__q4H87\n                  )}\n                >\n                  {\n                    \"i believe that form follows function follows form: the way something works should inform how it looks, which will influence how it's used. my job is to guide that process in a positive way.\"\n                  }\n                </div>\n\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__ggcwH\n                  )}\n                >\n                  {\n                    \"working with global enterprises, local startups and lots of clients in between, i've built digital products, crafted brand experiences, facilitated innovation workshops, filled up countless sketchbooks, and teamed up with some pretty awesome people.\"\n                  }\n                </div>\n\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__jmRsy\n                  )}\n                >\n                  {\"i am a fan of that.\"}\n                </div>\n              </React.Fragment>\n            ),\n\n            value: args.words,\n            className: classNames(sty.slotTargetWords),\n          })}\n        </div>\n      ) : null}\n      {(\n        hasVariant(variants, \"name\", \"tracks\")\n          ? true\n          : hasVariant(variants, \"name\", \"service\")\n          ? true\n          : hasVariant(variants, \"name\", \"ux\")\n          ? true\n          : hasVariant(variants, \"name\", \"ui\")\n          ? true\n          : hasVariant(variants, \"name\", \"learnin\")\n          ? true\n          : hasVariant(variants, \"name\", \"words\")\n          ? true\n          : true\n      ) ? (\n        <p.PlasmicImg\n          data-plasmic-name={\"likeness\"}\n          data-plasmic-override={overrides.likeness}\n          alt={\"\"}\n          className={classNames(sty.likeness, {\n            [sty.likenessname_learnin]: hasVariant(variants, \"name\", \"learnin\"),\n            [sty.likenessname_likeness]: hasVariant(\n              variants,\n              \"name\",\n              \"likeness\"\n            ),\n\n            [sty.likenessname_service]: hasVariant(variants, \"name\", \"service\"),\n            [sty.likenessname_tracks]: hasVariant(variants, \"name\", \"tracks\"),\n            [sty.likenessname_ui]: hasVariant(variants, \"name\", \"ui\"),\n            [sty.likenessname_ux]: hasVariant(variants, \"name\", \"ux\"),\n            [sty.likenessname_words]: hasVariant(variants, \"name\", \"words\"),\n          })}\n          displayHeight={\"auto\"}\n          displayMaxHeight={\"none\"}\n          displayMaxWidth={\"200px\"}\n          displayMinHeight={\"0\"}\n          displayMinWidth={\"0\"}\n          displayWidth={\"auto\"}\n          loading={\"lazy\"}\n          src={{\n            src: selfPortraitBj4ZnGhn7D,\n            fullWidth: 600,\n            fullHeight: 840,\n            aspectRatio: undefined,\n          }}\n        />\n      ) : null}\n      {(hasVariant(variants, \"name\", \"ux\") ? true : true) ? (\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"orgtool\"}\n          data-plasmic-override={overrides.orgtool}\n          hasGap={true}\n          className={classNames(projectcss.all, sty.orgtool, {\n            [sty.orgtoolname_ux]: hasVariant(variants, \"name\", \"ux\"),\n          })}\n        >\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text__vluzm,\n              {\n                [sty.textname_ux__vluzmMi7Gi]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"ux\"\n                ),\n              }\n            )}\n          >\n            {\"centering people in all i create\"}\n          </div>\n\n          <div\n            className={classNames(projectcss.all, sty.columns__fKfqK, {\n              [sty.columnsname_ui__fKfqK02Dcx]: hasVariant(\n                variants,\n                \"name\",\n                \"ui\"\n              ),\n\n              [sty.columnsname_ux__fKfqKmi7Gi]: hasVariant(\n                variants,\n                \"name\",\n                \"ux\"\n              ),\n            })}\n          >\n            {(\n              hasVariant(variants, \"name\", \"ux\")\n                ? true\n                : hasVariant(variants, \"name\", \"ui\")\n                ? true\n                : true\n            ) ? (\n              <div\n                className={classNames(projectcss.all, sty.column__czaT, {\n                  [sty.columnname_ui__czaT02Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ui\"\n                  ),\n\n                  [sty.columnname_ux__czaTmi7Gi]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ux\"\n                  ),\n                })}\n              >\n                <Tag\n                  className={classNames(\"__wab_instance\", sty.tag__jlXbo, {\n                    [sty.tagname_ux__jlXbomi7Gi]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"ux\"\n                    ),\n                  })}\n                  label={\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__oMpwN\n                      )}\n                    >\n                      {\"user research\"}\n                    </div>\n                  }\n                />\n              </div>\n            ) : null}\n            {(hasVariant(variants, \"name\", \"ux\") ? true : true) ? (\n              <div\n                className={classNames(projectcss.all, sty.column__vlSb0, {\n                  [sty.columnname_ux__vlSb0Mi7Gi]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ux\"\n                  ),\n                })}\n              >\n                <Tag\n                  className={classNames(\"__wab_instance\", sty.tag___3Z4Ni, {\n                    [sty.tagname_ux___3Z4NiMi7Gi]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"ux\"\n                    ),\n                  })}\n                  label={\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__qHpmv\n                      )}\n                    >\n                      {\"user testing\"}\n                    </div>\n                  }\n                />\n              </div>\n            ) : null}\n            {(\n              hasVariant(variants, \"name\", \"ux\")\n                ? true\n                : hasVariant(variants, \"name\", \"ui\")\n                ? true\n                : true\n            ) ? (\n              <div\n                className={classNames(projectcss.all, sty.column__ltGx2, {\n                  [sty.columnname_ui__ltGx202Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ui\"\n                  ),\n\n                  [sty.columnname_ux__ltGx2Mi7Gi]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ux\"\n                  ),\n                })}\n              >\n                <Tag\n                  className={classNames(\"__wab_instance\", sty.tag___80Bgw, {\n                    [sty.tagname_ux___80BgwMi7Gi]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"ux\"\n                    ),\n                  })}\n                  label={\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__eJah\n                      )}\n                    >\n                      {\"information architecture\"}\n                    </div>\n                  }\n                />\n              </div>\n            ) : null}\n          </div>\n        </p.Stack>\n      ) : null}\n      {(hasVariant(variants, \"name\", \"learnin\") ? true : true) ? (\n        <div\n          data-plasmic-name={\"learnin\"}\n          data-plasmic-override={overrides.learnin}\n          className={classNames(projectcss.all, sty.learnin, {\n            [sty.learninname_learnin]: hasVariant(variants, \"name\", \"learnin\"),\n            [sty.learninname_tracks]: hasVariant(variants, \"name\", \"tracks\"),\n          })}\n        >\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text__z9Ey,\n              {\n                [sty.textname_learnin__z9EyahccJ]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"learnin\"\n                ),\n              }\n            )}\n          >\n            {\n              \"i love to master new tools and products\\nthese are a few of my favorite things\"\n            }\n          </div>\n\n          <p.Stack\n            as={\"div\"}\n            hasGap={true}\n            className={classNames(projectcss.all, sty.freeBox__r0Wut, {\n              [sty.freeBoxname_learnin__r0WuTahccJ]: hasVariant(\n                variants,\n                \"name\",\n                \"learnin\"\n              ),\n            })}\n          >\n            <div\n              className={classNames(projectcss.all, sty.freeBox__b8ZD3, {\n                [sty.freeBoxname_learnin__b8ZD3AhccJ]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"learnin\"\n                ),\n              })}\n            >\n              <DuoIcon\n                className={classNames(projectcss.all, sty.svg__hgkQw, {\n                  [sty.svgname_learnin__hgkQwahccJ]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"learnin\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__tuHAs,\n                  {\n                    [sty.textname_learnin__tuHAsahccJ]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"learnin\"\n                    ),\n                  }\n                )}\n              >\n                {\"duolingo\"}\n              </div>\n            </div>\n\n            <div\n              className={classNames(projectcss.all, sty.freeBox__qHaYy, {\n                [sty.freeBoxname_learnin__qHaYyahccJ]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"learnin\"\n                ),\n              })}\n            >\n              <FigmaIcon\n                className={classNames(projectcss.all, sty.svg__y70L2, {\n                  [sty.svgname_learnin__y70L2AhccJ]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"learnin\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__xzO0C,\n                  {\n                    [sty.textname_learnin__xzO0CahccJ]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"learnin\"\n                    ),\n                  }\n                )}\n              >\n                {\"figma\"}\n              </div>\n            </div>\n\n            <div\n              className={classNames(projectcss.all, sty.freeBox__rjN70, {\n                [sty.freeBoxname_learnin__rjN70AhccJ]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"learnin\"\n                ),\n              })}\n            >\n              <PlasmicIcon\n                className={classNames(projectcss.all, sty.svg__cZkPa, {\n                  [sty.svgname_learnin__cZkPaahccJ]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"learnin\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__tCun,\n                  {\n                    [sty.textname_learnin__tCunAhccJ]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"learnin\"\n                    ),\n                  }\n                )}\n              >\n                {\"plasmic\"}\n              </div>\n            </div>\n\n            <div\n              className={classNames(projectcss.all, sty.freeBox__mnFug, {\n                [sty.freeBoxname_learnin__mnFugahccJ]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"learnin\"\n                ),\n              })}\n            >\n              <NeovimIcon\n                className={classNames(projectcss.all, sty.svg__qRw6L, {\n                  [sty.svgname_learnin__qRw6LahccJ]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"learnin\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__u6AAk,\n                  {\n                    [sty.textname_learnin__u6AAKahccJ]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"learnin\"\n                    ),\n                  }\n                )}\n              >\n                {\"neovim\"}\n              </div>\n            </div>\n\n            <div\n              className={classNames(projectcss.all, sty.freeBox__a5ZKr, {\n                [sty.freeBoxname_learnin__a5ZKRahccJ]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"learnin\"\n                ),\n              })}\n            >\n              <ProcessingIcon\n                className={classNames(projectcss.all, sty.svg__sK1Ji, {\n                  [sty.svgname_learnin__sK1JIahccJ]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"learnin\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__hHbAf,\n                  {\n                    [sty.textname_learnin__hHbAFahccJ]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"learnin\"\n                    ),\n                  }\n                )}\n              >\n                {\"processing\"}\n              </div>\n            </div>\n          </p.Stack>\n        </div>\n      ) : null}\n      {(hasVariant(variants, \"name\", \"tracks\") ? true : true) ? (\n        <div\n          data-plasmic-name={\"tracks\"}\n          data-plasmic-override={overrides.tracks}\n          className={classNames(projectcss.all, sty.tracks, {\n            [sty.tracksname_tracks]: hasVariant(variants, \"name\", \"tracks\"),\n          })}\n        >\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text__rDhas,\n              {\n                [sty.textname_tracks__rDhaSfOzBj]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"tracks\"\n                ),\n              }\n            )}\n          >\n            {\"in sunny sandy eggo, california &\"}\n          </div>\n\n          <p.Stack\n            as={\"div\"}\n            hasGap={true}\n            className={classNames(projectcss.all, sty.freeBox__xSz8B, {\n              [sty.freeBoxname_tracks__xSz8BfOzBj]: hasVariant(\n                variants,\n                \"name\",\n                \"tracks\"\n              ),\n            })}\n          >\n            <p.Stack\n              as={p.PlasmicLink}\n              hasGap={true}\n              className={classNames(\n                projectcss.all,\n                projectcss.a,\n                sty.link__xs6V\n              )}\n              component={Link}\n              platform={\"gatsby\"}\n            >\n              <LinkedinIcon\n                className={classNames(projectcss.all, sty.svg__sdmbw, {\n                  [sty.svgname_tracks__sdmbwfOzBj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"tracks\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__sO13D,\n                  {\n                    [sty.textname_tracks__sO13DfOzBj]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"tracks\"\n                    ),\n                  }\n                )}\n              >\n                {\"/jeffmwade\"}\n              </div>\n            </p.Stack>\n\n            <p.Stack\n              as={p.PlasmicLink}\n              hasGap={true}\n              className={classNames(\n                projectcss.all,\n                projectcss.a,\n                sty.link__bIrkC,\n                {\n                  [sty.linkname_tracks__bIrkCfOzBj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"tracks\"\n                  ),\n                }\n              )}\n              component={Link}\n              platform={\"gatsby\"}\n            >\n              <DribbbleIcon\n                className={classNames(projectcss.all, sty.svg__wjqFi, {\n                  [sty.svgname_tracks__wjqFIfOzBj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"tracks\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__d3Yj,\n                  {\n                    [sty.textname_tracks__d3YjFOzBj]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"tracks\"\n                    ),\n                  }\n                )}\n              >\n                {\"@jeffwade\"}\n              </div>\n            </p.Stack>\n\n            <p.Stack\n              as={p.PlasmicLink}\n              hasGap={true}\n              className={classNames(\n                projectcss.all,\n                projectcss.a,\n                sty.link___6NQdw,\n                {\n                  [sty.linkname_tracks___6NQdwfOzBj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"tracks\"\n                  ),\n                }\n              )}\n              component={Link}\n              platform={\"gatsby\"}\n            >\n              <GithubIcon\n                className={classNames(projectcss.all, sty.svg__cpFny, {\n                  [sty.svgname_tracks__cpFnyfOzBj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"tracks\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__aampz,\n                  {\n                    [sty.textname_tracks__aampzfOzBj]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"tracks\"\n                    ),\n                  }\n                )}\n              >\n                {\"@jeffwade\"}\n              </div>\n            </p.Stack>\n          </p.Stack>\n\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text__qsBq,\n              {\n                [sty.textname_tracks__qsBqFOzBj]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"tracks\"\n                ),\n              }\n            )}\n          >\n            <React.Fragment>\n              <React.Fragment>\n                {\"you can direct electronic post to\\n\"}\n              </React.Fragment>\n              <span\n                data-plasmic-name={\"span\"}\n                data-plasmic-override={overrides.span}\n                aria-label={\"email address\"}\n                className={classNames(\n                  projectcss.all,\n                  projectcss.span,\n                  projectcss.__wab_text,\n                  projectcss.plasmic_default__inline,\n                  sty.span\n                )}\n                id={\"email\"}\n              >\n                {\"yes [arobase] jeffdo [period] es\"}\n              </span>\n              <React.Fragment>{\"\"}</React.Fragment>\n            </React.Fragment>\n          </div>\n        </div>\n      ) : null}\n      {(\n        hasVariant(variants, \"name\", \"service\")\n          ? true\n          : hasVariant(variants, \"name\", \"ux\")\n          ? true\n          : false\n      ) ? (\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"sprints\"}\n          data-plasmic-override={overrides.sprints}\n          hasGap={true}\n          className={classNames(projectcss.all, sty.sprints, {\n            [sty.sprintsname_service]: hasVariant(variants, \"name\", \"service\"),\n            [sty.sprintsname_ux]: hasVariant(variants, \"name\", \"ux\"),\n          })}\n        >\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text__jtaLp,\n              {\n                [sty.textname_service__jtaLp9XxcC]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"service\"\n                ),\n\n                [sty.textname_ux__jtaLpMi7Gi]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"ux\"\n                ),\n              }\n            )}\n          >\n            {\"taking a holistic approach to products & brands\"}\n          </div>\n\n          <div\n            className={classNames(projectcss.all, sty.columns__chWye, {\n              [sty.columnsname_service__chWye9XxcC]: hasVariant(\n                variants,\n                \"name\",\n                \"service\"\n              ),\n\n              [sty.columnsname_ui__chWye02Dcx]: hasVariant(\n                variants,\n                \"name\",\n                \"ui\"\n              ),\n\n              [sty.columnsname_ux__chWyeMi7Gi]: hasVariant(\n                variants,\n                \"name\",\n                \"ux\"\n              ),\n            })}\n          >\n            {(\n              hasVariant(variants, \"name\", \"service\")\n                ? true\n                : hasVariant(variants, \"name\", \"ux\")\n                ? true\n                : hasVariant(variants, \"name\", \"ui\")\n                ? true\n                : true\n            ) ? (\n              <div\n                className={classNames(projectcss.all, sty.column__uozKt, {\n                  [sty.columnname_service__uozKt9XxcC]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"service\"\n                  ),\n\n                  [sty.columnname_ui__uozKt02Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ui\"\n                  ),\n\n                  [sty.columnname_ux__uozKtMi7Gi]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ux\"\n                  ),\n                })}\n              >\n                <Tag\n                  className={classNames(\"__wab_instance\", sty.tag__nAeA4, {\n                    [sty.tagname_ux__nAeA4Mi7Gi]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"ux\"\n                    ),\n                  })}\n                  flippabble={true}\n                  label={\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__oOtr7\n                      )}\n                    >\n                      {\"workshop facilitation\"}\n                    </div>\n                  }\n                />\n              </div>\n            ) : null}\n            {(\n              hasVariant(variants, \"name\", \"service\")\n                ? true\n                : hasVariant(variants, \"name\", \"ux\")\n                ? true\n                : hasVariant(variants, \"name\", \"ui\")\n                ? true\n                : true\n            ) ? (\n              <div\n                className={classNames(projectcss.all, sty.column__hg2Hk, {\n                  [sty.columnname_service__hg2Hk9XxcC]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"service\"\n                  ),\n\n                  [sty.columnname_ui__hg2Hk02Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ui\"\n                  ),\n\n                  [sty.columnname_ux__hg2Hkmi7Gi]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ux\"\n                  ),\n                })}\n              >\n                <Tag\n                  className={classNames(\"__wab_instance\", sty.tag__c7IVv, {\n                    [sty.tagname_ux__c7IVvMi7Gi]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"ux\"\n                    ),\n                  })}\n                  flippabble={true}\n                  label={\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__v9MUp\n                      )}\n                    >\n                      {\"personas + \\njourney mapping\"}\n                    </div>\n                  }\n                />\n              </div>\n            ) : null}\n            {(\n              hasVariant(variants, \"name\", \"service\")\n                ? true\n                : hasVariant(variants, \"name\", \"ux\")\n                ? true\n                : hasVariant(variants, \"name\", \"ui\")\n                ? true\n                : true\n            ) ? (\n              <div\n                className={classNames(projectcss.all, sty.column__kcC5, {\n                  [sty.columnname_service__kcC59XxcC]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"service\"\n                  ),\n\n                  [sty.columnname_ui__kcC502Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ui\"\n                  ),\n\n                  [sty.columnname_ux__kcC5Mi7Gi]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ux\"\n                  ),\n                })}\n              >\n                <Tag\n                  className={classNames(\"__wab_instance\", sty.tag__v3NoT, {\n                    [sty.tagname_ux__v3NoTmi7Gi]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"ux\"\n                    ),\n                  })}\n                  flippabble={true}\n                  label={\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__oTmx5\n                      )}\n                    >\n                      {\"agile development\"}\n                    </div>\n                  }\n                />\n              </div>\n            ) : null}\n          </div>\n        </p.Stack>\n      ) : null}\n      {(\n        hasVariant(variants, \"name\", \"ux\")\n          ? true\n          : hasVariant(variants, \"name\", \"ui\")\n          ? true\n          : false\n      ) ? (\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"brandtool\"}\n          data-plasmic-override={overrides.brandtool}\n          hasGap={true}\n          className={classNames(projectcss.all, sty.brandtool, {\n            [sty.brandtoolname_ui]: hasVariant(variants, \"name\", \"ui\"),\n            [sty.brandtoolname_ux]: hasVariant(variants, \"name\", \"ux\"),\n          })}\n        >\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text__yFoO8,\n              {\n                [sty.textname_ui__yFoO802Dcx]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"ui\"\n                ),\n\n                [sty.textname_ux__yFoO8Mi7Gi]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"ux\"\n                ),\n              }\n            )}\n          >\n            {hasVariant(variants, \"name\", \"ui\")\n              ? \"making products look good.\"\n              : \"robust organizational structure-mapping and transformation planning for enterprise clients\"}\n          </div>\n\n          <div\n            className={classNames(projectcss.all, sty.columns__gt8Ac, {\n              [sty.columnsname_ui__gt8Ac02Dcx]: hasVariant(\n                variants,\n                \"name\",\n                \"ui\"\n              ),\n\n              [sty.columnsname_ux__gt8Acmi7Gi]: hasVariant(\n                variants,\n                \"name\",\n                \"ux\"\n              ),\n            })}\n          >\n            {(\n              hasVariant(variants, \"name\", \"ux\")\n                ? true\n                : hasVariant(variants, \"name\", \"ui\")\n                ? true\n                : true\n            ) ? (\n              <div\n                className={classNames(projectcss.all, sty.column__pc6K5, {\n                  [sty.columnname_ui__pc6K502Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ui\"\n                  ),\n\n                  [sty.columnname_ux__pc6K5Mi7Gi]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ux\"\n                  ),\n                })}\n              >\n                <Tag\n                  className={classNames(\"__wab_instance\", sty.tag__aS62V, {\n                    [sty.tagname_ui__aS62V02Dcx]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"ui\"\n                    ),\n\n                    [sty.tagname_ux__aS62Vmi7Gi]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"ux\"\n                    ),\n                  })}\n                  label={\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__bjBvD,\n                        {\n                          [sty.textname_ui__bjBvD02Dcx]: hasVariant(\n                            variants,\n                            \"name\",\n                            \"ui\"\n                          ),\n                        }\n                      )}\n                    >\n                      {hasVariant(variants, \"name\", \"ui\")\n                        ? \"design systems\"\n                        : \"ux research\"}\n                    </div>\n                  }\n                />\n              </div>\n            ) : null}\n            {(\n              hasVariant(variants, \"name\", \"ux\")\n                ? true\n                : hasVariant(variants, \"name\", \"ui\")\n                ? true\n                : true\n            ) ? (\n              <div\n                className={classNames(projectcss.all, sty.column__rgUz1, {\n                  [sty.columnname_ui__rgUz102Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ui\"\n                  ),\n\n                  [sty.columnname_ux__rgUz1Mi7Gi]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ux\"\n                  ),\n                })}\n              >\n                <Tag\n                  className={classNames(\"__wab_instance\", sty.tag__bfqLc, {\n                    [sty.tagname_ui__bfqLc02Dcx]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"ui\"\n                    ),\n\n                    [sty.tagname_ux__bfqLcmi7Gi]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"ux\"\n                    ),\n                  })}\n                  label={\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text___4AXb2,\n                        {\n                          [sty.textname_ui___4AXb202Dcx]: hasVariant(\n                            variants,\n                            \"name\",\n                            \"ui\"\n                          ),\n                        }\n                      )}\n                    >\n                      {hasVariant(variants, \"name\", \"ui\")\n                        ? \"prototyping\"\n                        : \"agile workflow\"}\n                    </div>\n                  }\n                />\n              </div>\n            ) : null}\n            {(\n              hasVariant(variants, \"name\", \"ux\")\n                ? true\n                : hasVariant(variants, \"name\", \"ui\")\n                ? true\n                : true\n            ) ? (\n              <div\n                className={classNames(projectcss.all, sty.column__xwus4, {\n                  [sty.columnname_ui__xwus402Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ui\"\n                  ),\n\n                  [sty.columnname_ux__xwus4Mi7Gi]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"ux\"\n                  ),\n                })}\n              >\n                <Tag\n                  className={classNames(\"__wab_instance\", sty.tag__oB0D, {\n                    [sty.tagname_ui__oB0D02Dcx]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"ui\"\n                    ),\n\n                    [sty.tagname_ux__oB0DMi7Gi]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"ux\"\n                    ),\n                  })}\n                  label={\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__c1Qk,\n                        {\n                          [sty.textname_ui__c1Qk02Dcx]: hasVariant(\n                            variants,\n                            \"name\",\n                            \"ui\"\n                          ),\n                        }\n                      )}\n                    >\n                      {hasVariant(variants, \"name\", \"ui\")\n                        ? \"micro-interactions\"\n                        : \"ux/ui design\"}\n                    </div>\n                  }\n                />\n              </div>\n            ) : null}\n          </div>\n        </p.Stack>\n      ) : null}\n    </div>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\n    \"root\",\n    \"words\",\n    \"likeness\",\n    \"orgtool\",\n    \"learnin\",\n    \"tracks\",\n    \"span\",\n    \"sprints\",\n    \"brandtool\",\n  ],\n\n  words: [\"words\"],\n  likeness: [\"likeness\"],\n  orgtool: [\"orgtool\"],\n  learnin: [\"learnin\"],\n  tracks: [\"tracks\", \"span\"],\n  span: [\"span\"],\n  sprints: [\"sprints\"],\n  brandtool: [\"brandtool\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicPreview__ArgProps,\n      internalVariantPropNames: PlasmicPreview__VariantProps,\n    })\n\n    return PlasmicPreview__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicPreview\"\n  } else {\n    func.displayName = `PlasmicPreview.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicPreview = Object.assign(\n  // Top-level PlasmicPreview renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    words: makeNodeComponent(\"words\"),\n    likeness: makeNodeComponent(\"likeness\"),\n    orgtool: makeNodeComponent(\"orgtool\"),\n    learnin: makeNodeComponent(\"learnin\"),\n    tracks: makeNodeComponent(\"tracks\"),\n    span: makeNodeComponent(\"span\"),\n    sprints: makeNodeComponent(\"sprints\"),\n    brandtool: makeNodeComponent(\"brandtool\"),\n    // Metadata about props expected for PlasmicPreview\n    internalVariantProps: PlasmicPreview__VariantProps,\n    internalArgProps: PlasmicPreview__ArgProps,\n  }\n)\n\nexport default PlasmicPreview\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { PlasmicPreview } from \"./plasmic/jeffdo_es/PlasmicPreview\"\n\nfunction Preview_(props, ref) {\n  const { name, ...rest } = props;\n  return <PlasmicPreview name={name} root={ { ref }} {...rest} />\n}\n\nconst Preview = React.forwardRef(Preview_)\n\nexport default Preview\n","import * as React from \"react\"\nimport { useEffect, useState } from \"react\"\nimport { PlasmicStripe } from \"./plasmic/jeffdo_es/PlasmicStripe\"\nimport useTooltip from \"../hooks/useTooltip\"\nimport useMousePosition from \"../hooks/useMousePosition\"\nimport Preview from \"../components/Preview\"\nimport ArrowRightIcon from \"../components/plasmic/jeffdo_es/icons/PlasmicIcon__ArrowRight\"\n\nfunction Stripe_(props, ref) {\n  const {\n    name,\n    href,\n    label,\n    icon,\n    category,\n    color,\n    mode,\n    highlighted,\n    lowlighted,\n    labelIsVisible,\n    ...rest\n  } = props\n  const [isHovered, setIsHovered] = useState(false)\n  const isBrowser = typeof window !== \"undefined\"\n  const mousePosition = useMousePosition()\n  const [mobile, setMobile] = useState(undefined)\n\n  const words = [\n    \"my name is jeff wade. i'm currently a design lead at bridger, in san diego, california.\",\n    \"i'm a fan of thinking through complex systems and mapping them to intuitive representations; shaping experiences that make sense.\",\n    \"i believe that form follows function follows form: the way something works should inform how it looks, which will influence how it's used.\",\n    \"my job is to guide the design process in a positive way, through facilitation, mentorship and rolling up my sleeves and diving in\",\n    \"working with global enterprises, local startups and many clients in between, i've designed digital products, crafted brand experiences and facilitated innovation workshops.\",\n    \"learning is my love language\",\n    \"i believe the primary rules of design (and life) are: relationships, relationships, relationships.\",\n    \"i sleep with my sketchbook next to my bed.\"\n  ];\n  const [currentWords, setCurrentWords] = useState(0);\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(max-width: 768px)\")\n    window.addEventListener(\"mousemove\", () => setMobile(mediaQuery.matches), {\n      once: true,\n    })\n    mediaQuery.addEventListener(\"change\", e => setMobile(e.matches))\n  }, [])\n\n  const labelStyles = {\n    position: \"absolute\",\n    display: \"flex\",\n    gap: \"1rem\",\n    alignItems: \"center\",\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n    opacity: 100,\n  }\n\n  // set the position of the striipe label based on the mouse position\n  //  \n  if (isBrowser) {\n    if (!mobile) {\n      if (mousePosition.x > window.innerWidth / 2) {\n        labelStyles[\"left\"] = \"auto\"\n        labelStyles[\"right\"] = window.innerWidth - mousePosition.x - 24\n        labelStyles[\"flexDirection\"] = \"row-reverse\"\n      } else {\n        labelStyles[\"left\"] = mousePosition.x - 24\n        labelStyles[\"right\"] = \"auto\"\n        labelStyles[\"flexDirection\"] = \"row\"\n      }\n    } else {\n      labelStyles[\"left\"] = \"calc(50vw - 200px)\"\n      labelStyles[\"right\"] = \"auto\"\n    }\n  }\n\n  let stripeLabel = null\n  if (category === \"work\" && isHovered) {\n    stripeLabel = (\n      <div style={labelStyles}>\n         {lowlighted ? \"work\" : \"see work samples\"}\n        <ArrowRightIcon />\n      </div>\n    )\n  } else if ( name === \"words\" && isHovered ) {\n    stripeLabel = (\n      <div style={labelStyles}>\n         {lowlighted ? null : \"more words\"}\n        <ArrowRightIcon />\n      </div>\n    )\n  } else if (!lowlighted && labelIsVisible) {\n    stripeLabel = (\n      <div style={labelStyles}>\n        {icon}\n        {label}\n      </div>\n    )\n  } else {\n    stripeLabel = null\n  }\n\n  let tooltipLabel =\n    category === \"work\" || !labelIsVisible || lowlighted ? [label, icon] : null\n\n  tooltipLabel = name === \"words\" ? [icon, label, `(${currentWords + 1}/${words.length})`] : tooltipLabel;\n  const content = (name===\"words\") ? <Preview name=\"words\" words={words[currentWords]}/> : <Preview name={name} />\n  const tooltip = useTooltip(\n    color,\n    tooltipLabel,\n    content,\n    \"334\",\n    \"480px\",\n    false\n  )\n\n  return (\n    <>\n      {isHovered && tooltip}\n      <PlasmicStripe\n        {...rest}\n        root={{\n          ref,\n          as: href ? \"a\" : undefined,\n        }}\n        href={href}\n        name={name}\n        color={color}\n        icon={null}\n        category={category}\n        mode={mode}\n        highlighted={highlighted}\n        lowlighted={lowlighted}\n        label={stripeLabel}\n        onClick={() => {\n          setCurrentWords((currentWords + 1)%words.length);\n        }}\n        onMouseOver={() => {\n          setIsHovered(true);\n        }}\n        onFocus={() => setIsHovered(true)}\n        onMouseOut={() => setIsHovered(false)}\n        onBlur={() => setIsHovered(false)}\n      />\n    </>\n  )\n}\n\nconst Stripe = React.forwardRef(Stripe_)\n\nexport default Stripe\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicHeadlineButton-module--root--LFUOj\";\nexport var h1__mLmRw = \"PlasmicHeadlineButton-module--h1__mLmRw--7cXrp\";\nexport var h1global_mode_dark__mLmRwjYvh = \"PlasmicHeadlineButton-module--h1global_mode_dark__mLmRwjYvh--dr-xM\";\nexport var slotTargetWord = \"PlasmicHeadlineButton-module--slotTargetWord--ywVbD\";\nexport var slotTargetWordglobal_mode_dark = \"PlasmicHeadlineButton-module--slotTargetWordglobal_mode_dark--pAv80\";\nexport var __wab_text = \"PlasmicHeadlineButton-module--__wab_text--BuOnH\";\nexport var __wab_slotStringWrapper = \"PlasmicHeadlineButton-module--__wab_slot-string-wrapper--emheJ\";\nexport var __wab_slot = \"PlasmicHeadlineButton-module--__wab_slot--GfG3j\";\nexport var h1__pd88E = \"PlasmicHeadlineButton-module--h1__pd88E--anAyn\";\nexport var slotTargetSymbol = \"PlasmicHeadlineButton-module--slotTargetSymbol--K250U\";\nexport var slotTargetSymbolglobal_mode_dark = \"PlasmicHeadlineButton-module--slotTargetSymbolglobal_mode_dark--7J9QM\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: uHRDF-VO-A\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicHeadlineButton.module.css\" // plasmic-import: uHRDF-VO-A/css\n\nexport const PlasmicHeadlineButton__VariantProps = new Array()\n\nexport const PlasmicHeadlineButton__ArgProps = new Array(\n  \"word\",\n  \"symbol\",\n  \"label\",\n  \"color\"\n)\n\nfunction PlasmicHeadlineButton__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n  })\n\n  return (\n    <p.Stack\n      as={\"div\"}\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      hasGap={true}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.rootglobal_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n        }\n      )}\n      tabIndex={1}\n    >\n      <h1\n        className={classNames(projectcss.all, projectcss.h1, sty.h1__mLmRw, {\n          [sty.h1global_mode_dark__mLmRwjYvh]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n        })}\n      >\n        {p.renderPlasmicSlot({\n          defaultContents: \"word\",\n          value: args.word,\n          className: classNames(sty.slotTargetWord, {\n            [sty.slotTargetWordglobal_mode_dark]: hasVariant(\n              globalVariants,\n              \"mode\",\n              \"dark\"\n            ),\n          }),\n        })}\n      </h1>\n\n      <h1 className={classNames(projectcss.all, projectcss.h1, sty.h1__pd88E)}>\n        {p.renderPlasmicSlot({\n          defaultContents: \"*\",\n          value: args.symbol,\n          className: classNames(sty.slotTargetSymbol, {\n            [sty.slotTargetSymbolglobal_mode_dark]: hasVariant(\n              globalVariants,\n              \"mode\",\n              \"dark\"\n            ),\n\n            [sty.slotTargetSymbolglobal_mode_reveal]: hasVariant(\n              globalVariants,\n              \"mode\",\n              \"reveal\"\n            ),\n          }),\n        })}\n      </h1>\n    </p.Stack>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicHeadlineButton__ArgProps,\n      internalVariantPropNames: PlasmicHeadlineButton__VariantProps,\n    })\n\n    return PlasmicHeadlineButton__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicHeadlineButton\"\n  } else {\n    func.displayName = `PlasmicHeadlineButton.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicHeadlineButton = Object.assign(\n  // Top-level PlasmicHeadlineButton renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    // Metadata about props expected for PlasmicHeadlineButton\n    internalVariantProps: PlasmicHeadlineButton__VariantProps,\n    internalArgProps: PlasmicHeadlineButton__ArgProps,\n  }\n)\n\nexport default PlasmicHeadlineButton\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { PlasmicHeadlineButton } from \"./plasmic/jeffdo_es/PlasmicHeadlineButton\"\nimport { useState } from \"react\";\nimport useTooltip from \"../hooks/useTooltip\";\n\nfunction HeadlineButton_(props, ref) {\n  const { color, label } = props;\n  const [isHovered, setIsHovered] = useState(false);\n  const tooltip = useTooltip(color, label, null, 120, 240, true);\n\n  return (\n    <>\n      { isHovered && tooltip }\n      <PlasmicHeadlineButton\n        root={{ ref }}\n        {...props}\n\n        onMouseOver={ () => setIsHovered(true) }\n        onMouseOut={ () => setIsHovered(false) }\n      />\n    </>\n  );\n}\n\nconst HeadlineButton = React.forwardRef(HeadlineButton_)\n\nexport default HeadlineButton\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicHeadline-module--root--+FOhO\";\nexport var headlineButton__xiaYn = \"PlasmicHeadline-module--headlineButton__xiaYn--7zs16\";\nexport var h1 = \"PlasmicHeadline-module--h1--H4unP\";\nexport var h1global_mode_dark = \"PlasmicHeadline-module--h1global_mode_dark--9wTPQ\";\nexport var textglobal_mode_dark = \"PlasmicHeadline-module--textglobal_mode_dark--Dj8Cy\";\nexport var headlineButton__b86Ep = \"PlasmicHeadline-module--headlineButton__b86Ep--GtGdy\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: KiN_FJLYI1\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport HeadlineButton from \"../../HeadlineButton\" // plasmic-import: uHRDF-VO-A/component\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicHeadline.module.css\" // plasmic-import: KiN_FJLYI1/css\n\nexport const PlasmicHeadline__VariantProps = new Array()\n\nexport const PlasmicHeadline__ArgProps = new Array(\"end\", \"first\")\n\nfunction PlasmicHeadline__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    screen: useScreenVariantsekypzdksLjd0F(),\n    mode: useMode(),\n  })\n\n  return (\n    <p.Stack\n      as={\"div\"}\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      hasGap={true}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n        }\n      )}\n      tabIndex={-1}\n    >\n      {p.renderPlasmicSlot({\n        defaultContents: (\n          <HeadlineButton\n            className={classNames(\"__wab_instance\", sty.headlineButton__xiaYn)}\n            color={\"purple\"}\n            label={\"*about jeff\"}\n            word={\"Jeff\"}\n          />\n        ),\n\n        value: args.first,\n      })}\n\n      <h1\n        data-plasmic-name={\"h1\"}\n        data-plasmic-override={overrides.h1}\n        className={classNames(projectcss.all, projectcss.h1, sty.h1, {\n          [sty.h1global_mode_dark]: hasVariant(globalVariants, \"mode\", \"dark\"),\n        })}\n      >\n        <div\n          data-plasmic-name={\"text\"}\n          data-plasmic-override={overrides.text}\n          className={classNames(\n            projectcss.all,\n            projectcss.__wab_text,\n            sty.text,\n            {\n              [sty.textglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n            }\n          )}\n        >\n          {hasVariant(globalVariants, \"mode\", \"dark\") ? \"does\" : \"does\"}\n        </div>\n      </h1>\n\n      {p.renderPlasmicSlot({\n        defaultContents: (\n          <HeadlineButton\n            className={classNames(\"__wab_instance\", sty.headlineButton__b86Ep)}\n            color={\"purple\"}\n            label={\"†work samples\"}\n            symbol={\"†\"}\n            word={\"design\"}\n          />\n        ),\n\n        value: args.end,\n      })}\n    </p.Stack>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"h1\", \"text\"],\n  h1: [\"h1\", \"text\"],\n  text: [\"text\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicHeadline__ArgProps,\n      internalVariantPropNames: PlasmicHeadline__VariantProps,\n    })\n\n    return PlasmicHeadline__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicHeadline\"\n  } else {\n    func.displayName = `PlasmicHeadline.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicHeadline = Object.assign(\n  // Top-level PlasmicHeadline renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    h1: makeNodeComponent(\"h1\"),\n    text: makeNodeComponent(\"text\"),\n    // Metadata about props expected for PlasmicHeadline\n    internalVariantProps: PlasmicHeadline__VariantProps,\n    internalArgProps: PlasmicHeadline__ArgProps,\n  }\n)\n\nexport default PlasmicHeadline\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { PlasmicHeadline } from \"./plasmic/jeffdo_es/PlasmicHeadline\"\n\nfunction Headline_(props, ref) {\n\n  return (\n    <PlasmicHeadline\n      root={{ ref }}\n      {...props}\n    />\n  )\n}\n\nconst Headline = React.forwardRef(Headline_)\n\nexport default Headline\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicHomepage-module--root--piTGt\";\nexport var rootglobal_mode_dark = \"PlasmicHomepage-module--rootglobal_mode_dark--gDrQH\";\nexport var rootglobal_arrangement_float = \"PlasmicHomepage-module--rootglobal_arrangement_float--jSXK7\";\nexport var _36Dot22 = \"PlasmicHomepage-module--_36Dot22--6z12H\";\nexport var callout = \"PlasmicHomepage-module--callout--Jhb6H\";\nexport var freeBox = \"PlasmicHomepage-module--freeBox--kRCni\";\nexport var svg__kiQg6 = \"PlasmicHomepage-module--svg__kiQg6--T4OIL\";\nexport var svg__iqt6V = \"PlasmicHomepage-module--svg__iqt6V--c+cck\";\nexport var text__ym5Bc = \"PlasmicHomepage-module--text__ym5Bc--gnBAg\";\nexport var svg__hdgd = \"PlasmicHomepage-module--svg__hdgd--FrO5B\";\nexport var likeness = \"PlasmicHomepage-module--likeness--kjgie\";\nexport var likenessglobal_arrangement_float = \"PlasmicHomepage-module--likenessglobal_arrangement_float--T6f4U\";\nexport var svg__gvVi7 = \"PlasmicHomepage-module--svg__gvVi7--b1ybr\";\nexport var words = \"PlasmicHomepage-module--words--xbRgA\";\nexport var wordsglobal_arrangement_float = \"PlasmicHomepage-module--wordsglobal_arrangement_float--22vAC\";\nexport var text__oP3Fs = \"PlasmicHomepage-module--text__oP3Fs---TVyO\";\nexport var svg__iok3E = \"PlasmicHomepage-module--svg__iok3E--SoAeQ\";\nexport var headline = \"PlasmicHomepage-module--headline--JnSyO\";\nexport var headlineglobal_arrangement_float = \"PlasmicHomepage-module--headlineglobal_arrangement_float--WNEW2\";\nexport var design = \"PlasmicHomepage-module--design--FmwK2\";\nexport var textglobal_highlight_work__p8PzPjCUoz = \"PlasmicHomepage-module--textglobal_highlight_work__p8PzPjCUoz--NPE8W\";\nexport var jeff = \"PlasmicHomepage-module--jeff--JRnZO\";\nexport var textglobal_highlight_about__r5O0RjOrod = \"PlasmicHomepage-module--textglobal_highlight_about__r5O0RjOrod--97wRD\";\nexport var ui = \"PlasmicHomepage-module--ui--s8vUp\";\nexport var uiglobal_arrangement_float = \"PlasmicHomepage-module--uiglobal_arrangement_float--k5Sz3\";\nexport var svg__laIzF = \"PlasmicHomepage-module--svg__laIzF--kg8yO\";\nexport var ux = \"PlasmicHomepage-module--ux--Qdt7S\";\nexport var uxglobal_arrangement_float = \"PlasmicHomepage-module--uxglobal_arrangement_float--W+RYG\";\nexport var text__raQdW = \"PlasmicHomepage-module--text__raQdW--EtU0y\";\nexport var svg__ff02 = \"PlasmicHomepage-module--svg__ff02--GM5f-\";\nexport var learnin = \"PlasmicHomepage-module--learnin--aGch6\";\nexport var learninglobal_highlight_about = \"PlasmicHomepage-module--learninglobal_highlight_about--DjwgT\";\nexport var learninglobal_highlight_work = \"PlasmicHomepage-module--learninglobal_highlight_work--pjD1c\";\nexport var learninglobal_arrangement_float = \"PlasmicHomepage-module--learninglobal_arrangement_float--jrEiH\";\nexport var svg__ofC2X = \"PlasmicHomepage-module--svg__ofC2X--z5xmd\";\nexport var service = \"PlasmicHomepage-module--service--IVVgL\";\nexport var serviceglobal_arrangement_float = \"PlasmicHomepage-module--serviceglobal_arrangement_float--sGISD\";\nexport var text__e0Mp7 = \"PlasmicHomepage-module--text__e0Mp7--JfoaH\";\nexport var svg__hgkau = \"PlasmicHomepage-module--svg__hgkau--derWS\";\nexport var tracks = \"PlasmicHomepage-module--tracks--I94SR\";\nexport var tracksglobal_arrangement_float = \"PlasmicHomepage-module--tracksglobal_arrangement_float--hUKjN\";\nexport var svg__xhEae = \"PlasmicHomepage-module--svg__xhEae--1MBWO\";\nexport var nav = \"PlasmicHomepage-module--nav--FXAJg\";\nexport var navglobal_arrangement_float = \"PlasmicHomepage-module--navglobal_arrangement_float--Y2jdE\";\nexport var reveal = \"PlasmicHomepage-module--reveal--XQTzX\";\nexport var svg__tyr6 = \"PlasmicHomepage-module--svg__tyr6--czJdn\";\nexport var home = \"PlasmicHomepage-module--home--bY6JX\";\nexport var svg___1A3Bw = \"PlasmicHomepage-module--svg___1A3Bw--EM64l\";\nexport var svgglobal_mode_dark___1A3BwJYvh = \"PlasmicHomepage-module--svgglobal_mode_dark___1A3BwJYvh--aTbF4\";\nexport var svg___9Ekg = \"PlasmicHomepage-module--svg___9Ekg--ZCzw6\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function ThirtysixIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\"M15 0v5h-3V3h-1v3h4v10H8V0h7zm-4 9h1v4h-1V9z\"}\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        d={\"M0 5V0h7v16H0v-5h3v2h1V9H1V6h3V3H3v2H0z\"}\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default ThirtysixIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function TwentytwoIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M1 1.5a.5.5 0 01.5-.5h4a.5.5 0 01.5.5v8h1a.5.5 0 01.5.5v4.5a.5.5 0 01-1 0v-4H6v4a.5.5 0 01-.5.5h-4a.5.5 0 01-.5-.5 5.002 5.002 0 014-4.9V2H2v1.5a.5.5 0 01-1 0v-2zm4 9.126A4.004 4.004 0 002.031 14H5v-3.374zM9 1.5a.5.5 0 01.5-.5h4a.5.5 0 01.5.5v8h1a.5.5 0 01.5.5v4.5a.5.5 0 01-1 0v-4H14v4a.5.5 0 01-.5.5h-4a.5.5 0 01-.5-.5 5.002 5.002 0 014-4.9V2h-3v1.5a.5.5 0 01-1 0v-2zm4 9.126A4.004 4.004 0 0010.03 14H13v-3.374z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default TwentytwoIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function FaceIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M16 8A8 8 0 110 8a8 8 0 0116 0zm-5-2.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM3.5 7a1.5 1.5 0 100-3 1.5 1.5 0 000 3zM5 11.5L6.5 2h1.2l-1.2 8H8v1.5H5zm5-1.5h3.5c-.5 2-3 4-5.5 4 2-1.5 2.5-2.5 2-4z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default FaceIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function InfoIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M8 16A8 8 0 108 0a8 8 0 000 16zM9.6 4a1.6 1.6 0 11-3.2 0 1.6 1.6 0 013.2 0zM6.4 7.2h3.2s.4.8.4 1.6c0 .4-.3.8-.6 1.2-.3.4-.6.8-.6 1.2 0 .8.8 2.4.8 2.4H6.4s-.8-1.6-.8-2.4c0-.4.3-.8.6-1.2.3-.4.6-.8.6-1.2 0-.8-.4-1.6-.4-1.6z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default InfoIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function PaintIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M11.206 9.148c-1.878 2.51-2.379 1.765-3.216 1.138-.837-.626-1.693-.896.185-3.406 1.878-2.51 5.779-6.308 6.616-5.682.837.627-1.707 5.44-3.585 7.95zM8 11.5c0 .828-.823 1.5-1.838 1.5-5.054 0-2.757-.5-1.838-1.5.92-1 .823-1.5 1.838-1.5C7.177 10 8 10.672 8 11.5z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\"M0 13h16v1H0v-1z\"}\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default PaintIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function MapIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M12.574 4.913c-.579.631-1.214 1.273-1.964 1.85L9.39 5.177c.623-.479 1.16-1.017 1.696-1.601-.632-.581-1.274-1.22-1.847-1.968L10.826.392c.475.62 1.012 1.157 1.597 1.695.578-.63 1.215-1.27 1.967-1.85l1.22 1.586c-.626.48-1.164 1.019-1.7 1.602.635.581 1.279 1.22 1.851 1.967l-1.587 1.216c-.474-.618-1.012-1.155-1.6-1.695zM7.061 10.44c-.342.939-.265 1.769.247 2.471.332.456.67.674.965.774.3.101.62.102.943.017.71-.186 1.225-.718 1.344-1.044.213-.585.089-.908-.133-1.159-.288-.325-.853-.632-1.683-.835a8.547 8.547 0 00-1.683-.224zm-2.114.155c-.232 1.181-.05 2.403.745 3.494.546.75 1.209 1.243 1.939 1.49.724.245 1.45.227 2.094.057 1.227-.322 2.333-1.246 2.715-2.294.445-1.222.228-2.329-.515-3.168-.677-.765-1.7-1.207-2.706-1.453a9.608 9.608 0 00-.965-.182c.383-.431.837-.85 1.352-1.244l-1.212-1.59c-1.044.796-1.946 1.74-2.578 2.76-.992.074-1.967.276-2.732.626-.88.402-1.835 1.183-2.34 2.304-.53 1.177-.507 2.61.399 4.12l1.714-1.03c-.594-.99-.53-1.733-.289-2.27.267-.59.812-1.06 1.348-1.306a4.787 4.787 0 011.03-.314z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default MapIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function LearnaxIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M2.275 2.364A1 1 0 001 3.326v8.92a1 1 0 00.725.961L8 15l6.275-1.793a1 1 0 00.725-.961v-8.92a1 1 0 00-1.275-.962L8 4 2.275 2.364zm11.24 3.757a.5.5 0 10-.243-.97l-3.03.758a.5.5 0 00.243.97l3.03-.758zm-.97 2.2a.5.5 0 10-.243-.97l-2.06.515a.5.5 0 00.243.97l2.06-.515zm.97 1.558a.5.5 0 10-.243-.97l-3.03.757a.5.5 0 00.243.97l3.03-.757zm-10.5.485c.067-.268.606-.364.606-.364l2.06.515a.5.5 0 01-.242.97l-2.06-.515a.5.5 0 01-.364-.606zM2 5.698c.025.583.645 1.724 1.787 1.674-.037-.875.188-.903.188-.903.06-.031 1.694 1.504 1.936 1.813.1.13.15.262.193.378.06.162.108.29.266.332.27.073.845-.392.546-.608-.3-.216-2.416-2.144-2.531-2.371l.199-.315L3.912 5c-.42.568-1.26.669-1.912.698z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default LearnaxIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function SprintsIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M12.214 2.857a1.857 1.857 0 11-3.714 0 1.857 1.857 0 013.714 0zm.929 0A2.786 2.786 0 117.73 1.93H2v3.495a2.786 2.786 0 014.639 2.233c-.29-.102-.6-.157-.925-.157a1.857 1.857 0 10-2.572 1.714 2.772 2.772 0 00-.21.915A2.783 2.783 0 012 9.576V14h6.158c2.663 0 4.985-.516 6.842-1.857-.763-3.434-.734-5.7-.7-8.39.008-.582.016-1.185.016-1.824h-1.332c.103.29.159.603.159.928zm-7.429 9.286a1.857 1.857 0 100-3.714 1.857 1.857 0 000 3.714z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default SprintsIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function TrackIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M8.301 8.194c1.86-.045 1.81 2.285 2.236 2.804.426.52 1.04 1.29 1.703 1.559.663.27.086 2.221-.309 2.903-.345.596-1.882-.205-3.389-.267-1.43-.059-2.834.644-3.161.267-.353-.405-.5-.832-.806-2.384-.277-1.413 1.278-2.078 1.704-2.597.426-.52.133-2.24 2.022-2.285z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        d={\n          \"M14.779 9.965c-.158.992-1.17 1.655-2.261 1.48-1.091-.173-1.847-1.118-1.69-2.11.159-.991 1.386-3 2.477-2.827 1.09.174 1.632 2.465 1.474 3.457zM12.61 4.481a2 2 0 01-3.979.416c-.115-1.098.527-3.574 1.625-3.689 1.099-.115 2.239 2.174 2.354 3.273zm-4.147.398a2 2 0 11-3.983-.378c.105-1.1 1.223-3.4 2.323-3.296 1.1.105 1.764 2.574 1.66 3.674zM5.648 8.874c.241.975-.432 1.98-1.504 2.246-1.073.265-2.138-.31-2.379-1.284-.241-.975.104-3.304 1.176-3.57C4.013 6.002 5.406 7.9 5.648 8.874z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default TrackIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: ZgtgOwq6J5gf\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport Stripe from \"../../Stripe\" // plasmic-import: JaZPnDe4BQ/component\nimport Headline from \"../../Headline\" // plasmic-import: KiN_FJLYI1/component\nimport HeadlineButton from \"../../HeadlineButton\" // plasmic-import: uHRDF-VO-A/component\nimport IconButton from \"../../IconButton\" // plasmic-import: mEnM6zW3GD/component\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport { useHighlight } from \"./PlasmicGlobalVariant__Highlight\" // plasmic-import: ntiwPmQAsH/globalVariant\nimport { useArrangement } from \"./PlasmicGlobalVariant__Arrangement\" // plasmic-import: hhgYSeu_QK/globalVariant\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicHomepage.module.css\" // plasmic-import: ZgtgOwq6J5gf/css\nimport ThirtysixIcon from \"./icons/PlasmicIcon__Thirtysix\" // plasmic-import: PiVIGAVUm/icon\nimport TwentytwoIcon from \"./icons/PlasmicIcon__Twentytwo\" // plasmic-import: 4vkcnz2Ax/icon\nimport ArrowRightIcon from \"./icons/PlasmicIcon__ArrowRight\" // plasmic-import: iZuEl1jiaD/icon\nimport FaceIcon from \"./icons/PlasmicIcon__Face\" // plasmic-import: BZoH_3Sy18/icon\nimport InfoIcon from \"./icons/PlasmicIcon__Info\" // plasmic-import: 5Sy2g4y6V/icon\nimport PaintIcon from \"./icons/PlasmicIcon__Paint\" // plasmic-import: iy4A9uBWD/icon\nimport MapIcon from \"./icons/PlasmicIcon__Map\" // plasmic-import: i-ZGrNlsT/icon\nimport LearnaxIcon from \"./icons/PlasmicIcon__Learnax\" // plasmic-import: PH_4kYBwV/icon\nimport SprintsIcon from \"./icons/PlasmicIcon__Sprints\" // plasmic-import: 0hscHUcbO/icon\nimport TrackIcon from \"./icons/PlasmicIcon__Track\" // plasmic-import: GuFQhLpY5/icon\nimport EyeOpenIcon from \"./icons/PlasmicIcon__EyeOpen\" // plasmic-import: J7fJnmL4N/icon\nimport EyeClosedIcon from \"./icons/PlasmicIcon__EyeClosed\" // plasmic-import: aBAB-JPNq/icon\nimport JwSharpIcon from \"./icons/PlasmicIcon__JwSharp\" // plasmic-import: imnHY-_8sU/icon\nimport NightIcon from \"./icons/PlasmicIcon__Night\" // plasmic-import: nS7MqAdlwl/icon\nimport DayIcon from \"./icons/PlasmicIcon__Day\" // plasmic-import: 2cwRWiCxc/icon\n\nexport const PlasmicHomepage__VariantProps = new Array()\n\nexport const PlasmicHomepage__ArgProps = new Array(\"path\")\n\nfunction PlasmicHomepage__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n    highlight: useHighlight(),\n    arrangement: useArrangement(),\n    screen: useScreenVariantsekypzdksLjd0F(),\n  })\n\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          hasGap={true}\n          className={classNames(\n            projectcss.all,\n            projectcss.root_reset,\n            projectcss.plasmic_default_styles,\n            projectcss.plasmic_mixins,\n            projectcss.plasmic_tokens,\n            sty.root,\n            {\n              [projectcss.global_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.rootglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.rootglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.rootglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.rootglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.rootglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            }\n          )}\n        >\n          <p.PlasmicLink\n            data-plasmic-name={\"_36Dot22\"}\n            data-plasmic-override={overrides._36Dot22}\n            className={classNames(projectcss.all, projectcss.a, sty._36Dot22, {\n              [sty._36Dot22global_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty._36Dot22global_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty._36Dot22global_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty._36Dot22global_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            component={Link}\n            href={\"/36dot22\"}\n            platform={\"gatsby\"}\n            target={\"_blank\"}\n            title={\"36 Days of Type, 2022 Edition\"}\n          >\n            {true ? (\n              <p.Stack\n                as={\"div\"}\n                data-plasmic-name={\"callout\"}\n                data-plasmic-override={overrides.callout}\n                hasGap={true}\n                className={classNames(projectcss.all, sty.callout, {\n                  [sty.calloutglobal_highlight_about]: hasVariant(\n                    globalVariants,\n                    \"highlight\",\n                    \"about\"\n                  ),\n\n                  [sty.calloutglobal_highlight_work]: hasVariant(\n                    globalVariants,\n                    \"highlight\",\n                    \"work\"\n                  ),\n\n                  [sty.calloutglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.calloutglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n              >\n                <div\n                  data-plasmic-name={\"freeBox\"}\n                  data-plasmic-override={overrides.freeBox}\n                  className={classNames(projectcss.all, sty.freeBox, {\n                    [sty.freeBoxglobal_highlight_work]: hasVariant(\n                      globalVariants,\n                      \"highlight\",\n                      \"work\"\n                    ),\n                  })}\n                >\n                  <ThirtysixIcon\n                    className={classNames(projectcss.all, sty.svg__kiQg6, {\n                      [sty.svgglobal_highlight_work__kiQg6JCUoz]: hasVariant(\n                        globalVariants,\n                        \"highlight\",\n                        \"work\"\n                      ),\n                    })}\n                    role={\"img\"}\n                  />\n\n                  {true ? (\n                    <TwentytwoIcon\n                      className={classNames(projectcss.all, sty.svg__iqt6V, {\n                        [sty.svgglobal_highlight_about__iqt6VjOrod]: hasVariant(\n                          globalVariants,\n                          \"highlight\",\n                          \"about\"\n                        ),\n\n                        [sty.svgglobal_highlight_work__iqt6VjCUoz]: hasVariant(\n                          globalVariants,\n                          \"highlight\",\n                          \"work\"\n                        ),\n                      })}\n                      role={\"img\"}\n                    />\n                  ) : null}\n                </div>\n\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__ym5Bc,\n                    {\n                      [sty.textglobal_arrangement_float__ym5BcZZfig]:\n                        hasVariant(globalVariants, \"arrangement\", \"float\"),\n                      [sty.textglobal_highlight_about__ym5BcjOrod]: hasVariant(\n                        globalVariants,\n                        \"highlight\",\n                        \"about\"\n                      ),\n\n                      [sty.textglobal_highlight_work__ym5BcjCUoz]: hasVariant(\n                        globalVariants,\n                        \"highlight\",\n                        \"work\"\n                      ),\n\n                      [sty.textglobal_mode_dark__ym5BcJYvh]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"dark\"\n                      ),\n\n                      [sty.textglobal_mode_reveal__ym5Bcv94Jk]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"reveal\"\n                      ),\n                    }\n                  )}\n                >\n                  {\"Now serving \\n36 days of type\"}\n                </div>\n\n                <ArrowRightIcon\n                  className={classNames(projectcss.all, sty.svg__hdgd, {\n                    [sty.svgglobal_highlight_about__hdgdjOrod]: hasVariant(\n                      globalVariants,\n                      \"highlight\",\n                      \"about\"\n                    ),\n\n                    [sty.svgglobal_highlight_work__hdgdjCUoz]: hasVariant(\n                      globalVariants,\n                      \"highlight\",\n                      \"work\"\n                    ),\n                  })}\n                  role={\"img\"}\n                />\n              </p.Stack>\n            ) : null}\n          </p.PlasmicLink>\n\n          <Stripe\n            data-plasmic-name={\"likeness\"}\n            data-plasmic-override={overrides.likeness}\n            category={\"about\"}\n            className={classNames(\"__wab_instance\", sty.likeness, {\n              [sty.likenessglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.likenessglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.likenessglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.likenessglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.likenessglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\n              hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                ? \"mint\"\n                : \"mint\"\n            }\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            icon={\n              <FaceIcon\n                className={classNames(projectcss.all, sty.svg__gvVi7)}\n                role={\"img\"}\n              />\n            }\n            label={\"a likeness\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            name={\"likeness\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"words\"}\n            data-plasmic-override={overrides.words}\n            category={\"about\"}\n            className={classNames(\"__wab_instance\", sty.words, {\n              [sty.wordsglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.wordsglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.wordsglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.wordsglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.wordsglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"yellow\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            icon={\n              <InfoIcon\n                className={classNames(projectcss.all, sty.svg__iok3E)}\n                role={\"img\"}\n              />\n            }\n            label={\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__oP3Fs,\n                  {\n                    [sty.textglobal_mode_reveal__oP3FSv94Jk]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"reveal\"\n                    ),\n                  }\n                )}\n              >\n                {\"some words\"}\n              </div>\n            }\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            name={\"words\"}\n          />\n\n          <Headline\n            data-plasmic-name={\"headline\"}\n            data-plasmic-override={overrides.headline}\n            className={classNames(\"__wab_instance\", sty.headline, {\n              [sty.headlineglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.headlineglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.headlineglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.headlineglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            end={\n              <HeadlineButton\n                data-plasmic-name={\"design\"}\n                data-plasmic-override={overrides.design}\n                className={classNames(\"__wab_instance\", sty.design, {\n                  [sty.designglobal_highlight_about]: hasVariant(\n                    globalVariants,\n                    \"highlight\",\n                    \"about\"\n                  ),\n\n                  [sty.designglobal_highlight_work]: hasVariant(\n                    globalVariants,\n                    \"highlight\",\n                    \"work\"\n                  ),\n\n                  [sty.designglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.designglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                color={\"purple\"}\n                label={\n                  hasVariant(globalVariants, \"highlight\", \"work\")\n                    ? \"close 'em\"\n                    : \"† product design\"\n                }\n                symbol={\n                  <div\n                    className={classNames(\n                      projectcss.all,\n                      projectcss.__wab_text,\n                      sty.text__p8Pzp,\n                      {\n                        [sty.textglobal_highlight_work__p8PzPjCUoz]: hasVariant(\n                          globalVariants,\n                          \"highlight\",\n                          \"work\"\n                        ),\n                      }\n                    )}\n                  >\n                    {\"†\"}\n                  </div>\n                }\n                word={\"design\"}\n              />\n            }\n            first={\n              <HeadlineButton\n                data-plasmic-name={\"jeff\"}\n                data-plasmic-override={overrides.jeff}\n                className={classNames(\"__wab_instance\", sty.jeff, {\n                  [sty.jeffglobal_arrangement_float]: hasVariant(\n                    globalVariants,\n                    \"arrangement\",\n                    \"float\"\n                  ),\n\n                  [sty.jeffglobal_highlight_about]: hasVariant(\n                    globalVariants,\n                    \"highlight\",\n                    \"about\"\n                  ),\n\n                  [sty.jeffglobal_highlight_work]: hasVariant(\n                    globalVariants,\n                    \"highlight\",\n                    \"work\"\n                  ),\n\n                  [sty.jeffglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.jeffglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                color={\"purple\"}\n                label={\n                  hasVariant(globalVariants, \"highlight\", \"about\")\n                    ? \"about face\"\n                    : \"* about jeff\"\n                }\n                symbol={\n                  <div\n                    className={classNames(\n                      projectcss.all,\n                      projectcss.__wab_text,\n                      sty.text__r5O0R,\n                      {\n                        [sty.textglobal_highlight_about__r5O0RjOrod]:\n                          hasVariant(globalVariants, \"highlight\", \"about\"),\n                        [sty.textglobal_mode_reveal__r5O0Rv94Jk]: hasVariant(\n                          globalVariants,\n                          \"mode\",\n                          \"reveal\"\n                        ),\n                      }\n                    )}\n                  >\n                    {hasVariant(globalVariants, \"highlight\", \"about\")\n                      ? \"*\"\n                      : \"*\"}\n                  </div>\n                }\n                word={\"Jeff\"}\n              />\n            }\n          />\n\n          <Stripe\n            data-plasmic-name={\"ui\"}\n            data-plasmic-override={overrides.ui}\n            category={\"work\"}\n            className={classNames(\"__wab_instance\", sty.ui, {\n              [sty.uiglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.uiglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.uiglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.uiglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"orange\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            icon={\n              <PaintIcon\n                className={classNames(projectcss.all, sty.svg__laIzF)}\n                role={\"img\"}\n              />\n            }\n            label={\"ui design\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            name={\"ui\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"ux\"}\n            data-plasmic-override={overrides.ux}\n            category={\"work\"}\n            className={classNames(\"__wab_instance\", sty.ux, {\n              [sty.uxglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.uxglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.uxglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.uxglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.uxglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"blue\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            icon={\n              <MapIcon\n                className={classNames(projectcss.all, sty.svg__ff02)}\n                role={\"img\"}\n              />\n            }\n            label={\n              true ? (\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__raQdW\n                  )}\n                >\n                  {\"ux design\"}\n                </div>\n              ) : null\n            }\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            name={\"ux\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"learnin\"}\n            data-plasmic-override={overrides.learnin}\n            category={\"about\"}\n            className={classNames(\"__wab_instance\", sty.learnin, {\n              [sty.learninglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.learninglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.learninglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.learninglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"purple\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            icon={\n              <LearnaxIcon\n                className={classNames(projectcss.all, sty.svg__ofC2X)}\n                role={\"img\"}\n              />\n            }\n            label={\"tools and learnins\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            name={\"learnin\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"service\"}\n            data-plasmic-override={overrides.service}\n            category={\"work\"}\n            className={classNames(\"__wab_instance\", sty.service, {\n              [sty.serviceglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.serviceglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.serviceglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.serviceglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.serviceglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"grey\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            icon={\n              <SprintsIcon\n                className={classNames(projectcss.all, sty.svg__hgkau)}\n                role={\"img\"}\n              />\n            }\n            label={\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__e0Mp7,\n                  {\n                    [sty.textglobal_highlight_work__e0Mp7JCUoz]: hasVariant(\n                      globalVariants,\n                      \"highlight\",\n                      \"work\"\n                    ),\n                  }\n                )}\n              >\n                {\"service design\"}\n              </div>\n            }\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            name={\"service\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"tracks\"}\n            data-plasmic-override={overrides.tracks}\n            category={\"about\"}\n            className={classNames(\"__wab_instance\", sty.tracks, {\n              [sty.tracksglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.tracksglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.tracksglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.tracksglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"red\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            icon={\n              <TrackIcon\n                className={classNames(projectcss.all, sty.svg__xhEae)}\n                role={\"img\"}\n              />\n            }\n            label={\"leaving tracks\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            name={\"tracks\"}\n          />\n\n          {true ? (\n            <div\n              data-plasmic-name={\"nav\"}\n              data-plasmic-override={overrides.nav}\n              className={classNames(projectcss.all, sty.nav, {\n                [sty.navglobal_arrangement_float]: hasVariant(\n                  globalVariants,\n                  \"arrangement\",\n                  \"float\"\n                ),\n\n                [sty.navglobal_highlight_about]: hasVariant(\n                  globalVariants,\n                  \"highlight\",\n                  \"about\"\n                ),\n\n                [sty.navglobal_highlight_work]: hasVariant(\n                  globalVariants,\n                  \"highlight\",\n                  \"work\"\n                ),\n\n                [sty.navglobal_mode_dark]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"dark\"\n                ),\n              })}\n            >\n              <IconButton\n                data-plasmic-name={\"reveal\"}\n                data-plasmic-override={overrides.reveal}\n                className={classNames(\"__wab_instance\", sty.reveal, {\n                  [sty.revealglobal_highlight_work]: hasVariant(\n                    globalVariants,\n                    \"highlight\",\n                    \"work\"\n                  ),\n\n                  [sty.revealglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                icon={\n                  <p.PlasmicIcon\n                    PlasmicIconType={\n                      hasVariant(globalVariants, \"mode\", \"reveal\")\n                        ? EyeClosedIcon\n                        : EyeOpenIcon\n                    }\n                    className={classNames(projectcss.all, sty.svg__tyr6, {\n                      [sty.svgglobal_mode_reveal__tyr6V94Jk]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"reveal\"\n                      ),\n                    })}\n                    cursor={\"pointer\"}\n                    role={\"img\"}\n                  />\n                }\n                label={\n                  hasVariant(globalVariants, \"mode\", \"reveal\")\n                    ? \"hide labels\"\n                    : \"reveal labels\"\n                }\n              />\n\n              <p.PlasmicLink\n                data-plasmic-name={\"home\"}\n                data-plasmic-override={overrides.home}\n                className={classNames(projectcss.all, projectcss.a, sty.home, {\n                  [sty.homeglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.homeglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                component={Link}\n                href={args.path !== undefined ? args.path : \"/design\"}\n                id={\"logo\"}\n                platform={\"gatsby\"}\n                title={\"jeff wade\"}\n              >\n                <IconButton\n                  data-plasmic-name={\"logo\"}\n                  data-plasmic-override={overrides.logo}\n                  className={classNames(\"__wab_instance\", sty.logo, {\n                    [sty.logoglobal_mode_dark]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"dark\"\n                    ),\n\n                    [sty.logoglobal_mode_reveal]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"reveal\"\n                    ),\n                  })}\n                  icon={\n                    <p.PlasmicIcon\n                      PlasmicIconType={\n                        hasVariant(globalVariants, \"mode\", \"dark\")\n                          ? JwSharpIcon\n                          : JwSharpIcon\n                      }\n                      className={classNames(projectcss.all, sty.svg___1A3Bw, {\n                        [sty.svgglobal_mode_dark___1A3BwJYvh]: hasVariant(\n                          globalVariants,\n                          \"mode\",\n                          \"dark\"\n                        ),\n\n                        [sty.svgglobal_mode_reveal___1A3Bwv94Jk]: hasVariant(\n                          globalVariants,\n                          \"mode\",\n                          \"reveal\"\n                        ),\n                      })}\n                      role={\"img\"}\n                    />\n                  }\n                  label={\"jeff wade\"}\n                />\n              </p.PlasmicLink>\n\n              <IconButton\n                data-plasmic-name={\"darkmode\"}\n                data-plasmic-override={overrides.darkmode}\n                className={classNames(\"__wab_instance\", sty.darkmode, {\n                  [sty.darkmodeglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.darkmodeglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                icon={\n                  <p.PlasmicIcon\n                    PlasmicIconType={\n                      hasVariant(globalVariants, \"mode\", \"dark\")\n                        ? DayIcon\n                        : NightIcon\n                    }\n                    className={classNames(projectcss.all, sty.svg___9Ekg, {\n                      [sty.svgglobal_mode_dark___9EkgJYvh]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"dark\"\n                      ),\n\n                      [sty.svgglobal_mode_reveal___9Ekgv94Jk]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"reveal\"\n                      ),\n                    })}\n                    cursor={\"pointer\"}\n                    role={\"img\"}\n                  />\n                }\n                label={\n                  hasVariant(globalVariants, \"mode\", \"dark\")\n                    ? \"switch to light mode\"\n                    : \"switch to dark mode\"\n                }\n              />\n            </div>\n          ) : null}\n        </p.Stack>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\n    \"root\",\n    \"_36Dot22\",\n    \"callout\",\n    \"freeBox\",\n    \"likeness\",\n    \"words\",\n    \"headline\",\n    \"design\",\n    \"jeff\",\n    \"ui\",\n    \"ux\",\n    \"learnin\",\n    \"service\",\n    \"tracks\",\n    \"nav\",\n    \"reveal\",\n    \"home\",\n    \"logo\",\n    \"darkmode\",\n  ],\n\n  _36Dot22: [\"_36Dot22\", \"callout\", \"freeBox\"],\n  callout: [\"callout\", \"freeBox\"],\n  freeBox: [\"freeBox\"],\n  likeness: [\"likeness\"],\n  words: [\"words\"],\n  headline: [\"headline\", \"design\", \"jeff\"],\n  design: [\"design\"],\n  jeff: [\"jeff\"],\n  ui: [\"ui\"],\n  ux: [\"ux\"],\n  learnin: [\"learnin\"],\n  service: [\"service\"],\n  tracks: [\"tracks\"],\n  nav: [\"nav\", \"reveal\", \"home\", \"logo\", \"darkmode\"],\n  reveal: [\"reveal\"],\n  home: [\"home\", \"logo\"],\n  logo: [\"logo\"],\n  darkmode: [\"darkmode\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicHomepage__ArgProps,\n      internalVariantPropNames: PlasmicHomepage__VariantProps,\n    })\n\n    return PlasmicHomepage__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicHomepage\"\n  } else {\n    func.displayName = `PlasmicHomepage.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicHomepage = Object.assign(\n  // Top-level PlasmicHomepage renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    _36Dot22: makeNodeComponent(\"_36Dot22\"),\n    callout: makeNodeComponent(\"callout\"),\n    freeBox: makeNodeComponent(\"freeBox\"),\n    likeness: makeNodeComponent(\"likeness\"),\n    words: makeNodeComponent(\"words\"),\n    headline: makeNodeComponent(\"headline\"),\n    design: makeNodeComponent(\"design\"),\n    jeff: makeNodeComponent(\"jeff\"),\n    ui: makeNodeComponent(\"ui\"),\n    ux: makeNodeComponent(\"ux\"),\n    learnin: makeNodeComponent(\"learnin\"),\n    service: makeNodeComponent(\"service\"),\n    tracks: makeNodeComponent(\"tracks\"),\n    nav: makeNodeComponent(\"nav\"),\n    reveal: makeNodeComponent(\"reveal\"),\n    home: makeNodeComponent(\"home\"),\n    logo: makeNodeComponent(\"logo\"),\n    darkmode: makeNodeComponent(\"darkmode\"),\n    // Metadata about props expected for PlasmicHomepage\n    internalVariantProps: PlasmicHomepage__VariantProps,\n    internalArgProps: PlasmicHomepage__ArgProps,\n  }\n)\n\nexport default PlasmicHomepage\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { useState } from \"react\"\n\nimport { ModeContext } from \"../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Mode\"\nimport { HighlightContext } from \"../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Highlight\"\nimport { ArrangementContext } from \"../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Arrangement\"\n\nimport { PlasmicHomepage } from \"../components/plasmic/jeffdo_es/PlasmicHomepage\"\n\nfunction Homepage() {\n  const [mode, setMode] = useState([\"dark\"])\n  const [revealed, setRevealed] = useState(false)\n  const [prevRevealed, setPrevRevealed] = useState(revealed)\n  const [highlight, setHighlight] = useState(undefined)\n\n  const toggleDarkMode = () => {\n    const newMode = [...mode]\n    if (newMode.includes(\"dark\")) {\n      newMode.shift()\n    } else {\n      newMode.unshift(\"dark\")\n    }\n    setMode(newMode)\n  }\n\n  const toggleHighlight = cat => {\n    let hl = highlight\n    const newMode = [...mode]\n\n    if (hl === cat) {\n      setHighlight(undefined)\n      if (prevRevealed && !newMode.includes(\"reveal\")) {\n        newMode.push(\"reveal\")\n      } else if (!prevRevealed && newMode.includes(\"reveal\")) {\n        newMode.pop()\n      }\n      setRevealed(prevRevealed)\n\n    } else {\n      setPrevRevealed(revealed)\n      switch (cat) {\n        case \"about\":\n          setHighlight(\"about\")\n          if (!mode.includes(\"reveal\")) {\n            newMode.push(\"reveal\")\n            setRevealed(true)\n          }\n          break\n        case \"work\":\n          setHighlight(\"work\")\n          if (!mode.includes(\"reveal\")) {\n            newMode.push(\"reveal\")\n            setRevealed(true)\n          }\n          break\n        default:\n          setHighlight(undefined)\n      }\n    }\n    setMode(newMode)\n  }\n\n  const toggleRevealed = () => {\n    const newMode = [...mode]\n    if (newMode.includes(\"reveal\")) {\n      newMode.pop()\n      setRevealed(false)\n      setPrevRevealed(false)\n    } else {\n      newMode.push(\"reveal\")\n      setRevealed(true)\n      setPrevRevealed(true)\n    }\n    setMode(newMode)\n  }\n\n  return (\n    <ModeContext.Provider value={mode}>\n      <HighlightContext.Provider value={highlight}>\n        <ArrangementContext.Provider value={undefined}>\n          <PlasmicHomepage\n            // onClick={( highlight !== undefined ) && ( () => toggleHighlight() )}\n            jeff={{\n              onClick: () => toggleHighlight(\"about\"),\n            }}\n            design={{\n              onClick: () => toggleHighlight(\"work\"),\n            }}\n            reveal={{\n              onClick: () => toggleRevealed(),\n            }}\n            darkmode={{\n              onClick: () => toggleDarkMode(),\n            }}\n            likeness={{\n              labelIsVisible: revealed,\n            }}\n            words={{\n              labelIsVisible: revealed,\n\n            }}\n            ui={{\n              labelIsVisible: revealed,\n              href: \"/remember\",\n            }}\n            ux={{\n              labelIsVisible: revealed,\n              href: \"/remember\",\n            }}\n            learnin={{\n              labelIsVisible: revealed,\n            }}\n            service={{\n              labelIsVisible: revealed,\n              href: \"/remember\",\n            }}\n            tracks={{\n              labelIsVisible: revealed,\n            }}\n          />\n        </ArrangementContext.Provider>\n      </HighlightContext.Provider>\n    </ModeContext.Provider>\n  )\n}\n\nexport default Homepage\n"],"names":["root","rootstroke","rootflippabble","slotTargetLabel","text___7ZTu","PlasmicTag__VariantProps","Array","PlasmicTag__ArgProps","PlasmicDescendants","nodeName","func","PlasmicTag","Object","assign","props","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","args","overrides","forNode","globalVariants","ensureGlobalVariants","mode","useMode","screen","useScreenVariantsekypzdksLjd0F","className","classNames","projectcss","sty","hasVariant","p","defaultContents","value","label","PlasmicTag__RenderFunc","displayName","internalVariantProps","internalArgProps","Tag_","ref","React","ArrangementContext","useArrangement","style","title","restProps","xmlns","fill","viewBox","height","width","d","rootcolor_grey","rootlowlighted","rootcolor_orange","rootcolor_blue","roothighlighted","root___focusVisibleWithin","titlecolor_grey","titlelowlighted","titlecolor_red","titlecolor_orange","titlecolor_yellow","titlecolor_green","titlecolor_mint","titlecolor_blue","titlecolor_purple","title___focusVisibleWithin","slotTargetLabelcolor_grey","slotTargetLabelcolor_orange","slotTargetLabelcolor_yellow","slotTargetLabelcolor_green","slotTargetLabelcolor_mint","slotTargetLabelcolor_blue","slotTargetLabel___focusVisibleWithin","slotTargetIcon","slotTargetIconcolor_grey","slotTargetIconcolor_orange","slotTargetIconcolor_yellow","slotTargetIconcolor_green","slotTargetIconcolor_mint","slotTargetIconcolor_blue","slotTargetIcon___focusVisibleWithin","svg__rm0Cy","PlasmicStripe__VariantProps","PlasmicStripe__ArgProps","makeNodeComponent","useTrigger","isTextInput","isRootFocusVisibleWithin","triggerRootFocusVisibleWithinProps","isRootHover","triggerRootHoverProps","isRootFocusWithin","triggerRootFocusWithinProps","triggers","focusVisibleWithin_root","hover_root","focusWithin_root","id","tabIndex","as","hasGap","role","icon","PlasmicStripe__RenderFunc","PlasmicStripe","rootname_likeness","rootname_words","rootname_learnin","rootname_ui","rootname_ux","rootname_service","rootname_tracks","words","wordsname_likeness","wordsname_words","wordsname_ui","wordsname_ux","slotTargetWords","text__tUkGt","text__eActQ","text__q4H87","text__ggcwH","text__jmRsy","likeness","likenessname_likeness","likenessname_words","likenessname_learnin","likenessname_ui","likenessname_ux","likenessname_service","likenessname_tracks","orgtool","orgtoolname_ux","text__vluzm","columns__fKfqK","columnsname_ui__fKfqK02Dcx","columnsname_ux__fKfqKmi7Gi","column__czaT","columnname_ui__czaT02Dcx","columnname_ux__czaTmi7Gi","tag__jlXbo","text__oMpwN","column__vlSb0","columnname_ux__vlSb0Mi7Gi","tag___3Z4Ni","text__qHpmv","column__ltGx2","columnname_ui__ltGx202Dcx","columnname_ux__ltGx2Mi7Gi","tag___80Bgw","text__eJah","learnin","learninname_learnin","text__z9Ey","freeBox__r0Wut","freeBox__b8ZD3","svg__hgkQw","text__tuHAs","freeBox__qHaYy","svg__y70L2","text__xzO0C","freeBox__rjN70","svg__cZkPa","text__tCun","freeBox__mnFug","svg__qRw6L","text__u6AAk","freeBox__a5ZKr","svg__sK1Ji","text__hHbAf","tracks","tracksname_tracks","text__rDhas","freeBox__xSz8B","link__xs6V","svg__sdmbw","text__sO13D","link__bIrkC","svg__wjqFi","text__d3Yj","link___6NQdw","svg__cpFny","text__aampz","text__qsBq","span","sprints","sprintsname_ux","sprintsname_service","text__jtaLp","columns__chWye","columnsname_ui__chWye02Dcx","columnsname_ux__chWyeMi7Gi","columnsname_service__chWye9XxcC","column__uozKt","columnname_ui__uozKt02Dcx","columnname_ux__uozKtMi7Gi","columnname_service__uozKt9XxcC","tag__nAeA4","text__oOtr7","column__hg2Hk","columnname_ui__hg2Hk02Dcx","columnname_ux__hg2Hkmi7Gi","columnname_service__hg2Hk9XxcC","tag__c7IVv","text__v9MUp","column__kcC5","columnname_ui__kcC502Dcx","columnname_ux__kcC5Mi7Gi","columnname_service__kcC59XxcC","tag__v3NoT","text__oTmx5","brandtool","brandtoolname_ux","text__yFoO8","textname_ui__yFoO802Dcx","columns__gt8Ac","columnsname_ui__gt8Ac02Dcx","columnsname_ux__gt8Acmi7Gi","column__pc6K5","columnname_ui__pc6K502Dcx","columnname_ux__pc6K5Mi7Gi","tag__aS62V","text__bjBvD","textname_ui__bjBvD02Dcx","column__rgUz1","columnname_ui__rgUz102Dcx","columnname_ux__rgUz1Mi7Gi","tag__bfqLc","tagname_ui__bfqLc02Dcx","text___4AXb2","textname_ui___4AXb202Dcx","column__xwus4","columnname_ui__xwus402Dcx","columnname_ux__xwus4Mi7Gi","tag__oB0D","text__c1Qk","textname_ui__c1Qk02Dcx","fillRule","clipRule","stroke","PlasmicPreview__VariantProps","PlasmicPreview__ArgProps","undefined","alt","displayHeight","displayMaxHeight","displayMaxWidth","displayMinHeight","displayMinWidth","displayWidth","loading","src","selfPortraitBj4ZnGhn7D","fullWidth","fullHeight","aspectRatio","Tag","component","Link","platform","flippabble","PlasmicPreview__RenderFunc","PlasmicPreview","Preview_","rest","Stripe_","href","category","color","highlighted","lowlighted","labelIsVisible","useState","isHovered","setIsHovered","isBrowser","window","mousePosition","useMousePosition","mobile","setMobile","currentWords","setCurrentWords","useEffect","mediaQuery","matchMedia","addEventListener","matches","once","e","labelStyles","position","display","gap","alignItems","overflow","whiteSpace","opacity","x","innerWidth","stripeLabel","tooltipLabel","length","content","tooltip","useTooltip","onClick","onMouseOver","onFocus","onMouseOut","onBlur","h1__mLmRw","h1global_mode_dark__mLmRwjYvh","slotTargetWord","slotTargetWordglobal_mode_dark","h1__pd88E","slotTargetSymbol","slotTargetSymbolglobal_mode_dark","PlasmicHeadlineButton__VariantProps","PlasmicHeadlineButton__ArgProps","PlasmicHeadlineButton","word","symbol","PlasmicHeadlineButton__RenderFunc","HeadlineButton_","headlineButton__xiaYn","h1","h1global_mode_dark","textglobal_mode_dark","headlineButton__b86Ep","PlasmicHeadline__VariantProps","PlasmicHeadline__ArgProps","text","first","end","PlasmicHeadline__RenderFunc","PlasmicHeadline","Headline_","rootglobal_mode_dark","rootglobal_arrangement_float","_36Dot22","callout","freeBox","svg__kiQg6","svg__iqt6V","text__ym5Bc","svg__hdgd","likenessglobal_arrangement_float","svg__gvVi7","wordsglobal_arrangement_float","text__oP3Fs","svg__iok3E","headline","headlineglobal_arrangement_float","design","textglobal_highlight_work__p8PzPjCUoz","jeff","textglobal_highlight_about__r5O0RjOrod","ui","uiglobal_arrangement_float","svg__laIzF","ux","uxglobal_arrangement_float","text__raQdW","svg__ff02","learninglobal_highlight_about","learninglobal_highlight_work","learninglobal_arrangement_float","svg__ofC2X","service","serviceglobal_arrangement_float","text__e0Mp7","svg__hgkau","tracksglobal_arrangement_float","svg__xhEae","nav","navglobal_arrangement_float","reveal","svg__tyr6","home","svg___1A3Bw","svgglobal_mode_dark___1A3BwJYvh","svg___9Ekg","PlasmicHomepage__VariantProps","PlasmicHomepage__ArgProps","logo","darkmode","highlight","useHighlight","arrangement","target","IconButton","PlasmicIconType","EyeClosedIcon","EyeOpenIcon","cursor","path","JwSharpIcon","DayIcon","NightIcon","PlasmicHomepage__RenderFunc","PlasmicHomepage","setMode","revealed","setRevealed","prevRevealed","setPrevRevealed","setHighlight","toggleHighlight","cat","hl","newMode","includes","push","pop","shift","unshift"],"sourceRoot":""}