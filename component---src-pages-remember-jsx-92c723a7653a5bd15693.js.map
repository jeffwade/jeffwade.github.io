{"version":3,"file":"component---src-pages-remember-jsx-92c723a7653a5bd15693.js","mappings":"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","sources":["webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicGlobalVariant__Arrangement.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicWorkCard.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicWorkCard.jsx","webpack://jeffdoes/./src/components/WorkCard.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicRemember.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/homebank.jpeg","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/brandsiteSketch.jpeg","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/designSystem.png","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/logistics.png","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/biotech.png","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicRemember.jsx","webpack://jeffdoes/./src/pages/remember.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/orgDesign.png"],"sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport * as React from \"react\"\n\nexport const ArrangementContext = React.createContext(\n  \"PLEASE_RENDER_INSIDE_PROVIDER\"\n)\n\nexport function useArrangement() {\n  return React.useContext(ArrangementContext)\n}\n\nexport default ArrangementContext\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var card = \"PlasmicWorkCard-module--card--JzEIk\";\nexport var cardglobal_mode_reveal = \"PlasmicWorkCard-module--cardglobal_mode_reveal--Oey33\";\nexport var img__lEXel = \"PlasmicWorkCard-module--img__lEXel--vEQRu\";\nexport var __wab_imgSpacer = \"PlasmicWorkCard-module--__wab_img-spacer--wHSSP\";\nexport var freeBox__nzVMu = \"PlasmicWorkCard-module--freeBox__nzVMu--HMsKe\";\nexport var freeBox__haSw = \"PlasmicWorkCard-module--freeBox__haSw--ZITPA\";\nexport var slotTargetTitle = \"PlasmicWorkCard-module--slotTargetTitle--VMCt4\";\nexport var freeBox__uLcd4 = \"PlasmicWorkCard-module--freeBox__uLcd4--7yjMC\";\nexport var slotTargetHoverText = \"PlasmicWorkCard-module--slotTargetHoverText--kXMzo\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: IQmvc6tT46\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  useTrigger,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicWorkCard.module.css\" // plasmic-import: IQmvc6tT46/css\nimport orgDesignMeo1PxVz7 from \"./images/orgDesign.png\" // plasmic-import: meo1PxVZ7/picture\n\nexport const PlasmicWorkCard__VariantProps = new Array()\n\nexport const PlasmicWorkCard__ArgProps = new Array(\n  \"image\",\n  \"title\",\n  \"hoverText\"\n)\n\nfunction PlasmicWorkCard__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const [isCardHover, triggerCardHoverProps] = useTrigger(\"useHover\", {})\n  const triggers = {\n    hover_card: isCardHover,\n  }\n\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n  })\n\n  return (\n    <div\n      data-plasmic-name={\"card\"}\n      data-plasmic-override={overrides.card}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.card,\n        \"work-card\",\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [projectcss.global_mode_reveal]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"reveal\"\n          ),\n\n          [sty.cardglobal_mode_dark_global_mode_reveal]:\n            hasVariant(globalVariants, \"mode\", \"dark\") &&\n            hasVariant(globalVariants, \"mode\", \"reveal\"),\n          [sty.cardglobal_mode_reveal]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"reveal\"\n          ),\n        }\n      )}\n      tabIndex={0}\n      data-plasmic-trigger-props={[triggerCardHoverProps]}\n    >\n      {(hasVariant(globalVariants, \"mode\", \"reveal\") ? false : true)\n        ? p.renderPlasmicSlot({\n            defaultContents: (\n              <p.PlasmicImg\n                alt={\"\"}\n                className={classNames(sty.img__lEXel)}\n                displayHeight={\"100%\"}\n                displayMaxHeight={\"none\"}\n                displayMaxWidth={\"100%\"}\n                displayMinHeight={\"0\"}\n                displayMinWidth={\"0\"}\n                displayWidth={\"100%\"}\n                loading={\"lazy\"}\n                src={{\n                  src: orgDesignMeo1PxVz7,\n                  fullWidth: 2880,\n                  fullHeight: 2048,\n                  aspectRatio: undefined,\n                }}\n              />\n            ),\n\n            value: args.image,\n          })\n        : null}\n\n      <div\n        className={classNames(projectcss.all, sty.freeBox__nzVMu, {\n          [sty.freeBoxglobal_mode_reveal__nzVMuv94Jk]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"reveal\"\n          ),\n        })}\n      >\n        <div className={classNames(projectcss.all, sty.freeBox__haSw)}>\n          {p.renderPlasmicSlot({\n            defaultContents: \"an org design tool\",\n            value: args.title,\n            className: classNames(sty.slotTargetTitle, {\n              [sty.slotTargetTitleglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            }),\n          })}\n        </div>\n      </div>\n\n      {(triggers.hover_card ? true : true) ? (\n        <div\n          className={classNames(projectcss.all, sty.freeBox__uLcd4, {\n            [sty.freeBoxglobal_mode_dark_global_mode_reveal__uLcd4JYvhV94Jk]:\n              hasVariant(globalVariants, \"mode\", \"dark\") &&\n              hasVariant(globalVariants, \"mode\", \"reveal\"),\n            [sty.freeBoxglobal_mode_reveal__uLcd4V94Jk]: hasVariant(\n              globalVariants,\n              \"mode\",\n              \"reveal\"\n            ),\n          })}\n        >\n          {p.renderPlasmicSlot({\n            defaultContents: \"coming soon\",\n            value: args.hoverText,\n            className: classNames(sty.slotTargetHoverText, {\n              [sty.slotTargetHoverTextglobal_mode_dark_global_mode_reveal]:\n                hasVariant(globalVariants, \"mode\", \"dark\") &&\n                hasVariant(globalVariants, \"mode\", \"reveal\"),\n            }),\n          })}\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nconst PlasmicDescendants = {\n  card: [\"card\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicWorkCard__ArgProps,\n      internalVariantPropNames: PlasmicWorkCard__VariantProps,\n    })\n\n    return PlasmicWorkCard__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"card\") {\n    func.displayName = \"PlasmicWorkCard\"\n  } else {\n    func.displayName = `PlasmicWorkCard.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicWorkCard = Object.assign(\n  // Top-level PlasmicWorkCard renders the root element\n  makeNodeComponent(\"card\"),\n  {\n    // Helper components rendering sub-elements\n    // Metadata about props expected for PlasmicWorkCard\n    internalVariantProps: PlasmicWorkCard__VariantProps,\n    internalArgProps: PlasmicWorkCard__ArgProps,\n  }\n)\n\nexport default PlasmicWorkCard\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { PlasmicWorkCard } from \"./plasmic/jeffdo_es/PlasmicWorkCard\"\n\nfunction WorkCard_(props, ref) {\n  const { href, ...rest } = props\n\n  return (\n    <PlasmicWorkCard\n      {...rest}\n      root={{\n        ref,\n        as: href ? \"a\" : undefined,\n      }}\n      href={href}\n    />\n  )\n}\n\nconst WorkCard = React.forwardRef(WorkCard_)\n\nexport default WorkCard\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicRemember-module--root--8iHRe\";\nexport var h1 = \"PlasmicRemember-module--h1--98hxV\";\nexport var freeBox = \"PlasmicRemember-module--freeBox--LCAjx\";\nexport var columns = \"PlasmicRemember-module--columns--bWNXI\";\nexport var columnsglobal_mode_reveal = \"PlasmicRemember-module--columnsglobal_mode_reveal--PqaeZ\";\nexport var column__v0Llo = \"PlasmicRemember-module--column__v0Llo--9eYOh\";\nexport var case1 = \"PlasmicRemember-module--case1--X8l8V\";\nexport var case1global_mode_reveal = \"PlasmicRemember-module--case1global_mode_reveal--XNRch\";\nexport var img__yrMAw = \"PlasmicRemember-module--img__yrMAw--LNc2q\";\nexport var __wab_imgSpacer = \"PlasmicRemember-module--__wab_img-spacer--Ete4S\";\nexport var imgglobal_mode_reveal__yrMAwv94Jk = \"PlasmicRemember-module--imgglobal_mode_reveal__yrMAwv94Jk--Pes8O\";\nexport var text___0SXGf = \"PlasmicRemember-module--text___0SXGf--Jk-yu\";\nexport var workCard__dgCuN = \"PlasmicRemember-module--workCard__dgCuN--f9N0L\";\nexport var workCardglobal_mode_reveal__dgCuNv94Jk = \"PlasmicRemember-module--workCardglobal_mode_reveal__dgCuNv94Jk--M3tqR\";\nexport var img__j8E8P = \"PlasmicRemember-module--img__j8E8P--JIbzB\";\nexport var imgglobal_mode_reveal__j8E8Pv94Jk = \"PlasmicRemember-module--imgglobal_mode_reveal__j8E8Pv94Jk--swBak\";\nexport var workCard__eN9Yd = \"PlasmicRemember-module--workCard__eN9Yd--j+j4h\";\nexport var workCardglobal_mode_reveal__eN9YDv94Jk = \"PlasmicRemember-module--workCardglobal_mode_reveal__eN9YDv94Jk--e53yl\";\nexport var img__lAitF = \"PlasmicRemember-module--img__lAitF--odQrd\";\nexport var imgglobal_mode_reveal__lAitFv94Jk = \"PlasmicRemember-module--imgglobal_mode_reveal__lAitFv94Jk--5zMWX\";\nexport var column__amWpZ = \"PlasmicRemember-module--column__amWpZ--Y17df\";\nexport var workCard___6RwPh = \"PlasmicRemember-module--workCard___6RwPh--3rpnC\";\nexport var workCardglobal_mode_reveal___6RwPHv94Jk = \"PlasmicRemember-module--workCardglobal_mode_reveal___6RwPHv94Jk--Z09S6\";\nexport var img__mWe99 = \"PlasmicRemember-module--img__mWe99--dzJw4\";\nexport var imgglobal_mode_reveal__mWe99V94Jk = \"PlasmicRemember-module--imgglobal_mode_reveal__mWe99V94Jk--MKn9D\";\nexport var workCard__mkFgA = \"PlasmicRemember-module--workCard__mkFgA--LPy-D\";\nexport var workCardglobal_mode_reveal__mkFgAv94Jk = \"PlasmicRemember-module--workCardglobal_mode_reveal__mkFgAv94Jk--+ts1a\";\nexport var img__kv7Eq = \"PlasmicRemember-module--img__kv7Eq--P6UPQ\";\nexport var imgglobal_mode_reveal__kv7EQv94Jk = \"PlasmicRemember-module--imgglobal_mode_reveal__kv7EQv94Jk--NsJy1\";\nexport var workCard__bMvGu = \"PlasmicRemember-module--workCard__bMvGu--LVGgs\";\nexport var workCardglobal_mode_reveal__bMvGuv94Jk = \"PlasmicRemember-module--workCardglobal_mode_reveal__bMvGuv94Jk--L-wAi\";\nexport var img__fKio8 = \"PlasmicRemember-module--img__fKio8--4E--l\";\nexport var imgglobal_mode_reveal__fKio8V94Jk = \"PlasmicRemember-module--imgglobal_mode_reveal__fKio8V94Jk--ATaLB\";\nexport var text__utVr0 = \"PlasmicRemember-module--text__utVr0--Jrc+V\";\nexport var nav = \"PlasmicRemember-module--nav--aKIZw\";\nexport var reveal = \"PlasmicRemember-module--reveal--VPleh\";\nexport var revealglobal_mode_reveal = \"PlasmicRemember-module--revealglobal_mode_reveal--XFCH+\";\nexport var revealglobal_highlight_work = \"PlasmicRemember-module--revealglobal_highlight_work--+ALYx\";\nexport var svg___7EfG1 = \"PlasmicRemember-module--svg___7EfG1--q7V1w\";\nexport var svgglobal_mode_reveal___7EfG1V94Jk = \"PlasmicRemember-module--svgglobal_mode_reveal___7EfG1V94Jk--D2wGT\";\nexport var backHome = \"PlasmicRemember-module--backHome--+RcRN\";\nexport var svg__gg5Bj = \"PlasmicRemember-module--svg__gg5Bj--DONeO\";\nexport var svgglobal_mode_dark__gg5BjJYvh = \"PlasmicRemember-module--svgglobal_mode_dark__gg5BjJYvh--6vI0w\";\nexport var svgglobal_mode_reveal__gg5Bjv94Jk = \"PlasmicRemember-module--svgglobal_mode_reveal__gg5Bjv94Jk--8hpWf\";\nexport var svg__cikJ = \"PlasmicRemember-module--svg__cikJ--g7DAD\";\nexport var svgglobal_mode_dark__cikJJYvh = \"PlasmicRemember-module--svgglobal_mode_dark__cikJJYvh--cenS7\";\nexport var svgglobal_mode_reveal__cikJv94Jk = \"PlasmicRemember-module--svgglobal_mode_reveal__cikJv94Jk--PUmWc\";","export default __webpack_public_path__ + \"static/homebank-ff33e8ea990dcd367f95d8599b69ff85.jpeg\";","export default __webpack_public_path__ + \"static/brandsiteSketch-6590b082dc16d722de234ee03eb48e84.jpeg\";","export default __webpack_public_path__ + \"static/designSystem-ab782cedc00a79a11c24a15c071f8a44.png\";","export default __webpack_public_path__ + \"static/logistics-a98fb0483cc598ee0508888156b8cbec.png\";","export default __webpack_public_path__ + \"static/biotech-123aa5897a787c7bb653bbbbc2415d79.png\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: tThhXlSj4r\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport WorkCard from \"../../WorkCard\" // plasmic-import: IQmvc6tT46/component\nimport IconButton from \"../../IconButton\" // plasmic-import: mEnM6zW3GD/component\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport { useHighlight } from \"./PlasmicGlobalVariant__Highlight\" // plasmic-import: ntiwPmQAsH/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicRemember.module.css\" // plasmic-import: tThhXlSj4r/css\nimport EyeClosedIcon from \"./icons/PlasmicIcon__EyeClosed\" // plasmic-import: aBAB-JPNq/icon\nimport EyeOpenIcon from \"./icons/PlasmicIcon__EyeOpen\" // plasmic-import: J7fJnmL4N/icon\nimport JwSharpIcon from \"./icons/PlasmicIcon__JwSharp\" // plasmic-import: imnHY-_8sU/icon\nimport NightIcon from \"./icons/PlasmicIcon__Night\" // plasmic-import: nS7MqAdlwl/icon\nimport DayIcon from \"./icons/PlasmicIcon__Day\" // plasmic-import: 2cwRWiCxc/icon\nimport orgDesignMeo1PxVz7 from \"./images/orgDesign.png\" // plasmic-import: meo1PxVZ7/picture\nimport homebankLQjd9XtUp from \"./images/homebank.jpeg\" // plasmic-import: lQjd9xtUP/picture\nimport brandsiteSketchO2Bv1FGl from \"./images/brandsiteSketch.jpeg\" // plasmic-import: o2bv1_FGl/picture\nimport designSystemN5LfcRGsG from \"./images/designSystem.png\" // plasmic-import: n5LfcRGsG/picture\nimport logisticsIxIw820Kf from \"./images/logistics.png\" // plasmic-import: ixIW820KF/picture\nimport biotechLcRWsB4Si from \"./images/biotech.png\" // plasmic-import: LcRWsB4si/picture\n\nexport const PlasmicRemember__VariantProps = new Array()\n\nexport const PlasmicRemember__ArgProps = new Array()\n\nfunction PlasmicRemember__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    screen: useScreenVariantsekypzdksLjd0F(),\n    mode: useMode(),\n    highlight: useHighlight(),\n  })\n\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          hasGap={true}\n          className={classNames(\n            projectcss.all,\n            projectcss.root_reset,\n            projectcss.plasmic_default_styles,\n            projectcss.plasmic_mixins,\n            projectcss.plasmic_tokens,\n            sty.root,\n            {\n              [projectcss.global_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.rootglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.rootglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            }\n          )}\n        >\n          <h1\n            data-plasmic-name={\"h1\"}\n            data-plasmic-override={overrides.h1}\n            className={classNames(\n              projectcss.all,\n              projectcss.h1,\n              projectcss.__wab_text,\n              sty.h1\n            )}\n          >\n            {\"jeff does remember\"}\n          </h1>\n\n          {true ? (\n            <div\n              data-plasmic-name={\"freeBox\"}\n              data-plasmic-override={overrides.freeBox}\n              className={classNames(projectcss.all, sty.freeBox)}\n            >\n              {true ? (\n                <p.Stack\n                  as={\"div\"}\n                  data-plasmic-name={\"columns\"}\n                  data-plasmic-override={overrides.columns}\n                  hasGap={true}\n                  className={classNames(projectcss.all, sty.columns, {\n                    [sty.columnsglobal_mode_reveal]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"reveal\"\n                    ),\n                  })}\n                >\n                  <p.Stack\n                    as={\"div\"}\n                    hasGap={true}\n                    className={classNames(projectcss.all, sty.column__v0Llo, {\n                      [sty.columnglobal_mode_reveal__v0LlOv94Jk]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"reveal\"\n                      ),\n                    })}\n                  >\n                    <WorkCard\n                      data-plasmic-name={\"case1\"}\n                      data-plasmic-override={overrides.case1}\n                      className={classNames(\"__wab_instance\", sty.case1, {\n                        [sty.case1global_mode_reveal]: hasVariant(\n                          globalVariants,\n                          \"mode\",\n                          \"reveal\"\n                        ),\n                      })}\n                      hoverText={\n                        true ? (\n                          <div\n                            className={classNames(\n                              projectcss.all,\n                              projectcss.__wab_text,\n                              sty.text___0SXGf,\n                              {\n                                [sty.textglobal_mode_dark___0SXGfJYvh]:\n                                  hasVariant(globalVariants, \"mode\", \"dark\"),\n                                [sty.textglobal_mode_reveal___0SXGfv94Jk]:\n                                  hasVariant(globalVariants, \"mode\", \"reveal\"),\n                              }\n                            )}\n                          >\n                            {\"coming soon\"}\n                          </div>\n                        ) : null\n                      }\n                      image={\n                        (\n                          hasVariant(globalVariants, \"mode\", \"reveal\")\n                            ? true\n                            : true\n                        ) ? (\n                          <p.PlasmicImg\n                            alt={\"\"}\n                            className={classNames(sty.img__yrMAw, {\n                              [sty.imgglobal_mode_dark__yrMAwJYvh]: hasVariant(\n                                globalVariants,\n                                \"mode\",\n                                \"dark\"\n                              ),\n\n                              [sty.imgglobal_mode_reveal__yrMAwv94Jk]:\n                                hasVariant(globalVariants, \"mode\", \"reveal\"),\n                            })}\n                            displayHeight={\"100%\"}\n                            displayMaxHeight={\"none\"}\n                            displayMaxWidth={\"100%\"}\n                            displayMinHeight={\"0\"}\n                            displayMinWidth={\"0\"}\n                            displayWidth={\n                              hasVariant(\n                                globalVariants,\n                                \"screen\",\n                                \"desktopOnly\"\n                              )\n                                ? \"440px\"\n                                : \"100%\"\n                            }\n                            loading={\"lazy\"}\n                            src={{\n                              src: orgDesignMeo1PxVz7,\n                              fullWidth: 2880,\n                              fullHeight: 2048,\n                              aspectRatio: undefined,\n                            }}\n                          />\n                        ) : null\n                      }\n                      title={\"an org design tool\"}\n                    />\n\n                    <WorkCard\n                      className={classNames(\n                        \"__wab_instance\",\n                        sty.workCard__dgCuN,\n                        {\n                          [sty.workCardglobal_mode_reveal__dgCuNv94Jk]:\n                            hasVariant(globalVariants, \"mode\", \"reveal\"),\n                        }\n                      )}\n                      image={\n                        (\n                          hasVariant(globalVariants, \"mode\", \"reveal\")\n                            ? true\n                            : true\n                        ) ? (\n                          <p.PlasmicImg\n                            alt={\"\"}\n                            className={classNames(sty.img__j8E8P, {\n                              [sty.imgglobal_mode_reveal__j8E8Pv94Jk]:\n                                hasVariant(globalVariants, \"mode\", \"reveal\"),\n                            })}\n                            displayHeight={\"100%\"}\n                            displayMaxHeight={\"none\"}\n                            displayMaxWidth={\"100%\"}\n                            displayMinHeight={\"0\"}\n                            displayMinWidth={\"0\"}\n                            displayWidth={\n                              hasVariant(\n                                globalVariants,\n                                \"screen\",\n                                \"desktopOnly\"\n                              )\n                                ? \"440px\"\n                                : \"100%\"\n                            }\n                            loading={\"lazy\"}\n                            src={{\n                              src: homebankLQjd9XtUp,\n                              fullWidth: 2048,\n                              fullHeight: 1536,\n                              aspectRatio: undefined,\n                            }}\n                          />\n                        ) : null\n                      }\n                      title={\"a mortgage portal\"}\n                    />\n\n                    <WorkCard\n                      className={classNames(\n                        \"__wab_instance\",\n                        sty.workCard__eN9Yd,\n                        {\n                          [sty.workCardglobal_mode_reveal__eN9YDv94Jk]:\n                            hasVariant(globalVariants, \"mode\", \"reveal\"),\n                        }\n                      )}\n                      image={\n                        (\n                          hasVariant(globalVariants, \"mode\", \"reveal\")\n                            ? true\n                            : true\n                        ) ? (\n                          <p.PlasmicImg\n                            alt={\"\"}\n                            className={classNames(sty.img__lAitF, {\n                              [sty.imgglobal_mode_reveal__lAitFv94Jk]:\n                                hasVariant(globalVariants, \"mode\", \"reveal\"),\n                            })}\n                            displayHeight={\"100%\"}\n                            displayMaxHeight={\"none\"}\n                            displayMaxWidth={\"100%\"}\n                            displayMinHeight={\"0\"}\n                            displayMinWidth={\"0\"}\n                            displayWidth={\n                              hasVariant(\n                                globalVariants,\n                                \"screen\",\n                                \"desktopOnly\"\n                              )\n                                ? \"440px\"\n                                : \"100%\"\n                            }\n                            loading={\"lazy\"}\n                            src={{\n                              src: brandsiteSketchO2Bv1FGl,\n                              fullWidth: 4096,\n                              fullHeight: 3069,\n                              aspectRatio: undefined,\n                            }}\n                          />\n                        ) : null\n                      }\n                      title={\"a global brand navigator\"}\n                    />\n                  </p.Stack>\n\n                  <p.Stack\n                    as={\"div\"}\n                    hasGap={true}\n                    className={classNames(projectcss.all, sty.column__amWpZ)}\n                  >\n                    <WorkCard\n                      className={classNames(\n                        \"__wab_instance\",\n                        sty.workCard___6RwPh,\n                        {\n                          [sty.workCardglobal_mode_reveal___6RwPHv94Jk]:\n                            hasVariant(globalVariants, \"mode\", \"reveal\"),\n                        }\n                      )}\n                      image={\n                        (\n                          hasVariant(globalVariants, \"mode\", \"reveal\")\n                            ? true\n                            : true\n                        ) ? (\n                          <p.PlasmicImg\n                            alt={\"\"}\n                            className={classNames(sty.img__mWe99, {\n                              [sty.imgglobal_mode_reveal__mWe99V94Jk]:\n                                hasVariant(globalVariants, \"mode\", \"reveal\"),\n                            })}\n                            displayHeight={\"100%\"}\n                            displayMaxHeight={\"none\"}\n                            displayMaxWidth={\"100%\"}\n                            displayMinHeight={\"0\"}\n                            displayMinWidth={\"0\"}\n                            displayWidth={\n                              hasVariant(\n                                globalVariants,\n                                \"screen\",\n                                \"desktopOnly\"\n                              )\n                                ? \"440px\"\n                                : \"100%\"\n                            }\n                            loading={\"lazy\"}\n                            src={{\n                              src: designSystemN5LfcRGsG,\n                              fullWidth: 880,\n                              fullHeight: 513,\n                              aspectRatio: undefined,\n                            }}\n                          />\n                        ) : null\n                      }\n                      title={\"a product design system\"}\n                    />\n\n                    <WorkCard\n                      className={classNames(\n                        \"__wab_instance\",\n                        sty.workCard__mkFgA,\n                        {\n                          [sty.workCardglobal_mode_reveal__mkFgAv94Jk]:\n                            hasVariant(globalVariants, \"mode\", \"reveal\"),\n                        }\n                      )}\n                      image={\n                        (\n                          hasVariant(globalVariants, \"mode\", \"reveal\")\n                            ? true\n                            : true\n                        ) ? (\n                          <p.PlasmicImg\n                            alt={\"\"}\n                            className={classNames(sty.img__kv7Eq, {\n                              [sty.imgglobal_mode_reveal__kv7EQv94Jk]:\n                                hasVariant(globalVariants, \"mode\", \"reveal\"),\n                            })}\n                            displayHeight={\"100%\"}\n                            displayMaxHeight={\"none\"}\n                            displayMaxWidth={\"100%\"}\n                            displayMinHeight={\"0\"}\n                            displayMinWidth={\"0\"}\n                            displayWidth={\n                              hasVariant(\n                                globalVariants,\n                                \"screen\",\n                                \"desktopOnly\"\n                              )\n                                ? \"440px\"\n                                : \"100%\"\n                            }\n                            loading={\"lazy\"}\n                            src={\n                              hasVariant(\n                                globalVariants,\n                                \"screen\",\n                                \"desktopOnly\"\n                              )\n                                ? {\n                                    src: logisticsIxIw820Kf,\n                                    fullWidth: 968,\n                                    fullHeight: 722,\n                                    aspectRatio: undefined,\n                                  }\n                                : {\n                                    src: logisticsIxIw820Kf,\n                                    fullWidth: 968,\n                                    fullHeight: 722,\n                                    aspectRatio: undefined,\n                                  }\n                            }\n                          />\n                        ) : null\n                      }\n                      title={\"an ecomm logistics service\"}\n                    />\n\n                    <WorkCard\n                      className={classNames(\n                        \"__wab_instance\",\n                        sty.workCard__bMvGu,\n                        {\n                          [sty.workCardglobal_mode_reveal__bMvGuv94Jk]:\n                            hasVariant(globalVariants, \"mode\", \"reveal\"),\n                        }\n                      )}\n                      image={\n                        (\n                          hasVariant(globalVariants, \"mode\", \"reveal\")\n                            ? true\n                            : true\n                        ) ? (\n                          <p.PlasmicImg\n                            alt={\"\"}\n                            className={classNames(sty.img__fKio8, {\n                              [sty.imgglobal_mode_reveal__fKio8V94Jk]:\n                                hasVariant(globalVariants, \"mode\", \"reveal\"),\n                            })}\n                            displayHeight={\"100%\"}\n                            displayMaxHeight={\"none\"}\n                            displayMaxWidth={\"100%\"}\n                            displayMinHeight={\"0\"}\n                            displayMinWidth={\"0\"}\n                            displayWidth={\n                              hasVariant(\n                                globalVariants,\n                                \"screen\",\n                                \"desktopOnly\"\n                              )\n                                ? \"440px\"\n                                : \"100%\"\n                            }\n                            loading={\"lazy\"}\n                            src={{\n                              src: biotechLcRWsB4Si,\n                              fullWidth: 1024,\n                              fullHeight: 748,\n                              aspectRatio: undefined,\n                            }}\n                          />\n                        ) : null\n                      }\n                      title={\n                        <div\n                          className={classNames(\n                            projectcss.all,\n                            projectcss.__wab_text,\n                            sty.text__utVr0\n                          )}\n                        >\n                          {\"a biotech account manager\"}\n                        </div>\n                      }\n                    />\n                  </p.Stack>\n                </p.Stack>\n              ) : null}\n            </div>\n          ) : null}\n\n          <nav\n            data-plasmic-name={\"nav\"}\n            data-plasmic-override={overrides.nav}\n            className={classNames(projectcss.all, sty.nav, {\n              [sty.navglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.navglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n          >\n            <IconButton\n              data-plasmic-name={\"reveal\"}\n              data-plasmic-override={overrides.reveal}\n              className={classNames(\"__wab_instance\", sty.reveal, {\n                [sty.revealglobal_highlight_work]: hasVariant(\n                  globalVariants,\n                  \"highlight\",\n                  \"work\"\n                ),\n\n                [sty.revealglobal_mode_dark]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"dark\"\n                ),\n\n                [sty.revealglobal_mode_reveal]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"reveal\"\n                ),\n              })}\n              icon={\n                <p.PlasmicIcon\n                  PlasmicIconType={\n                    hasVariant(globalVariants, \"mode\", \"reveal\")\n                      ? EyeOpenIcon\n                      : EyeClosedIcon\n                  }\n                  className={classNames(projectcss.all, sty.svg___7EfG1, {\n                    [sty.svgglobal_mode_dark___7EfG1JYvh]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"dark\"\n                    ),\n\n                    [sty.svgglobal_mode_reveal___7EfG1V94Jk]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"reveal\"\n                    ),\n                  })}\n                  cursor={\n                    hasVariant(globalVariants, \"mode\", \"reveal\")\n                      ? \"pointer\"\n                      : \"pointer\"\n                  }\n                  role={\"img\"}\n                />\n              }\n              label={\n                hasVariant(globalVariants, \"highlight\", \"work\")\n                  ? \"reveal labels\"\n                  : hasVariant(globalVariants, \"mode\", \"reveal\")\n                  ? \"show images\"\n                  : \"hide images\"\n              }\n            />\n\n            <p.PlasmicLink\n              data-plasmic-name={\"backHome\"}\n              data-plasmic-override={overrides.backHome}\n              className={classNames(\n                projectcss.all,\n                projectcss.a,\n                sty.backHome,\n                {\n                  [sty.backHomeglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n                }\n              )}\n              component={Link}\n              href={\"/design\"}\n              platform={\"gatsby\"}\n              title={\"go back\"}\n            >\n              <IconButton\n                data-plasmic-name={\"logo\"}\n                data-plasmic-override={overrides.logo}\n                className={classNames(\"__wab_instance\", sty.logo, {\n                  [sty.logoglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.logoglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                icon={\n                  <JwSharpIcon\n                    className={classNames(projectcss.all, sty.svg__gg5Bj, {\n                      [sty.svgglobal_mode_dark__gg5BjJYvh]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"dark\"\n                      ),\n\n                      [sty.svgglobal_mode_reveal__gg5Bjv94Jk]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"reveal\"\n                      ),\n                    })}\n                    role={\"img\"}\n                  />\n                }\n                label={\"go back\"}\n              />\n            </p.PlasmicLink>\n\n            <IconButton\n              data-plasmic-name={\"darkmode\"}\n              data-plasmic-override={overrides.darkmode}\n              className={classNames(\"__wab_instance\", sty.darkmode, {\n                [sty.darkmodeglobal_mode_dark]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"dark\"\n                ),\n\n                [sty.darkmodeglobal_mode_reveal]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"reveal\"\n                ),\n              })}\n              icon={\n                <p.PlasmicIcon\n                  PlasmicIconType={\n                    hasVariant(globalVariants, \"mode\", \"dark\")\n                      ? DayIcon\n                      : NightIcon\n                  }\n                  className={classNames(projectcss.all, sty.svg__cikJ, {\n                    [sty.svgglobal_mode_dark__cikJJYvh]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"dark\"\n                    ),\n\n                    [sty.svgglobal_mode_reveal__cikJv94Jk]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"reveal\"\n                    ),\n                  })}\n                  cursor={\n                    hasVariant(globalVariants, \"mode\", \"reveal\")\n                      ? \"pointer\"\n                      : hasVariant(globalVariants, \"mode\", \"dark\")\n                      ? \"pointer\"\n                      : \"pointer\"\n                  }\n                  role={\"img\"}\n                />\n              }\n              label={\n                hasVariant(globalVariants, \"mode\", \"dark\")\n                  ? \"switch to light mode\"\n                  : \"switch to dark mode\"\n              }\n            />\n          </nav>\n        </p.Stack>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\n    \"root\",\n    \"h1\",\n    \"freeBox\",\n    \"columns\",\n    \"case1\",\n    \"nav\",\n    \"reveal\",\n    \"backHome\",\n    \"logo\",\n    \"darkmode\",\n  ],\n\n  h1: [\"h1\"],\n  freeBox: [\"freeBox\", \"columns\", \"case1\"],\n  columns: [\"columns\", \"case1\"],\n  case1: [\"case1\"],\n  nav: [\"nav\", \"reveal\", \"backHome\", \"logo\", \"darkmode\"],\n  reveal: [\"reveal\"],\n  backHome: [\"backHome\", \"logo\"],\n  logo: [\"logo\"],\n  darkmode: [\"darkmode\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicRemember__ArgProps,\n      internalVariantPropNames: PlasmicRemember__VariantProps,\n    })\n\n    return PlasmicRemember__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicRemember\"\n  } else {\n    func.displayName = `PlasmicRemember.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicRemember = Object.assign(\n  // Top-level PlasmicRemember renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    h1: makeNodeComponent(\"h1\"),\n    freeBox: makeNodeComponent(\"freeBox\"),\n    columns: makeNodeComponent(\"columns\"),\n    case1: makeNodeComponent(\"case1\"),\n    nav: makeNodeComponent(\"nav\"),\n    reveal: makeNodeComponent(\"reveal\"),\n    backHome: makeNodeComponent(\"backHome\"),\n    logo: makeNodeComponent(\"logo\"),\n    darkmode: makeNodeComponent(\"darkmode\"),\n    // Metadata about props expected for PlasmicRemember\n    internalVariantProps: PlasmicRemember__VariantProps,\n    internalArgProps: PlasmicRemember__ArgProps,\n  }\n)\n\nexport default PlasmicRemember\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { useState } from 'react';\nimport { ModeContext } from \"../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Mode\"\nimport { HighlightContext } from \"../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Highlight\"\nimport { ArrangementContext } from \"../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Arrangement\"\nimport { PlasmicRemember } from \"../components/plasmic/jeffdo_es/PlasmicRemember\"\n\nfunction Remember() {\n  const [mode, setMode] = useState([\"dark\"])\n  const [revealed, setRevealed] = useState(false)\n\n  const toggleRevealed = () => {\n    const newMode = [...mode]\n    if (newMode.includes(\"reveal\")) {\n      newMode.pop()\n      setRevealed(false)\n    } else {\n      newMode.push(\"reveal\")\n      setRevealed(true)\n    }\n    setMode(newMode)\n  }\n\n  const toggleDarkMode = () => {\n    const newMode = [...mode]\n    if (newMode.includes(\"dark\")) {\n      newMode.shift()\n    } else {\n      newMode.unshift(\"dark\")\n    }\n    setMode(newMode)\n  }\n\n\n  return (\n    <ArrangementContext.Provider value={revealed}>\n      <HighlightContext.Provider value={undefined}>\n        <ModeContext.Provider value={mode}>\n          <PlasmicRemember\n            reveal={{\n              onClick: () => toggleRevealed(),\n            }}\n            darkmode={{\n              onClick: () => toggleDarkMode(),\n            }}\n            case1={{\n              hoverText: \"robust organizational design tool for enterprise clients.\",\n              href: \"/an-org-design-tool\",\n            }}\n          />\n        </ModeContext.Provider>\n      </HighlightContext.Provider>\n    </ArrangementContext.Provider>\n  )\n}\n\nexport default Remember\n","export default __webpack_public_path__ + \"static/orgDesign-d1f45f731d370dee96c5c2a317236c3d.png\";"],"names":["ArrangementContext","React","useArrangement","card","cardglobal_mode_reveal","img__lEXel","freeBox__nzVMu","freeBox__haSw","slotTargetTitle","freeBox__uLcd4","slotTargetHoverText","PlasmicWorkCard__VariantProps","Array","PlasmicWorkCard__ArgProps","PlasmicDescendants","nodeName","func","PlasmicWorkCard","Object","assign","props","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","args","overrides","forNode","useTrigger","triggerCardHoverProps","globalVariants","ensureGlobalVariants","mode","useMode","className","classNames","projectcss","sty","hasVariant","tabIndex","p","defaultContents","alt","displayHeight","displayMaxHeight","displayMaxWidth","displayMinHeight","displayMinWidth","displayWidth","loading","src","orgDesignMeo1PxVz7","fullWidth","fullHeight","aspectRatio","undefined","value","image","title","hoverText","PlasmicWorkCard__RenderFunc","displayName","internalVariantProps","internalArgProps","WorkCard_","ref","href","rest","root","as","h1","freeBox","columns","columnsglobal_mode_reveal","column__v0Llo","case1","case1global_mode_reveal","img__yrMAw","imgglobal_mode_reveal__yrMAwv94Jk","text___0SXGf","workCard__dgCuN","workCardglobal_mode_reveal__dgCuNv94Jk","img__j8E8P","imgglobal_mode_reveal__j8E8Pv94Jk","workCard__eN9Yd","workCardglobal_mode_reveal__eN9YDv94Jk","img__lAitF","imgglobal_mode_reveal__lAitFv94Jk","column__amWpZ","workCard___6RwPh","workCardglobal_mode_reveal___6RwPHv94Jk","img__mWe99","imgglobal_mode_reveal__mWe99V94Jk","workCard__mkFgA","workCardglobal_mode_reveal__mkFgAv94Jk","img__kv7Eq","imgglobal_mode_reveal__kv7EQv94Jk","workCard__bMvGu","workCardglobal_mode_reveal__bMvGuv94Jk","img__fKio8","imgglobal_mode_reveal__fKio8V94Jk","text__utVr0","nav","reveal","revealglobal_mode_reveal","revealglobal_highlight_work","svg___7EfG1","svgglobal_mode_reveal___7EfG1V94Jk","backHome","svg__gg5Bj","svgglobal_mode_dark__gg5BjJYvh","svgglobal_mode_reveal__gg5Bjv94Jk","svg__cikJ","svgglobal_mode_dark__cikJJYvh","svgglobal_mode_reveal__cikJv94Jk","PlasmicRemember__VariantProps","PlasmicRemember__ArgProps","logo","darkmode","makeNodeComponent","screen","useScreenVariantsekypzdksLjd0F","highlight","useHighlight","hasGap","homebankLQjd9XtUp","brandsiteSketchO2Bv1FGl","designSystemN5LfcRGsG","logisticsIxIw820Kf","biotechLcRWsB4Si","IconButton","icon","PlasmicIconType","EyeOpenIcon","EyeClosedIcon","cursor","role","label","component","Link","platform","DayIcon","NightIcon","PlasmicRemember__RenderFunc","PlasmicRemember","useState","setMode","revealed","setRevealed","onClick","newMode","includes","pop","push","shift","unshift"],"sourceRoot":""}