{"version":3,"file":"193db7014a5ea2c5f506389ee7f621cf606a0676-52efcfca84c183ad901b.js","mappings":"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","sources":["webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicStripe.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__WiggleArrow.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicStripe.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHeadlineButton.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHeadlineButton.jsx","webpack://jeffdoes/./src/components/HeadlineButton.jsx","webpack://jeffdoes/./src/components/Stripe.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHeadline.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHeadline.jsx","webpack://jeffdoes/./src/components/Headline.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHomepage.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Face.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Info.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Learnax.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Location.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHomepage.jsx","webpack://jeffdoes/./src/pages/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicStripe-module--root--bJ9kr\";\nexport var roothighlighted = \"PlasmicStripe-module--roothighlighted--EiH--\";\nexport var rootlowlighted = \"PlasmicStripe-module--rootlowlighted--tU-Cw\";\nexport var root___focusVisibleWithin = \"PlasmicStripe-module--root___focusVisibleWithin--ptI+B\";\nexport var title = \"PlasmicStripe-module--title--Bk9i2\";\nexport var titlecolor_grey = \"PlasmicStripe-module--titlecolor_grey--5WPD+\";\nexport var titlelowlighted = \"PlasmicStripe-module--titlelowlighted--4ExYL\";\nexport var titlecolor_red = \"PlasmicStripe-module--titlecolor_red--Znku5\";\nexport var titlecolor_orange = \"PlasmicStripe-module--titlecolor_orange--sn6Vg\";\nexport var titlecolor_yellow = \"PlasmicStripe-module--titlecolor_yellow--AAXd1\";\nexport var titlecolor_green = \"PlasmicStripe-module--titlecolor_green--YTxHx\";\nexport var titlecolor_mint = \"PlasmicStripe-module--titlecolor_mint--bLTfB\";\nexport var titlecolor_blue = \"PlasmicStripe-module--titlecolor_blue--Cu8nK\";\nexport var titlecolor_purple = \"PlasmicStripe-module--titlecolor_purple--PHLn3\";\nexport var title___focusVisibleWithin = \"PlasmicStripe-module--title___focusVisibleWithin--2G1rb\";\nexport var slotTargetLabel = \"PlasmicStripe-module--slotTargetLabel--j7CQY\";\nexport var slotTargetLabelcolor_grey = \"PlasmicStripe-module--slotTargetLabelcolor_grey--3uumD\";\nexport var slotTargetLabelcolor_orange = \"PlasmicStripe-module--slotTargetLabelcolor_orange--1MxUY\";\nexport var slotTargetLabelcolor_yellow = \"PlasmicStripe-module--slotTargetLabelcolor_yellow--GkuRT\";\nexport var slotTargetLabelcolor_green = \"PlasmicStripe-module--slotTargetLabelcolor_green--VzVFa\";\nexport var slotTargetLabelcolor_mint = \"PlasmicStripe-module--slotTargetLabelcolor_mint--r5Fpo\";\nexport var __wab_slot = \"PlasmicStripe-module--__wab_slot--sA5So\";\nexport var slotTargetLabel___focusVisibleWithin = \"PlasmicStripe-module--slotTargetLabel___focusVisibleWithin--Y9tT1\";\nexport var slotTargetIcon = \"PlasmicStripe-module--slotTargetIcon--kh1EI\";\nexport var slotTargetIconcolor_grey = \"PlasmicStripe-module--slotTargetIconcolor_grey--z7Si2\";\nexport var slotTargetIconcolor_orange = \"PlasmicStripe-module--slotTargetIconcolor_orange--FRrGL\";\nexport var slotTargetIconcolor_yellow = \"PlasmicStripe-module--slotTargetIconcolor_yellow--HdCc5\";\nexport var slotTargetIconcolor_green = \"PlasmicStripe-module--slotTargetIconcolor_green--jn51U\";\nexport var slotTargetIconcolor_mint = \"PlasmicStripe-module--slotTargetIconcolor_mint--s99Ub\";\nexport var slotTargetIcon___focusVisibleWithin = \"PlasmicStripe-module--slotTargetIcon___focusVisibleWithin--H7FZZ\";\nexport var svg__rm0Cy = \"PlasmicStripe-module--svg__rm0Cy--CmxF9\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function WiggleArrowIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M15.5 8l.354.354a.5.5 0 000-.708L15.5 8zM0 10.5c.841 0 1.495-.212 2.03-.544.523-.325.91-.752 1.23-1.136.337-.405.576-.726.862-.972.26-.223.524-.348.878-.348v-1c-.646 0-1.132.25-1.529.59-.37.316-.693.745-.98 1.09-.305.366-.607.69-.99.926C1.13 9.337.66 9.5 0 9.5v1zm5-3a.61.61 0 01.348.09.823.823 0 01.251.287c.176.3.286.723.416 1.244.12.48.26 1.057.522 1.506.136.234.318.457.57.62.255.167.554.253.893.253v-1a.61.61 0 01-.348-.09.823.823 0 01-.251-.287c-.176-.3-.286-.723-.416-1.244-.12-.48-.26-1.057-.522-1.506a1.813 1.813 0 00-.57-.62A1.607 1.607 0 005 6.5v1zm3 4c.634 0 1.17-.24 1.628-.558.45-.311.858-.72 1.226-1.088.382-.383.725-.723 1.087-.974.354-.245.693-.38 1.059-.38v-1c-.634 0-1.17.24-1.628.558-.45.311-.858.72-1.226 1.088-.382.383-.724.723-1.087.974-.354.245-.693.38-1.059.38v1zm5-3h2.5v-1H13v1zm2.146-.854l-3 3 .708.708 3-3-.708-.708zm.708 0l-3-3-.708.708 3 3 .708-.708z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default WiggleArrowIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: JaZPnDe4BQ\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  useTrigger,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicStripe.module.css\" // plasmic-import: JaZPnDe4BQ/css\nimport WiggleArrowIcon from \"./icons/PlasmicIcon__WiggleArrow\" // plasmic-import: iZuEl1jiaD/icon\n\nexport const PlasmicStripe__VariantProps = new Array(\n  \"color\",\n  \"revealed\",\n  \"highlighted\",\n  \"lowlighted\"\n)\n\nexport const PlasmicStripe__ArgProps = new Array(\n  \"label\",\n  \"icon\",\n  \"category\",\n  \"name\"\n)\n\nfunction PlasmicStripe__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =\n    useTrigger(\"useFocusVisibleWithin\", {\n      isTextInput: false,\n    })\n\n  const [isRootHover, triggerRootHoverProps] = useTrigger(\"useHover\", {})\n  const [isRootFocusWithin, triggerRootFocusWithinProps] = useTrigger(\n    \"useFocusedWithin\",\n    {}\n  )\n\n  const triggers = {\n    focusVisibleWithin_root: isRootFocusVisibleWithin,\n    hover_root: isRootHover,\n    focusWithin_root: isRootFocusWithin,\n  }\n\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n  })\n\n  return true ? (\n    <div\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,\n          [sty.rootcolor_blue]: hasVariant(variants, \"color\", \"blue\"),\n          [sty.rootcolor_green]: hasVariant(variants, \"color\", \"green\"),\n          [sty.rootcolor_grey]: hasVariant(variants, \"color\", \"grey\"),\n          [sty.rootcolor_mint]: hasVariant(variants, \"color\", \"mint\"),\n          [sty.rootcolor_orange]: hasVariant(variants, \"color\", \"orange\"),\n          [sty.rootcolor_purple]: hasVariant(variants, \"color\", \"purple\"),\n          [sty.rootcolor_red]: hasVariant(variants, \"color\", \"red\"),\n          [sty.rootcolor_yellow]: hasVariant(variants, \"color\", \"yellow\"),\n          [sty.rootglobal_mode_reveal]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"reveal\"\n          ),\n\n          [sty.roothighlighted]: hasVariant(\n            variants,\n            \"highlighted\",\n            \"highlighted\"\n          ),\n\n          [sty.rootlowlighted]: hasVariant(\n            variants,\n            \"lowlighted\",\n            \"lowlighted\"\n          ),\n\n          [sty.rootrevealed]: hasVariant(variants, \"revealed\", \"revealed\"),\n        }\n      )}\n      tabIndex={2}\n      data-plasmic-trigger-props={[\n        triggerRootFocusVisibleWithinProps,\n        triggerRootHoverProps,\n        triggerRootFocusWithinProps,\n      ]}\n    >\n      <p.Stack\n        as={\"div\"}\n        data-plasmic-name={\"title\"}\n        data-plasmic-override={overrides.title}\n        hasGap={true}\n        className={classNames(projectcss.all, sty.title, {\n          [sty.title___focusVisibleWithin]: triggers.focusVisibleWithin_root,\n          [sty.titlecolor_blue]: hasVariant(variants, \"color\", \"blue\"),\n          [sty.titlecolor_green]: hasVariant(variants, \"color\", \"green\"),\n          [sty.titlecolor_grey]: hasVariant(variants, \"color\", \"grey\"),\n          [sty.titlecolor_mint]: hasVariant(variants, \"color\", \"mint\"),\n          [sty.titlecolor_orange]: hasVariant(variants, \"color\", \"orange\"),\n          [sty.titlecolor_purple]: hasVariant(variants, \"color\", \"purple\"),\n          [sty.titlecolor_red]: hasVariant(variants, \"color\", \"red\"),\n          [sty.titlecolor_yellow]: hasVariant(variants, \"color\", \"yellow\"),\n          [sty.titleglobal_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.titleglobal_mode_reveal]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"reveal\"\n          ),\n\n          [sty.titlehighlighted]: hasVariant(\n            variants,\n            \"highlighted\",\n            \"highlighted\"\n          ),\n\n          [sty.titlelowlighted]: hasVariant(\n            variants,\n            \"lowlighted\",\n            \"lowlighted\"\n          ),\n\n          [sty.titlerevealed]: hasVariant(variants, \"revealed\", \"revealed\"),\n        })}\n      >\n        {(\n          triggers.focusVisibleWithin_root\n            ? true\n            : triggers.focusWithin_root\n            ? true\n            : triggers.hover_root &&\n              hasVariant(globalVariants, \"mode\", \"reveal\")\n            ? true\n            : triggers.hover_root\n            ? false\n            : hasVariant(variants, \"revealed\", \"revealed\")\n            ? true\n            : hasVariant(variants, \"highlighted\", \"highlighted\")\n            ? true\n            : hasVariant(globalVariants, \"mode\", \"reveal\")\n            ? true\n            : false\n        )\n          ? p.renderPlasmicSlot({\n              defaultContents: \"label\",\n              value: args.label,\n              className: classNames(sty.slotTargetLabel, {\n                [sty.slotTargetLabel___focusVisibleWithin]:\n                  triggers.focusVisibleWithin_root,\n                [sty.slotTargetLabelcolor_blue]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"blue\"\n                ),\n\n                [sty.slotTargetLabelcolor_green]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"green\"\n                ),\n\n                [sty.slotTargetLabelcolor_grey]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"grey\"\n                ),\n\n                [sty.slotTargetLabelcolor_mint]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"mint\"\n                ),\n\n                [sty.slotTargetLabelcolor_orange]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"orange\"\n                ),\n\n                [sty.slotTargetLabelcolor_yellow]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"yellow\"\n                ),\n\n                [sty.slotTargetLabelglobal_mode_reveal]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"reveal\"\n                ),\n\n                [sty.slotTargetLabelhighlighted]: hasVariant(\n                  variants,\n                  \"highlighted\",\n                  \"highlighted\"\n                ),\n\n                [sty.slotTargetLabelrevealed]: hasVariant(\n                  variants,\n                  \"revealed\",\n                  \"revealed\"\n                ),\n              }),\n            })\n          : null}\n        {(\n          triggers.focusVisibleWithin_root\n            ? true\n            : triggers.focusWithin_root\n            ? true\n            : triggers.hover_root &&\n              hasVariant(globalVariants, \"mode\", \"reveal\")\n            ? true\n            : triggers.hover_root\n            ? false\n            : hasVariant(variants, \"revealed\", \"revealed\")\n            ? true\n            : hasVariant(variants, \"highlighted\", \"highlighted\")\n            ? true\n            : hasVariant(globalVariants, \"mode\", \"reveal\")\n            ? true\n            : false\n        )\n          ? p.renderPlasmicSlot({\n              defaultContents: (\n                <WiggleArrowIcon\n                  className={classNames(projectcss.all, sty.svg__rm0Cy)}\n                  role={\"img\"}\n                />\n              ),\n\n              value: args.icon,\n              className: classNames(sty.slotTargetIcon, {\n                [sty.slotTargetIcon___focusVisibleWithin]:\n                  triggers.focusVisibleWithin_root,\n                [sty.slotTargetIconcolor_blue]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"blue\"\n                ),\n\n                [sty.slotTargetIconcolor_green]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"green\"\n                ),\n\n                [sty.slotTargetIconcolor_grey]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"grey\"\n                ),\n\n                [sty.slotTargetIconcolor_mint]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"mint\"\n                ),\n\n                [sty.slotTargetIconcolor_orange]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"orange\"\n                ),\n\n                [sty.slotTargetIconcolor_yellow]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"yellow\"\n                ),\n\n                [sty.slotTargetIconglobal_mode_reveal]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"reveal\"\n                ),\n\n                [sty.slotTargetIconhighlighted]: hasVariant(\n                  variants,\n                  \"highlighted\",\n                  \"highlighted\"\n                ),\n\n                [sty.slotTargetIconrevealed]: hasVariant(\n                  variants,\n                  \"revealed\",\n                  \"revealed\"\n                ),\n              }),\n            })\n          : null}\n      </p.Stack>\n    </div>\n  ) : null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"title\"],\n  title: [\"title\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicStripe__ArgProps,\n      internalVariantPropNames: PlasmicStripe__VariantProps,\n    })\n\n    return PlasmicStripe__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicStripe\"\n  } else {\n    func.displayName = `PlasmicStripe.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicStripe = Object.assign(\n  // Top-level PlasmicStripe renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    title: makeNodeComponent(\"title\"),\n    // Metadata about props expected for PlasmicStripe\n    internalVariantProps: PlasmicStripe__VariantProps,\n    internalArgProps: PlasmicStripe__ArgProps,\n  }\n)\n\nexport default PlasmicStripe\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicHeadlineButton-module--root--LFUOj\";\nexport var h1__mLmRw = \"PlasmicHeadlineButton-module--h1__mLmRw--7cXrp\";\nexport var h1global_mode_dark__mLmRwjYvh = \"PlasmicHeadlineButton-module--h1global_mode_dark__mLmRwjYvh--dr-xM\";\nexport var slotTargetWord = \"PlasmicHeadlineButton-module--slotTargetWord--ywVbD\";\nexport var slotTargetWordglobal_mode_dark = \"PlasmicHeadlineButton-module--slotTargetWordglobal_mode_dark--pAv80\";\nexport var __wab_text = \"PlasmicHeadlineButton-module--__wab_text--BuOnH\";\nexport var __wab_slotStringWrapper = \"PlasmicHeadlineButton-module--__wab_slot-string-wrapper--emheJ\";\nexport var __wab_slot = \"PlasmicHeadlineButton-module--__wab_slot--GfG3j\";\nexport var h1__pd88E = \"PlasmicHeadlineButton-module--h1__pd88E--anAyn\";\nexport var slotTargetSymbol = \"PlasmicHeadlineButton-module--slotTargetSymbol--K250U\";\nexport var slotTargetSymbolglobal_mode_dark = \"PlasmicHeadlineButton-module--slotTargetSymbolglobal_mode_dark--7J9QM\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: uHRDF-VO-A\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicHeadlineButton.module.css\" // plasmic-import: uHRDF-VO-A/css\n\nexport const PlasmicHeadlineButton__VariantProps = new Array()\n\nexport const PlasmicHeadlineButton__ArgProps = new Array(\n  \"word\",\n  \"symbol\",\n  \"label\",\n  \"color\"\n)\n\nfunction PlasmicHeadlineButton__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n  })\n\n  return (\n    <p.Stack\n      as={\"div\"}\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      hasGap={true}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.rootglobal_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n        }\n      )}\n      tabIndex={1}\n    >\n      <h1\n        className={classNames(projectcss.all, projectcss.h1, sty.h1__mLmRw, {\n          [sty.h1global_mode_dark__mLmRwjYvh]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n        })}\n      >\n        {p.renderPlasmicSlot({\n          defaultContents: \"word\",\n          value: args.word,\n          className: classNames(sty.slotTargetWord, {\n            [sty.slotTargetWordglobal_mode_dark]: hasVariant(\n              globalVariants,\n              \"mode\",\n              \"dark\"\n            ),\n          }),\n        })}\n      </h1>\n\n      <h1 className={classNames(projectcss.all, projectcss.h1, sty.h1__pd88E)}>\n        {p.renderPlasmicSlot({\n          defaultContents: \"*\",\n          value: args.symbol,\n          className: classNames(sty.slotTargetSymbol, {\n            [sty.slotTargetSymbolglobal_mode_dark]: hasVariant(\n              globalVariants,\n              \"mode\",\n              \"dark\"\n            ),\n          }),\n        })}\n      </h1>\n    </p.Stack>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicHeadlineButton__ArgProps,\n      internalVariantPropNames: PlasmicHeadlineButton__VariantProps,\n    })\n\n    return PlasmicHeadlineButton__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicHeadlineButton\"\n  } else {\n    func.displayName = `PlasmicHeadlineButton.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicHeadlineButton = Object.assign(\n  // Top-level PlasmicHeadlineButton renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    // Metadata about props expected for PlasmicHeadlineButton\n    internalVariantProps: PlasmicHeadlineButton__VariantProps,\n    internalArgProps: PlasmicHeadlineButton__ArgProps,\n  }\n)\n\nexport default PlasmicHeadlineButton\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { PlasmicHeadlineButton } from \"./plasmic/jeffdo_es/PlasmicHeadlineButton\"\nimport { useState } from \"react\";\nimport useTooltip from \"../hooks/useTooltip\";\n\nfunction HeadlineButton_(props, ref) {\n  const { color, label } = props;\n  const [isHovered, setIsHovered] = useState(false);\n  const tooltip = useTooltip(color, label, null);\n\n  return (\n    <>\n      { isHovered && tooltip }\n      <PlasmicHeadlineButton\n        root={{ ref }}\n        {...props}\n\n        onMouseOver={ () => setIsHovered(true) }\n        onMouseOut={ () => setIsHovered(false) }\n      />\n    </>\n  );\n}\n\nconst HeadlineButton = React.forwardRef(HeadlineButton_)\n\nexport default HeadlineButton\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { PlasmicStripe } from \"./plasmic/jeffdo_es/PlasmicStripe\";\nimport useTooltip from \"../hooks/useTooltip\";\nimport useMousePosition from \"../hooks/useMousePosition\";\nimport HeadlineButton from \"../components/HeadlineButton\";\n\nfunction Stripe_(props, ref) {\n  const {label, labelIsVisible, icon, category, color, mode, revealed, highlighted, ...rest} = props;\n  const [isHovered, setIsHovered] = useState(false);\n\n  const mousePosition = useMousePosition();\n\n  const labelStyles = {\n    position: \"absolute\",\n    display: \"flex\",\n    gap: \"1rem\",\n    alignItems: \"center\",\n    left: mousePosition.x - 32,\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n  };\n\n  const stripeLabel = (\n    <div style={labelStyles}>\n      { icon }\n      { label }\n    </div>\n  );\n\n  const tooltipLabel = labelIsVisible ? [icon, icon, label, icon, icon] : null;\n  // const content = <Preview variant={}/>;\n  const content = \"content coming soon\";\n  const tooltip = useTooltip(color, tooltipLabel, content);\n\n  return (\n    <>\n      { isHovered && tooltip }\n      <PlasmicStripe\n        root={{ ref }}\n        color={color}\n        icon={null}\n        category={category}\n        mode={mode}\n        highlighted={highlighted}\n        {...rest}\n        label={stripeLabel}\n        onMouseOver={ () => setIsHovered(true) }\n        onMouseOut={ () => setIsHovered(false) }\n        // onFocus={ () => showTooltip(\"nomouse\")}\n      />\n    </>\n  )\n}\n\nconst Stripe = React.forwardRef(Stripe_);\n\nexport default Stripe;\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicHeadline-module--root--+FOhO\";\nexport var headlineButton__xiaYn = \"PlasmicHeadline-module--headlineButton__xiaYn--7zs16\";\nexport var h1 = \"PlasmicHeadline-module--h1--H4unP\";\nexport var h1global_mode_dark = \"PlasmicHeadline-module--h1global_mode_dark--9wTPQ\";\nexport var textglobal_mode_dark = \"PlasmicHeadline-module--textglobal_mode_dark--Dj8Cy\";\nexport var headlineButton__b86Ep = \"PlasmicHeadline-module--headlineButton__b86Ep--GtGdy\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: KiN_FJLYI1\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport HeadlineButton from \"../../HeadlineButton\" // plasmic-import: uHRDF-VO-A/component\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicHeadline.module.css\" // plasmic-import: KiN_FJLYI1/css\n\nexport const PlasmicHeadline__VariantProps = new Array()\n\nexport const PlasmicHeadline__ArgProps = new Array(\"end\", \"first\")\n\nfunction PlasmicHeadline__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    screen: useScreenVariantsekypzdksLjd0F(),\n    mode: useMode(),\n  })\n\n  return (\n    <p.Stack\n      as={\"div\"}\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      hasGap={true}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n        }\n      )}\n      tabIndex={1}\n    >\n      {p.renderPlasmicSlot({\n        defaultContents: (\n          <HeadlineButton\n            className={classNames(\"__wab_instance\", sty.headlineButton__xiaYn)}\n            color={\"purple\"}\n            label={\"*about jeff\"}\n            word={\"Jeff\"}\n          />\n        ),\n\n        value: args.first,\n      })}\n\n      <h1\n        data-plasmic-name={\"h1\"}\n        data-plasmic-override={overrides.h1}\n        className={classNames(projectcss.all, projectcss.h1, sty.h1, {\n          [sty.h1global_mode_dark]: hasVariant(globalVariants, \"mode\", \"dark\"),\n        })}\n      >\n        <div\n          data-plasmic-name={\"text\"}\n          data-plasmic-override={overrides.text}\n          className={classNames(\n            projectcss.all,\n            projectcss.__wab_text,\n            sty.text,\n            {\n              [sty.textglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n            }\n          )}\n        >\n          {hasVariant(globalVariants, \"mode\", \"dark\") ? \"does\" : \"does\"}\n        </div>\n      </h1>\n\n      {p.renderPlasmicSlot({\n        defaultContents: (\n          <HeadlineButton\n            className={classNames(\"__wab_instance\", sty.headlineButton__b86Ep)}\n            color={\"purple\"}\n            label={\"†work samples\"}\n            symbol={\"†\"}\n            word={\"design\"}\n          />\n        ),\n\n        value: args.end,\n      })}\n    </p.Stack>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"h1\", \"text\"],\n  h1: [\"h1\", \"text\"],\n  text: [\"text\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicHeadline__ArgProps,\n      internalVariantPropNames: PlasmicHeadline__VariantProps,\n    })\n\n    return PlasmicHeadline__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicHeadline\"\n  } else {\n    func.displayName = `PlasmicHeadline.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicHeadline = Object.assign(\n  // Top-level PlasmicHeadline renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    h1: makeNodeComponent(\"h1\"),\n    text: makeNodeComponent(\"text\"),\n    // Metadata about props expected for PlasmicHeadline\n    internalVariantProps: PlasmicHeadline__VariantProps,\n    internalArgProps: PlasmicHeadline__ArgProps,\n  }\n)\n\nexport default PlasmicHeadline\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { PlasmicHeadline } from \"./plasmic/jeffdo_es/PlasmicHeadline\"\n\nfunction Headline_(props, ref) {\n\n  return (\n    <PlasmicHeadline\n      root={{ ref }}\n      {...props}\n    />\n  )\n}\n\nconst Headline = React.forwardRef(Headline_)\n\nexport default Headline\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicHomepage-module--root--piTGt\";\nexport var rootglobal_mode_dark = \"PlasmicHomepage-module--rootglobal_mode_dark--gDrQH\";\nexport var likeness = \"PlasmicHomepage-module--likeness--kjgie\";\nexport var svg__gvVi7 = \"PlasmicHomepage-module--svg__gvVi7--b1ybr\";\nexport var words = \"PlasmicHomepage-module--words--xbRgA\";\nexport var text__oP3Fs = \"PlasmicHomepage-module--text__oP3Fs---TVyO\";\nexport var svg__iok3E = \"PlasmicHomepage-module--svg__iok3E--SoAeQ\";\nexport var headline = \"PlasmicHomepage-module--headline--JnSyO\";\nexport var headlineglobal_mode_dark = \"PlasmicHomepage-module--headlineglobal_mode_dark--FdBUU\";\nexport var design = \"PlasmicHomepage-module--design--FmwK2\";\nexport var jeff = \"PlasmicHomepage-module--jeff--JRnZO\";\nexport var pwc = \"PlasmicHomepage-module--pwc--800+E\";\nexport var svg__laIzF = \"PlasmicHomepage-module--svg__laIzF--kg8yO\";\nexport var orglab = \"PlasmicHomepage-module--orglab--M45Wm\";\nexport var text__raQdW = \"PlasmicHomepage-module--text__raQdW--EtU0y\";\nexport var svg__ff02 = \"PlasmicHomepage-module--svg__ff02--GM5f-\";\nexport var learnin = \"PlasmicHomepage-module--learnin--aGch6\";\nexport var svg__ofC2X = \"PlasmicHomepage-module--svg__ofC2X--z5xmd\";\nexport var sprints = \"PlasmicHomepage-module--sprints--tbjRy\";\nexport var svg__hgkau = \"PlasmicHomepage-module--svg__hgkau--derWS\";\nexport var tracks = \"PlasmicHomepage-module--tracks--I94SR\";\nexport var svg__xhEae = \"PlasmicHomepage-module--svg__xhEae--1MBWO\";\nexport var freeBox = \"PlasmicHomepage-module--freeBox--kRCni\";\nexport var reveal = \"PlasmicHomepage-module--reveal--XQTzX\";\nexport var svg__tyr6 = \"PlasmicHomepage-module--svg__tyr6--czJdn\";\nexport var home = \"PlasmicHomepage-module--home--bY6JX\";\nexport var svg___1A3Bw = \"PlasmicHomepage-module--svg___1A3Bw--EM64l\";\nexport var svgglobal_mode_dark___1A3BwJYvh = \"PlasmicHomepage-module--svgglobal_mode_dark___1A3BwJYvh--aTbF4\";\nexport var svg___9Ekg = \"PlasmicHomepage-module--svg___9Ekg--ZCzw6\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function FaceIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M16 8A8 8 0 110 8a8 8 0 0116 0zm-5-2.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM3.5 7a1.5 1.5 0 100-3 1.5 1.5 0 000 3zM5 11.5L6.5 2h1.2l-1.2 8H8v1.5H5zm5-1.5h3.5c-.5 2-3 4-5.5 4 2-1.5 2.5-2.5 2-4z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default FaceIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function InfoIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M8 16A8 8 0 108 0a8 8 0 000 16zM9.6 4a1.6 1.6 0 11-3.2 0 1.6 1.6 0 013.2 0zM6.4 7.2h3.2s.4.8.4 1.6c0 .4-.3.8-.6 1.2-.3.4-.6.8-.6 1.2 0 .8.8 2.4.8 2.4H6.4s-.8-1.6-.8-2.4c0-.4.3-.8.6-1.2.3-.4.6-.8.6-1.2 0-.8-.4-1.6-.4-1.6z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default InfoIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function LearnaxIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M2.275 2.364A1 1 0 001 3.326v8.92a1 1 0 00.725.961L8 15l6.275-1.793a1 1 0 00.725-.961v-8.92a1 1 0 00-1.275-.962L8 4 2.275 2.364zm11.24 3.757a.5.5 0 10-.243-.97l-3.03.758a.5.5 0 00.243.97l3.03-.758zm-.97 2.2a.5.5 0 10-.243-.97l-2.06.515a.5.5 0 00.243.97l2.06-.515zm.97 1.558a.5.5 0 10-.243-.97l-3.03.757a.5.5 0 00.243.97l3.03-.757zm-10.5.485c.067-.268.606-.364.606-.364l2.06.515a.5.5 0 01-.242.97l-2.06-.515a.5.5 0 01-.364-.606zM2 5.698c.025.583.645 1.724 1.787 1.674-.037-.875.188-.903.188-.903.06-.031 1.694 1.504 1.936 1.813.1.13.15.262.193.378.06.162.108.29.266.332.27.073.845-.392.546-.608-.3-.216-2.416-2.144-2.531-2.371l.199-.315L3.912 5c-.42.568-1.26.669-1.912.698z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default LearnaxIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function LocationIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M10.664 8.634c.69-1.156 1.086-1.82 1.086-2.884a3.75 3.75 0 10-7.5 0c0 1.064.396 1.728 1.086 2.884C5.99 9.73 6.906 11.265 8 14c1.094-2.735 2.01-4.271 2.664-5.366zM8 8a2 2 0 100-4 2 2 0 000 4z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default LocationIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: ZgtgOwq6J5gf\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport Stripe from \"../../Stripe\" // plasmic-import: JaZPnDe4BQ/component\nimport Headline from \"../../Headline\" // plasmic-import: KiN_FJLYI1/component\nimport HeadlineButton from \"../../HeadlineButton\" // plasmic-import: uHRDF-VO-A/component\nimport IconButton from \"../../IconButton\" // plasmic-import: mEnM6zW3GD/component\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport { useHighlight } from \"./PlasmicGlobalVariant__Highlight\" // plasmic-import: ntiwPmQAsH/globalVariant\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicHomepage.module.css\" // plasmic-import: ZgtgOwq6J5gf/css\nimport FaceIcon from \"./icons/PlasmicIcon__Face\" // plasmic-import: BZoH_3Sy18/icon\nimport InfoIcon from \"./icons/PlasmicIcon__Info\" // plasmic-import: 5Sy2g4y6V/icon\nimport WiggleArrowIcon from \"./icons/PlasmicIcon__WiggleArrow\" // plasmic-import: iZuEl1jiaD/icon\nimport LearnaxIcon from \"./icons/PlasmicIcon__Learnax\" // plasmic-import: PH_4kYBwV/icon\nimport LocationIcon from \"./icons/PlasmicIcon__Location\" // plasmic-import: DCl8WunXZe/icon\nimport EyeOpenIcon from \"./icons/PlasmicIcon__EyeOpen\" // plasmic-import: J7fJnmL4N/icon\nimport EyeClosedIcon from \"./icons/PlasmicIcon__EyeClosed\" // plasmic-import: aBAB-JPNq/icon\nimport JwSharpIcon from \"./icons/PlasmicIcon__JwSharp\" // plasmic-import: imnHY-_8sU/icon\nimport NightIcon from \"./icons/PlasmicIcon__Night\" // plasmic-import: nS7MqAdlwl/icon\nimport DayIcon from \"./icons/PlasmicIcon__Day\" // plasmic-import: 2cwRWiCxc/icon\n\nexport const PlasmicHomepage__VariantProps = new Array()\n\nexport const PlasmicHomepage__ArgProps = new Array(\"path\")\n\nfunction PlasmicHomepage__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n    highlight: useHighlight(),\n    screen: useScreenVariantsekypzdksLjd0F(),\n  })\n\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          hasGap={true}\n          className={classNames(\n            projectcss.all,\n            projectcss.root_reset,\n            projectcss.plasmic_default_styles,\n            projectcss.plasmic_tokens,\n            sty.root,\n            {\n              [projectcss.global_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.rootglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.rootglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.rootglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.rootglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            }\n          )}\n        >\n          <Stripe\n            data-plasmic-name={\"likeness\"}\n            data-plasmic-override={overrides.likeness}\n            category={\"about\"}\n            className={classNames(\"__wab_instance\", sty.likeness, {\n              [sty.likenessglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.likenessglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.likenessglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.likenessglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\n              hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                ? \"mint\"\n                : \"mint\"\n            }\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            icon={\n              <FaceIcon\n                className={classNames(projectcss.all, sty.svg__gvVi7)}\n                role={\"img\"}\n              />\n            }\n            label={\"a likeness\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            name={\"likeness\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"words\"}\n            data-plasmic-override={overrides.words}\n            category={\"about\"}\n            className={classNames(\"__wab_instance\", sty.words, {\n              [sty.wordsglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.wordsglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.wordsglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.wordsglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"yellow\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            icon={\n              <InfoIcon\n                className={classNames(projectcss.all, sty.svg__iok3E)}\n                role={\"img\"}\n              />\n            }\n            label={\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__oP3Fs,\n                  {\n                    [sty.textglobal_mode_reveal__oP3FSv94Jk]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"reveal\"\n                    ),\n                  }\n                )}\n              >\n                {\"some words\"}\n              </div>\n            }\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            name={\"words\"}\n          />\n\n          <Headline\n            data-plasmic-name={\"headline\"}\n            data-plasmic-override={overrides.headline}\n            className={classNames(\"__wab_instance\", sty.headline, {\n              [sty.headlineglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.headlineglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.headlineglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            end={\n              <HeadlineButton\n                data-plasmic-name={\"design\"}\n                data-plasmic-override={overrides.design}\n                className={classNames(\"__wab_instance\", sty.design, {\n                  [sty.designglobal_highlight_about]: hasVariant(\n                    globalVariants,\n                    \"highlight\",\n                    \"about\"\n                  ),\n\n                  [sty.designglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                color={\n                  hasVariant(globalVariants, \"mode\", \"reveal\")\n                    ? \"purple\"\n                    : \"purple\"\n                }\n                label={\n                  hasVariant(globalVariants, \"mode\", \"reveal\")\n                    ? \"†work samples\"\n                    : \"† case studies\"\n                }\n                symbol={\"†\"}\n                word={\"design\"}\n              />\n            }\n            first={\n              <HeadlineButton\n                data-plasmic-name={\"jeff\"}\n                data-plasmic-override={overrides.jeff}\n                className={classNames(\"__wab_instance\", sty.jeff, {\n                  [sty.jeffglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                color={\n                  hasVariant(globalVariants, \"mode\", \"reveal\")\n                    ? \"mint\"\n                    : \"purple\"\n                }\n                label={\n                  hasVariant(globalVariants, \"mode\", \"reveal\")\n                    ? \"*about jeff\"\n                    : \"* about jeff\"\n                }\n                word={\"Jeff\"}\n              />\n            }\n          />\n\n          <Stripe\n            data-plasmic-name={\"pwc\"}\n            data-plasmic-override={overrides.pwc}\n            category={\"work\"}\n            className={classNames(\"__wab_instance\", sty.pwc, {\n              [sty.pwcglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.pwcglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.pwcglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"orange\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            icon={\n              <WiggleArrowIcon\n                className={classNames(projectcss.all, sty.svg__laIzF)}\n                role={\"img\"}\n              />\n            }\n            label={\"navigating brands\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            name={\"pwc\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"orglab\"}\n            data-plasmic-override={overrides.orglab}\n            category={\"work\"}\n            className={classNames(\"__wab_instance\", sty.orglab, {\n              [sty.orglabglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.orglabglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.orglabglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"blue\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            icon={\n              <WiggleArrowIcon\n                className={classNames(projectcss.all, sty.svg__ff02)}\n                role={\"img\"}\n              />\n            }\n            label={\n              true ? (\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__raQdW\n                  )}\n                >\n                  {\"transforming organizations\"}\n                </div>\n              ) : null\n            }\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            name={\"orglab\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"learnin\"}\n            data-plasmic-override={overrides.learnin}\n            category={\"about\"}\n            className={classNames(\"__wab_instance\", sty.learnin, {\n              [sty.learninglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.learninglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.learninglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"purple\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            icon={\n              <LearnaxIcon\n                className={classNames(projectcss.all, sty.svg__ofC2X)}\n                role={\"img\"}\n              />\n            }\n            label={\"tools and learnins\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            name={\"learnin\"}\n            revealed={\n              hasVariant(globalVariants, \"mode\", \"reveal\") ? true : undefined\n            }\n          />\n\n          <Stripe\n            data-plasmic-name={\"sprints\"}\n            data-plasmic-override={overrides.sprints}\n            category={\"work\"}\n            className={classNames(\"__wab_instance\", sty.sprints, {\n              [sty.sprintsglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.sprintsglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.sprintsglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"grey\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            icon={\n              <WiggleArrowIcon\n                className={classNames(projectcss.all, sty.svg__hgkau)}\n                role={\"img\"}\n              />\n            }\n            label={\"facilitating workshops\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            name={\"sprints\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"tracks\"}\n            data-plasmic-override={overrides.tracks}\n            category={\"about\"}\n            className={classNames(\"__wab_instance\", sty.tracks, {\n              [sty.tracksglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.tracksglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.tracksglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"red\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            icon={\n              <LocationIcon\n                className={classNames(projectcss.all, sty.svg__xhEae)}\n                role={\"img\"}\n              />\n            }\n            label={\"leaving tracks\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            name={\"tracks\"}\n          />\n\n          {true ? (\n            <div\n              data-plasmic-name={\"freeBox\"}\n              data-plasmic-override={overrides.freeBox}\n              className={classNames(projectcss.all, sty.freeBox, {\n                [sty.freeBoxglobal_mode_dark]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"dark\"\n                ),\n              })}\n            >\n              <IconButton\n                data-plasmic-name={\"reveal\"}\n                data-plasmic-override={overrides.reveal}\n                className={classNames(\"__wab_instance\", sty.reveal, {\n                  [sty.revealglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                icon={\n                  <p.PlasmicIcon\n                    PlasmicIconType={\n                      hasVariant(globalVariants, \"mode\", \"reveal\")\n                        ? EyeClosedIcon\n                        : EyeOpenIcon\n                    }\n                    className={classNames(projectcss.all, sty.svg__tyr6, {\n                      [sty.svgglobal_mode_reveal__tyr6V94Jk]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"reveal\"\n                      ),\n                    })}\n                    cursor={\"pointer\"}\n                    role={\"img\"}\n                  />\n                }\n                label={\n                  hasVariant(globalVariants, \"mode\", \"reveal\")\n                    ? \"hide labels\"\n                    : \"reveal labels\"\n                }\n              />\n\n              <p.PlasmicLink\n                data-plasmic-name={\"home\"}\n                data-plasmic-override={overrides.home}\n                className={classNames(projectcss.all, projectcss.a, sty.home, {\n                  [sty.homeglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.homeglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                component={Link}\n                href={args.path !== undefined ? args.path : \"/design\"}\n                id={\"logo\"}\n                platform={\"gatsby\"}\n                title={\"jeff wade\"}\n              >\n                <IconButton\n                  data-plasmic-name={\"logo\"}\n                  data-plasmic-override={overrides.logo}\n                  className={classNames(\"__wab_instance\", sty.logo, {\n                    [sty.logoglobal_mode_dark]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"dark\"\n                    ),\n\n                    [sty.logoglobal_mode_reveal]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"reveal\"\n                    ),\n                  })}\n                  icon={\n                    <p.PlasmicIcon\n                      PlasmicIconType={\n                        hasVariant(globalVariants, \"mode\", \"dark\")\n                          ? JwSharpIcon\n                          : JwSharpIcon\n                      }\n                      className={classNames(projectcss.all, sty.svg___1A3Bw, {\n                        [sty.svgglobal_mode_dark___1A3BwJYvh]: hasVariant(\n                          globalVariants,\n                          \"mode\",\n                          \"dark\"\n                        ),\n\n                        [sty.svgglobal_mode_reveal___1A3Bwv94Jk]: hasVariant(\n                          globalVariants,\n                          \"mode\",\n                          \"reveal\"\n                        ),\n                      })}\n                      role={\"img\"}\n                    />\n                  }\n                  label={\"jeff wade\"}\n                />\n              </p.PlasmicLink>\n\n              <IconButton\n                data-plasmic-name={\"darkmode\"}\n                data-plasmic-override={overrides.darkmode}\n                className={classNames(\"__wab_instance\", sty.darkmode, {\n                  [sty.darkmodeglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.darkmodeglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                icon={\n                  <p.PlasmicIcon\n                    PlasmicIconType={\n                      hasVariant(globalVariants, \"mode\", \"dark\")\n                        ? DayIcon\n                        : NightIcon\n                    }\n                    className={classNames(projectcss.all, sty.svg___9Ekg, {\n                      [sty.svgglobal_mode_dark___9EkgJYvh]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"dark\"\n                      ),\n\n                      [sty.svgglobal_mode_reveal___9Ekgv94Jk]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"reveal\"\n                      ),\n                    })}\n                    cursor={\"pointer\"}\n                    role={\"img\"}\n                  />\n                }\n                label={\n                  hasVariant(globalVariants, \"mode\", \"dark\")\n                    ? \"disable darkmode\"\n                    : \"enable darkmode\"\n                }\n              />\n            </div>\n          ) : null}\n        </p.Stack>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\n    \"root\",\n    \"likeness\",\n    \"words\",\n    \"headline\",\n    \"design\",\n    \"jeff\",\n    \"pwc\",\n    \"orglab\",\n    \"learnin\",\n    \"sprints\",\n    \"tracks\",\n    \"freeBox\",\n    \"reveal\",\n    \"home\",\n    \"logo\",\n    \"darkmode\",\n  ],\n\n  likeness: [\"likeness\"],\n  words: [\"words\"],\n  headline: [\"headline\", \"design\", \"jeff\"],\n  design: [\"design\"],\n  jeff: [\"jeff\"],\n  pwc: [\"pwc\"],\n  orglab: [\"orglab\"],\n  learnin: [\"learnin\"],\n  sprints: [\"sprints\"],\n  tracks: [\"tracks\"],\n  freeBox: [\"freeBox\", \"reveal\", \"home\", \"logo\", \"darkmode\"],\n  reveal: [\"reveal\"],\n  home: [\"home\", \"logo\"],\n  logo: [\"logo\"],\n  darkmode: [\"darkmode\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicHomepage__ArgProps,\n      internalVariantPropNames: PlasmicHomepage__VariantProps,\n    })\n\n    return PlasmicHomepage__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicHomepage\"\n  } else {\n    func.displayName = `PlasmicHomepage.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicHomepage = Object.assign(\n  // Top-level PlasmicHomepage renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    likeness: makeNodeComponent(\"likeness\"),\n    words: makeNodeComponent(\"words\"),\n    headline: makeNodeComponent(\"headline\"),\n    design: makeNodeComponent(\"design\"),\n    jeff: makeNodeComponent(\"jeff\"),\n    pwc: makeNodeComponent(\"pwc\"),\n    orglab: makeNodeComponent(\"orglab\"),\n    learnin: makeNodeComponent(\"learnin\"),\n    sprints: makeNodeComponent(\"sprints\"),\n    tracks: makeNodeComponent(\"tracks\"),\n    freeBox: makeNodeComponent(\"freeBox\"),\n    reveal: makeNodeComponent(\"reveal\"),\n    home: makeNodeComponent(\"home\"),\n    logo: makeNodeComponent(\"logo\"),\n    darkmode: makeNodeComponent(\"darkmode\"),\n    // Metadata about props expected for PlasmicHomepage\n    internalVariantProps: PlasmicHomepage__VariantProps,\n    internalArgProps: PlasmicHomepage__ArgProps,\n  }\n)\n\nexport default PlasmicHomepage\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { useState } from 'react';\n\nimport { ModeContext } from \"../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Mode\"\nimport { HighlightContext } from \"../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Highlight\"\n\nimport { PlasmicHomepage } from \"../components/plasmic/jeffdo_es/PlasmicHomepage\"\n\nfunction Homepage() {\n  const [mode, setMode] = useState([]);\n  const [showLabel, setShowLabel] = useState(true);\n  const [highlight, setHighlight] = useState(undefined);\n\n  const toggleDarkMode = () => {\n    const newMode = [...mode];\n    if ( newMode.includes(\"dark\") ) {\n      newMode.shift();\n    } else {\n       newMode.unshift(\"dark\");\n    }\n    setMode(newMode);\n  };\n\n  const toggleHighlight = (cat) => {\n    switch (cat) {\n      case \"about\":\n        setHighlight(\"about\");\n        break;\n      case \"work\":\n        setHighlight(\"work\");\n        break;\n      default:\n        setHighlight(undefined);\n    }\n  };\n\n  const toggleReveal = () => {\n    const newMode = [...mode];\n    if ( newMode.includes(\"reveal\") ) {\n      newMode.pop();\n      setShowLabel(true);\n    } else {\n      newMode.push(\"reveal\");\n      setShowLabel(false);\n    }\n    setMode(newMode);\n  };\n\n  return (\n    <ModeContext.Provider value={mode}>\n      <HighlightContext.Provider value={highlight}>\n        <PlasmicHomepage \n          jeff={{\n            onFocus: () => toggleHighlight(\"about\"),\n            onBlur: () => toggleHighlight(),\n          }}\n          design={{\n            onFocus: () => toggleHighlight(\"work\"),\n            onBlur: () => toggleHighlight(),\n          }}\n\n          reveal={{\n            onClick: () => toggleReveal(),\n          }}\n          darkmode={{\n            onClick: () => toggleDarkMode(),\n          }}\n\n          likeness={{\n            labelIsVisible: showLabel,\n          }}\n          words={{\n            labelIsVisible: showLabel,\n          }}\n          pwc={{\n            labelIsVisible: showLabel,\n          }}\n          orglab={{\n            labelIsVisible: showLabel,\n          }}\n          learnin={{\n            labelIsVisible: showLabel,\n          }}\n          sprints={{\n            labelIsVisible: showLabel,\n          }}\n          tracks={{\n            labelIsVisible: showLabel,\n          }}\n        />\n      </HighlightContext.Provider>\n    </ModeContext.Provider>\n  )\n}\n\nexport default Homepage\n"],"names":["root","roothighlighted","rootlowlighted","root___focusVisibleWithin","title","titlecolor_grey","titlelowlighted","titlecolor_red","titlecolor_orange","titlecolor_yellow","titlecolor_green","titlecolor_mint","titlecolor_blue","titlecolor_purple","title___focusVisibleWithin","slotTargetLabel","slotTargetLabelcolor_grey","slotTargetLabelcolor_orange","slotTargetLabelcolor_yellow","slotTargetLabelcolor_green","slotTargetLabelcolor_mint","slotTargetLabel___focusVisibleWithin","slotTargetIcon","slotTargetIconcolor_grey","slotTargetIconcolor_orange","slotTargetIconcolor_yellow","slotTargetIconcolor_green","slotTargetIconcolor_mint","slotTargetIcon___focusVisibleWithin","svg__rm0Cy","props","className","style","restProps","xmlns","fill","viewBox","height","width","classNames","d","PlasmicStripe__VariantProps","Array","PlasmicStripe__ArgProps","PlasmicDescendants","makeNodeComponent","nodeName","func","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","args","overrides","forNode","useTrigger","isTextInput","isRootFocusVisibleWithin","triggerRootFocusVisibleWithinProps","isRootHover","triggerRootHoverProps","isRootFocusWithin","triggerRootFocusWithinProps","triggers","focusVisibleWithin_root","hover_root","focusWithin_root","globalVariants","ensureGlobalVariants","mode","useMode","projectcss","sty","hasVariant","tabIndex","as","hasGap","p","defaultContents","value","label","role","icon","PlasmicStripe__RenderFunc","displayName","PlasmicStripe","Object","assign","internalVariantProps","internalArgProps","h1__mLmRw","h1global_mode_dark__mLmRwjYvh","slotTargetWord","slotTargetWordglobal_mode_dark","h1__pd88E","slotTargetSymbol","slotTargetSymbolglobal_mode_dark","PlasmicHeadlineButton__VariantProps","PlasmicHeadlineButton__ArgProps","PlasmicHeadlineButton","word","symbol","PlasmicHeadlineButton__RenderFunc","HeadlineButton_","ref","color","useState","isHovered","setIsHovered","tooltip","useTooltip","onMouseOver","onMouseOut","React","Stripe_","labelIsVisible","category","highlighted","revealed","rest","labelStyles","position","display","gap","alignItems","left","useMousePosition","x","overflow","whiteSpace","stripeLabel","tooltipLabel","headlineButton__xiaYn","h1","h1global_mode_dark","textglobal_mode_dark","headlineButton__b86Ep","PlasmicHeadline__VariantProps","PlasmicHeadline__ArgProps","text","screen","useScreenVariantsekypzdksLjd0F","first","end","PlasmicHeadline__RenderFunc","PlasmicHeadline","Headline_","rootglobal_mode_dark","likeness","svg__gvVi7","words","text__oP3Fs","svg__iok3E","headline","headlineglobal_mode_dark","design","jeff","pwc","svg__laIzF","orglab","text__raQdW","svg__ff02","learnin","svg__ofC2X","sprints","svg__hgkau","tracks","svg__xhEae","freeBox","reveal","svg__tyr6","home","svg___1A3Bw","svgglobal_mode_dark___1A3BwJYvh","svg___9Ekg","fillRule","clipRule","PlasmicHomepage__VariantProps","PlasmicHomepage__ArgProps","logo","darkmode","highlight","useHighlight","undefined","lowlighted","IconButton","PlasmicIconType","EyeClosedIcon","EyeOpenIcon","cursor","component","Link","href","path","id","platform","JwSharpIcon","DayIcon","NightIcon","PlasmicHomepage__RenderFunc","PlasmicHomepage","setMode","showLabel","setShowLabel","setHighlight","toggleHighlight","cat","onFocus","onBlur","onClick","newMode","includes","pop","push","shift","unshift"],"sourceRoot":""}