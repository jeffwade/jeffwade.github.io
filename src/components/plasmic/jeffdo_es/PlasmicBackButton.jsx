// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ
// Component: 6NgyzpZAz-
import * as React from "react"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import { useMode } from "./PlasmicGlobalVariant__Mode" // plasmic-import: zulsK3o-3W/globalVariant
import { useScreenVariants as useScreenVariantsekypzdksLjd0F } from "./PlasmicGlobalVariant__Screen" // plasmic-import: EKYPZDKSLjd0F/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_jeffdo_es.module.css" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss
import * as sty from "./PlasmicBackButton.module.css" // plasmic-import: 6NgyzpZAz-/css
import ArrowLeftIcon from "./icons/PlasmicIcon__ArrowLeft" // plasmic-import: GP0PpNpUV/icon

export const PlasmicBackButton__VariantProps = new Array()

export const PlasmicBackButton__ArgProps = new Array()

function PlasmicBackButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariantsekypzdksLjd0F(),
  })

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        "txt-button",
        {
          [projectcss.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),

          [projectcss.global_mode_reveal]: hasVariant(
            globalVariants,
            "mode",
            "reveal"
          ),
        }
      )}
      disabled={false}
      id={"back-button"}
      role={""}
      title={"back to case studies"}
    >
      <ArrowLeftIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"case studies"}
      </div>
    </button>
  )
}

const PlasmicDescendants = {
  root: ["root", "svg", "text"],
  svg: ["svg"],
  text: ["text"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBackButton__ArgProps,
      internalVariantPropNames: PlasmicBackButton__VariantProps,
    })

    return PlasmicBackButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicBackButton"
  } else {
    func.displayName = `PlasmicBackButton.${nodeName}`
  }
  return func
}

export const PlasmicBackButton = Object.assign(
  // Top-level PlasmicBackButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicBackButton
    internalVariantProps: PlasmicBackButton__VariantProps,
    internalArgProps: PlasmicBackButton__ArgProps,
  }
)

export default PlasmicBackButton
/* prettier-ignore-end */
