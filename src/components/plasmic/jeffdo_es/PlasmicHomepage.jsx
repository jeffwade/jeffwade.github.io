// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ
// Component: ZgtgOwq6J5gf
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Stripe from "../../Stripe" // plasmic-import: JaZPnDe4BQ/component
import Headline from "../../Headline" // plasmic-import: KiN_FJLYI1/component
import HeadlineButton from "../../HeadlineButton" // plasmic-import: uHRDF-VO-A/component
import IconButton from "../../IconButton" // plasmic-import: mEnM6zW3GD/component
import { useMode } from "./PlasmicGlobalVariant__Mode" // plasmic-import: zulsK3o-3W/globalVariant
import { useHighlight } from "./PlasmicGlobalVariant__Highlight" // plasmic-import: ntiwPmQAsH/globalVariant
import { useScreenVariants as useScreenVariantsekypzdksLjd0F } from "./PlasmicGlobalVariant__Screen" // plasmic-import: EKYPZDKSLjd0F/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_jeffdo_es.module.css" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss
import * as sty from "./PlasmicHomepage.module.css" // plasmic-import: ZgtgOwq6J5gf/css
import FaceIcon from "./icons/PlasmicIcon__Face" // plasmic-import: BZoH_3Sy18/icon
import InfoIcon from "./icons/PlasmicIcon__Info" // plasmic-import: 5Sy2g4y6V/icon
import WiggleArrowIcon from "./icons/PlasmicIcon__WiggleArrow" // plasmic-import: iZuEl1jiaD/icon
import LearnaxIcon from "./icons/PlasmicIcon__Learnax" // plasmic-import: PH_4kYBwV/icon
import LocationIcon from "./icons/PlasmicIcon__Location" // plasmic-import: DCl8WunXZe/icon
import EyeOpenIcon from "./icons/PlasmicIcon__EyeOpen" // plasmic-import: J7fJnmL4N/icon
import EyeClosedIcon from "./icons/PlasmicIcon__EyeClosed" // plasmic-import: aBAB-JPNq/icon
import JwSharpIcon from "./icons/PlasmicIcon__JwSharp" // plasmic-import: imnHY-_8sU/icon
import NightIcon from "./icons/PlasmicIcon__Night" // plasmic-import: nS7MqAdlwl/icon
import DayIcon from "./icons/PlasmicIcon__Day" // plasmic-import: 2cwRWiCxc/icon

export const PlasmicHomepage__VariantProps = new Array()

export const PlasmicHomepage__ArgProps = new Array("path")

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    highlight: useHighlight(),
    screen: useScreenVariantsekypzdksLjd0F(),
  })

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [projectcss.global_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),

              [sty.rootglobal_highlight_about]: hasVariant(
                globalVariants,
                "highlight",
                "about"
              ),

              [sty.rootglobal_highlight_work]: hasVariant(
                globalVariants,
                "highlight",
                "work"
              ),

              [sty.rootglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),

              [sty.rootglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            }
          )}
        >
          <Stripe
            data-plasmic-name={"likeness"}
            data-plasmic-override={overrides.likeness}
            category={"about"}
            className={classNames("__wab_instance", sty.likeness, {
              [sty.likenessglobal_highlight_about]: hasVariant(
                globalVariants,
                "highlight",
                "about"
              ),

              [sty.likenessglobal_highlight_work]: hasVariant(
                globalVariants,
                "highlight",
                "work"
              ),

              [sty.likenessglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),

              [sty.likenessglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            })}
            color={
              hasVariant(globalVariants, "screen", "desktopOnly")
                ? "mint"
                : "mint"
            }
            highlighted={
              hasVariant(globalVariants, "highlight", "about")
                ? true
                : undefined
            }
            icon={
              <FaceIcon
                className={classNames(projectcss.all, sty.svg__gvVi7)}
                role={"img"}
              />
            }
            label={"a likeness"}
            lowlighted={
              hasVariant(globalVariants, "highlight", "work") ? true : undefined
            }
            name={"likeness"}
          />

          <Stripe
            data-plasmic-name={"words"}
            data-plasmic-override={overrides.words}
            category={"about"}
            className={classNames("__wab_instance", sty.words, {
              [sty.wordsglobal_highlight_about]: hasVariant(
                globalVariants,
                "highlight",
                "about"
              ),

              [sty.wordsglobal_highlight_work]: hasVariant(
                globalVariants,
                "highlight",
                "work"
              ),

              [sty.wordsglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),

              [sty.wordsglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            })}
            color={"yellow"}
            highlighted={
              hasVariant(globalVariants, "highlight", "about")
                ? true
                : undefined
            }
            icon={
              <InfoIcon
                className={classNames(projectcss.all, sty.svg__iok3E)}
                role={"img"}
              />
            }
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oP3Fs,
                  {
                    [sty.textglobal_mode_reveal__oP3FSv94Jk]: hasVariant(
                      globalVariants,
                      "mode",
                      "reveal"
                    ),
                  }
                )}
              >
                {"some words"}
              </div>
            }
            lowlighted={
              hasVariant(globalVariants, "highlight", "work") ? true : undefined
            }
            name={"words"}
          />

          <Headline
            data-plasmic-name={"headline"}
            data-plasmic-override={overrides.headline}
            className={classNames("__wab_instance", sty.headline, {
              [sty.headlineglobal_highlight_about]: hasVariant(
                globalVariants,
                "highlight",
                "about"
              ),

              [sty.headlineglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),

              [sty.headlineglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            })}
            end={
              <HeadlineButton
                data-plasmic-name={"design"}
                data-plasmic-override={overrides.design}
                className={classNames("__wab_instance", sty.design, {
                  [sty.designglobal_highlight_about]: hasVariant(
                    globalVariants,
                    "highlight",
                    "about"
                  ),

                  [sty.designglobal_mode_reveal]: hasVariant(
                    globalVariants,
                    "mode",
                    "reveal"
                  ),
                })}
                color={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "purple"
                    : "purple"
                }
                label={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "†work samples"
                    : "† case studies"
                }
                symbol={"†"}
                word={"design"}
              />
            }
            first={
              <HeadlineButton
                data-plasmic-name={"jeff"}
                data-plasmic-override={overrides.jeff}
                className={classNames("__wab_instance", sty.jeff, {
                  [sty.jeffglobal_mode_reveal]: hasVariant(
                    globalVariants,
                    "mode",
                    "reveal"
                  ),
                })}
                color={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "mint"
                    : "purple"
                }
                label={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "*about jeff"
                    : "* about jeff"
                }
                word={"Jeff"}
              />
            }
          />

          <Stripe
            data-plasmic-name={"pwc"}
            data-plasmic-override={overrides.pwc}
            category={"work"}
            className={classNames("__wab_instance", sty.pwc, {
              [sty.pwcglobal_highlight_about]: hasVariant(
                globalVariants,
                "highlight",
                "about"
              ),

              [sty.pwcglobal_highlight_work]: hasVariant(
                globalVariants,
                "highlight",
                "work"
              ),

              [sty.pwcglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            })}
            color={"orange"}
            highlighted={
              hasVariant(globalVariants, "highlight", "work") ? true : undefined
            }
            icon={
              <WiggleArrowIcon
                className={classNames(projectcss.all, sty.svg__laIzF)}
                role={"img"}
              />
            }
            label={"navigating brands"}
            lowlighted={
              hasVariant(globalVariants, "highlight", "about")
                ? true
                : undefined
            }
            name={"pwc"}
          />

          <Stripe
            data-plasmic-name={"orglab"}
            data-plasmic-override={overrides.orglab}
            category={"work"}
            className={classNames("__wab_instance", sty.orglab, {
              [sty.orglabglobal_highlight_about]: hasVariant(
                globalVariants,
                "highlight",
                "about"
              ),

              [sty.orglabglobal_highlight_work]: hasVariant(
                globalVariants,
                "highlight",
                "work"
              ),

              [sty.orglabglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            })}
            color={"blue"}
            highlighted={
              hasVariant(globalVariants, "highlight", "work") ? true : undefined
            }
            icon={
              <WiggleArrowIcon
                className={classNames(projectcss.all, sty.svg__ff02)}
                role={"img"}
              />
            }
            label={
              true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__raQdW
                  )}
                >
                  {"transforming organizations"}
                </div>
              ) : null
            }
            lowlighted={
              hasVariant(globalVariants, "highlight", "about")
                ? true
                : undefined
            }
            name={"orglab"}
          />

          <Stripe
            data-plasmic-name={"learnin"}
            data-plasmic-override={overrides.learnin}
            category={"about"}
            className={classNames("__wab_instance", sty.learnin, {
              [sty.learninglobal_highlight_about]: hasVariant(
                globalVariants,
                "highlight",
                "about"
              ),

              [sty.learninglobal_highlight_work]: hasVariant(
                globalVariants,
                "highlight",
                "work"
              ),

              [sty.learninglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            })}
            color={"purple"}
            highlighted={
              hasVariant(globalVariants, "highlight", "about")
                ? true
                : undefined
            }
            icon={
              <LearnaxIcon
                className={classNames(projectcss.all, sty.svg__ofC2X)}
                role={"img"}
              />
            }
            label={"tools and learnins"}
            lowlighted={
              hasVariant(globalVariants, "highlight", "work") ? true : undefined
            }
            name={"learnin"}
            revealed={
              hasVariant(globalVariants, "mode", "reveal") ? true : undefined
            }
          />

          <Stripe
            data-plasmic-name={"sprints"}
            data-plasmic-override={overrides.sprints}
            category={"work"}
            className={classNames("__wab_instance", sty.sprints, {
              [sty.sprintsglobal_highlight_about]: hasVariant(
                globalVariants,
                "highlight",
                "about"
              ),

              [sty.sprintsglobal_highlight_work]: hasVariant(
                globalVariants,
                "highlight",
                "work"
              ),

              [sty.sprintsglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            })}
            color={"grey"}
            highlighted={
              hasVariant(globalVariants, "highlight", "work") ? true : undefined
            }
            icon={
              <WiggleArrowIcon
                className={classNames(projectcss.all, sty.svg__hgkau)}
                role={"img"}
              />
            }
            label={"facilitating workshops"}
            lowlighted={
              hasVariant(globalVariants, "highlight", "about")
                ? true
                : undefined
            }
            name={"sprints"}
          />

          <Stripe
            data-plasmic-name={"tracks"}
            data-plasmic-override={overrides.tracks}
            category={"about"}
            className={classNames("__wab_instance", sty.tracks, {
              [sty.tracksglobal_highlight_about]: hasVariant(
                globalVariants,
                "highlight",
                "about"
              ),

              [sty.tracksglobal_highlight_work]: hasVariant(
                globalVariants,
                "highlight",
                "work"
              ),

              [sty.tracksglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            })}
            color={"red"}
            highlighted={
              hasVariant(globalVariants, "highlight", "about")
                ? true
                : undefined
            }
            icon={
              <LocationIcon
                className={classNames(projectcss.all, sty.svg__xhEae)}
                role={"img"}
              />
            }
            label={"leaving tracks"}
            lowlighted={
              hasVariant(globalVariants, "highlight", "work") ? true : undefined
            }
            name={"tracks"}
          />

          {true ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox, {
                [sty.freeBoxglobal_mode_dark]: hasVariant(
                  globalVariants,
                  "mode",
                  "dark"
                ),
              })}
            >
              <IconButton
                data-plasmic-name={"reveal"}
                data-plasmic-override={overrides.reveal}
                className={classNames("__wab_instance", sty.reveal, {
                  [sty.revealglobal_mode_reveal]: hasVariant(
                    globalVariants,
                    "mode",
                    "reveal"
                  ),
                })}
                icon={
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(globalVariants, "mode", "reveal")
                        ? EyeClosedIcon
                        : EyeOpenIcon
                    }
                    className={classNames(projectcss.all, sty.svg__tyr6, {
                      [sty.svgglobal_mode_reveal__tyr6V94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                    cursor={"pointer"}
                    role={"img"}
                  />
                }
                label={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "hide labels"
                    : "reveal labels"
                }
              />

              <p.PlasmicLink
                data-plasmic-name={"home"}
                data-plasmic-override={overrides.home}
                className={classNames(projectcss.all, projectcss.a, sty.home, {
                  [sty.homeglobal_mode_dark]: hasVariant(
                    globalVariants,
                    "mode",
                    "dark"
                  ),

                  [sty.homeglobal_mode_reveal]: hasVariant(
                    globalVariants,
                    "mode",
                    "reveal"
                  ),
                })}
                component={Link}
                href={args.path !== undefined ? args.path : "/design"}
                id={"logo"}
                platform={"gatsby"}
                title={"jeff wade"}
              >
                <IconButton
                  data-plasmic-name={"logo"}
                  data-plasmic-override={overrides.logo}
                  className={classNames("__wab_instance", sty.logo, {
                    [sty.logoglobal_mode_dark]: hasVariant(
                      globalVariants,
                      "mode",
                      "dark"
                    ),

                    [sty.logoglobal_mode_reveal]: hasVariant(
                      globalVariants,
                      "mode",
                      "reveal"
                    ),
                  })}
                  icon={
                    <p.PlasmicIcon
                      PlasmicIconType={
                        hasVariant(globalVariants, "mode", "dark")
                          ? JwSharpIcon
                          : JwSharpIcon
                      }
                      className={classNames(projectcss.all, sty.svg___1A3Bw, {
                        [sty.svgglobal_mode_dark___1A3BwJYvh]: hasVariant(
                          globalVariants,
                          "mode",
                          "dark"
                        ),

                        [sty.svgglobal_mode_reveal___1A3Bwv94Jk]: hasVariant(
                          globalVariants,
                          "mode",
                          "reveal"
                        ),
                      })}
                      role={"img"}
                    />
                  }
                  label={"jeff wade"}
                />
              </p.PlasmicLink>

              <IconButton
                data-plasmic-name={"darkmode"}
                data-plasmic-override={overrides.darkmode}
                className={classNames("__wab_instance", sty.darkmode, {
                  [sty.darkmodeglobal_mode_dark]: hasVariant(
                    globalVariants,
                    "mode",
                    "dark"
                  ),

                  [sty.darkmodeglobal_mode_reveal]: hasVariant(
                    globalVariants,
                    "mode",
                    "reveal"
                  ),
                })}
                icon={
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(globalVariants, "mode", "dark")
                        ? DayIcon
                        : NightIcon
                    }
                    className={classNames(projectcss.all, sty.svg___9Ekg, {
                      [sty.svgglobal_mode_dark___9EkgJYvh]: hasVariant(
                        globalVariants,
                        "mode",
                        "dark"
                      ),

                      [sty.svgglobal_mode_reveal___9Ekgv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                    cursor={"pointer"}
                    role={"img"}
                  />
                }
                label={
                  hasVariant(globalVariants, "mode", "dark")
                    ? "disable darkmode"
                    : "enable darkmode"
                }
              />
            </div>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root: [
    "root",
    "likeness",
    "words",
    "headline",
    "design",
    "jeff",
    "pwc",
    "orglab",
    "learnin",
    "sprints",
    "tracks",
    "freeBox",
    "reveal",
    "home",
    "logo",
    "darkmode",
  ],

  likeness: ["likeness"],
  words: ["words"],
  headline: ["headline", "design", "jeff"],
  design: ["design"],
  jeff: ["jeff"],
  pwc: ["pwc"],
  orglab: ["orglab"],
  learnin: ["learnin"],
  sprints: ["sprints"],
  tracks: ["tracks"],
  freeBox: ["freeBox", "reveal", "home", "logo", "darkmode"],
  reveal: ["reveal"],
  home: ["home", "logo"],
  logo: ["logo"],
  darkmode: ["darkmode"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps,
    })

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage"
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`
  }
  return func
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    likeness: makeNodeComponent("likeness"),
    words: makeNodeComponent("words"),
    headline: makeNodeComponent("headline"),
    design: makeNodeComponent("design"),
    jeff: makeNodeComponent("jeff"),
    pwc: makeNodeComponent("pwc"),
    orglab: makeNodeComponent("orglab"),
    learnin: makeNodeComponent("learnin"),
    sprints: makeNodeComponent("sprints"),
    tracks: makeNodeComponent("tracks"),
    freeBox: makeNodeComponent("freeBox"),
    reveal: makeNodeComponent("reveal"),
    home: makeNodeComponent("home"),
    logo: makeNodeComponent("logo"),
    darkmode: makeNodeComponent("darkmode"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
  }
)

export default PlasmicHomepage
/* prettier-ignore-end */
