// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ
// Component: tThhXlSj4r
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import WorkCard from "../../WorkCard" // plasmic-import: IQmvc6tT46/component
import IconButton from "../../IconButton" // plasmic-import: mEnM6zW3GD/component
import { useScreenVariants as useScreenVariantsekypzdksLjd0F } from "./PlasmicGlobalVariant__Screen" // plasmic-import: EKYPZDKSLjd0F/globalVariant
import { useMode } from "./PlasmicGlobalVariant__Mode" // plasmic-import: zulsK3o-3W/globalVariant
import { useHighlight } from "./PlasmicGlobalVariant__Highlight" // plasmic-import: ntiwPmQAsH/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_jeffdo_es.module.css" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss
import * as sty from "./PlasmicRemember.module.css" // plasmic-import: tThhXlSj4r/css
import EyeClosedIcon from "./icons/PlasmicIcon__EyeClosed" // plasmic-import: aBAB-JPNq/icon
import EyeOpenIcon from "./icons/PlasmicIcon__EyeOpen" // plasmic-import: J7fJnmL4N/icon
import JwSharpIcon from "./icons/PlasmicIcon__JwSharp" // plasmic-import: imnHY-_8sU/icon
import NightIcon from "./icons/PlasmicIcon__Night" // plasmic-import: nS7MqAdlwl/icon
import DayIcon from "./icons/PlasmicIcon__Day" // plasmic-import: 2cwRWiCxc/icon
import orgDesignMeo1PxVz7 from "./images/orgDesign.png" // plasmic-import: meo1PxVZ7/picture
import homebankLQjd9XtUp from "./images/homebank.jpeg" // plasmic-import: lQjd9xtUP/picture
import brandsiteSketchO2Bv1FGl from "./images/brandsiteSketch.jpeg" // plasmic-import: o2bv1_FGl/picture
import designSystemN5LfcRGsG from "./images/designSystem.png" // plasmic-import: n5LfcRGsG/picture
import logisticsIxIw820Kf from "./images/logistics.png" // plasmic-import: ixIW820KF/picture
import biotechLcRWsB4Si from "./images/biotech.png" // plasmic-import: LcRWsB4si/picture

export const PlasmicRemember__VariantProps = new Array()

export const PlasmicRemember__ArgProps = new Array()

function PlasmicRemember__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsekypzdksLjd0F(),
    mode: useMode(),
    highlight: useHighlight(),
  })

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [projectcss.global_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),

              [sty.rootglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),

              [sty.rootglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            }
          )}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1
            )}
          >
            {"jeff does remember"}
          </h1>

          {true ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns, {
                    [sty.columnsglobal_mode_reveal]: hasVariant(
                      globalVariants,
                      "mode",
                      "reveal"
                    ),
                  })}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__v0Llo, {
                      [sty.columnglobal_mode_reveal__v0LlOv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <WorkCard
                      data-plasmic-name={"case1"}
                      data-plasmic-override={overrides.case1}
                      className={classNames("__wab_instance", sty.case1, {
                        [sty.case1global_mode_reveal]: hasVariant(
                          globalVariants,
                          "mode",
                          "reveal"
                        ),
                      })}
                      hoverText={
                        true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0SXGf,
                              {
                                [sty.textglobal_mode_dark___0SXGfJYvh]:
                                  hasVariant(globalVariants, "mode", "dark"),
                                [sty.textglobal_mode_reveal___0SXGfv94Jk]:
                                  hasVariant(globalVariants, "mode", "reveal"),
                              }
                            )}
                          >
                            {"coming soon"}
                          </div>
                        ) : null
                      }
                      image={
                        (
                          hasVariant(globalVariants, "mode", "reveal")
                            ? true
                            : true
                        ) ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__yrMAw, {
                              [sty.imgglobal_mode_dark__yrMAwJYvh]: hasVariant(
                                globalVariants,
                                "mode",
                                "dark"
                              ),

                              [sty.imgglobal_mode_reveal__yrMAwv94Jk]:
                                hasVariant(globalVariants, "mode", "reveal"),
                            })}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(
                                globalVariants,
                                "screen",
                                "desktopOnly"
                              )
                                ? "440px"
                                : "100%"
                            }
                            loading={"lazy"}
                            src={{
                              src: orgDesignMeo1PxVz7,
                              fullWidth: 2880,
                              fullHeight: 2048,
                              aspectRatio: undefined,
                            }}
                          />
                        ) : null
                      }
                      title={"an org design tool"}
                    />

                    <WorkCard
                      className={classNames(
                        "__wab_instance",
                        sty.workCard__dgCuN,
                        {
                          [sty.workCardglobal_mode_reveal__dgCuNv94Jk]:
                            hasVariant(globalVariants, "mode", "reveal"),
                        }
                      )}
                      image={
                        (
                          hasVariant(globalVariants, "mode", "reveal")
                            ? true
                            : true
                        ) ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__j8E8P, {
                              [sty.imgglobal_mode_reveal__j8E8Pv94Jk]:
                                hasVariant(globalVariants, "mode", "reveal"),
                            })}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(
                                globalVariants,
                                "screen",
                                "desktopOnly"
                              )
                                ? "440px"
                                : "100%"
                            }
                            loading={"lazy"}
                            src={{
                              src: homebankLQjd9XtUp,
                              fullWidth: 2048,
                              fullHeight: 1536,
                              aspectRatio: undefined,
                            }}
                          />
                        ) : null
                      }
                      title={"a mortgage portal"}
                    />

                    <WorkCard
                      className={classNames(
                        "__wab_instance",
                        sty.workCard__eN9Yd,
                        {
                          [sty.workCardglobal_mode_reveal__eN9YDv94Jk]:
                            hasVariant(globalVariants, "mode", "reveal"),
                        }
                      )}
                      image={
                        (
                          hasVariant(globalVariants, "mode", "reveal")
                            ? true
                            : true
                        ) ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__lAitF, {
                              [sty.imgglobal_mode_reveal__lAitFv94Jk]:
                                hasVariant(globalVariants, "mode", "reveal"),
                            })}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(
                                globalVariants,
                                "screen",
                                "desktopOnly"
                              )
                                ? "440px"
                                : "100%"
                            }
                            loading={"lazy"}
                            src={{
                              src: brandsiteSketchO2Bv1FGl,
                              fullWidth: 4096,
                              fullHeight: 3069,
                              aspectRatio: undefined,
                            }}
                          />
                        ) : null
                      }
                      title={"a global brand navigator"}
                    />
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__amWpZ)}
                  >
                    <WorkCard
                      className={classNames(
                        "__wab_instance",
                        sty.workCard___6RwPh,
                        {
                          [sty.workCardglobal_mode_reveal___6RwPHv94Jk]:
                            hasVariant(globalVariants, "mode", "reveal"),
                        }
                      )}
                      image={
                        (
                          hasVariant(globalVariants, "mode", "reveal")
                            ? true
                            : true
                        ) ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__mWe99, {
                              [sty.imgglobal_mode_reveal__mWe99V94Jk]:
                                hasVariant(globalVariants, "mode", "reveal"),
                            })}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(
                                globalVariants,
                                "screen",
                                "desktopOnly"
                              )
                                ? "440px"
                                : "100%"
                            }
                            loading={"lazy"}
                            src={{
                              src: designSystemN5LfcRGsG,
                              fullWidth: 880,
                              fullHeight: 513,
                              aspectRatio: undefined,
                            }}
                          />
                        ) : null
                      }
                      title={"a product design system"}
                    />

                    <WorkCard
                      className={classNames(
                        "__wab_instance",
                        sty.workCard__mkFgA,
                        {
                          [sty.workCardglobal_mode_reveal__mkFgAv94Jk]:
                            hasVariant(globalVariants, "mode", "reveal"),
                        }
                      )}
                      image={
                        (
                          hasVariant(globalVariants, "mode", "reveal")
                            ? true
                            : true
                        ) ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__kv7Eq, {
                              [sty.imgglobal_mode_reveal__kv7EQv94Jk]:
                                hasVariant(globalVariants, "mode", "reveal"),
                            })}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(
                                globalVariants,
                                "screen",
                                "desktopOnly"
                              )
                                ? "440px"
                                : "100%"
                            }
                            loading={"lazy"}
                            src={
                              hasVariant(
                                globalVariants,
                                "screen",
                                "desktopOnly"
                              )
                                ? {
                                    src: logisticsIxIw820Kf,
                                    fullWidth: 968,
                                    fullHeight: 722,
                                    aspectRatio: undefined,
                                  }
                                : {
                                    src: logisticsIxIw820Kf,
                                    fullWidth: 968,
                                    fullHeight: 722,
                                    aspectRatio: undefined,
                                  }
                            }
                          />
                        ) : null
                      }
                      title={"an ecomm logistics service"}
                    />

                    <WorkCard
                      className={classNames(
                        "__wab_instance",
                        sty.workCard__bMvGu,
                        {
                          [sty.workCardglobal_mode_reveal__bMvGuv94Jk]:
                            hasVariant(globalVariants, "mode", "reveal"),
                        }
                      )}
                      image={
                        (
                          hasVariant(globalVariants, "mode", "reveal")
                            ? true
                            : true
                        ) ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__fKio8, {
                              [sty.imgglobal_mode_reveal__fKio8V94Jk]:
                                hasVariant(globalVariants, "mode", "reveal"),
                            })}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(
                                globalVariants,
                                "screen",
                                "desktopOnly"
                              )
                                ? "440px"
                                : "100%"
                            }
                            loading={"lazy"}
                            src={{
                              src: biotechLcRWsB4Si,
                              fullWidth: 1024,
                              fullHeight: 748,
                              aspectRatio: undefined,
                            }}
                          />
                        ) : null
                      }
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__utVr0
                          )}
                        >
                          {"a biotech account manager"}
                        </div>
                      }
                    />
                  </p.Stack>
                </p.Stack>
              ) : null}
            </div>
          ) : null}

          <nav
            data-plasmic-name={"nav"}
            data-plasmic-override={overrides.nav}
            className={classNames(projectcss.all, sty.nav, {
              [sty.navglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),

              [sty.navglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            })}
          >
            <IconButton
              data-plasmic-name={"reveal"}
              data-plasmic-override={overrides.reveal}
              className={classNames("__wab_instance", sty.reveal, {
                [sty.revealglobal_highlight_work]: hasVariant(
                  globalVariants,
                  "highlight",
                  "work"
                ),

                [sty.revealglobal_mode_dark]: hasVariant(
                  globalVariants,
                  "mode",
                  "dark"
                ),

                [sty.revealglobal_mode_reveal]: hasVariant(
                  globalVariants,
                  "mode",
                  "reveal"
                ),
              })}
              icon={
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(globalVariants, "mode", "reveal")
                      ? EyeOpenIcon
                      : EyeClosedIcon
                  }
                  className={classNames(projectcss.all, sty.svg___7EfG1, {
                    [sty.svgglobal_mode_dark___7EfG1JYvh]: hasVariant(
                      globalVariants,
                      "mode",
                      "dark"
                    ),

                    [sty.svgglobal_mode_reveal___7EfG1V94Jk]: hasVariant(
                      globalVariants,
                      "mode",
                      "reveal"
                    ),
                  })}
                  cursor={
                    hasVariant(globalVariants, "mode", "reveal")
                      ? "pointer"
                      : "pointer"
                  }
                  role={"img"}
                />
              }
              label={
                hasVariant(globalVariants, "highlight", "work")
                  ? "reveal labels"
                  : hasVariant(globalVariants, "mode", "reveal")
                  ? "show images"
                  : "hide images"
              }
            />

            <p.PlasmicLink
              data-plasmic-name={"backHome"}
              data-plasmic-override={overrides.backHome}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.backHome,
                {
                  [sty.backHomeglobal_mode_dark]: hasVariant(
                    globalVariants,
                    "mode",
                    "dark"
                  ),
                }
              )}
              component={Link}
              href={"/design"}
              platform={"gatsby"}
              title={"go back"}
            >
              <IconButton
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                className={classNames("__wab_instance", sty.logo, {
                  [sty.logoglobal_mode_dark]: hasVariant(
                    globalVariants,
                    "mode",
                    "dark"
                  ),

                  [sty.logoglobal_mode_reveal]: hasVariant(
                    globalVariants,
                    "mode",
                    "reveal"
                  ),
                })}
                icon={
                  <JwSharpIcon
                    className={classNames(projectcss.all, sty.svg__gg5Bj, {
                      [sty.svgglobal_mode_dark__gg5BjJYvh]: hasVariant(
                        globalVariants,
                        "mode",
                        "dark"
                      ),

                      [sty.svgglobal_mode_reveal__gg5Bjv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                    role={"img"}
                  />
                }
                label={"go back"}
              />
            </p.PlasmicLink>

            <IconButton
              data-plasmic-name={"darkmode"}
              data-plasmic-override={overrides.darkmode}
              className={classNames("__wab_instance", sty.darkmode, {
                [sty.darkmodeglobal_mode_dark]: hasVariant(
                  globalVariants,
                  "mode",
                  "dark"
                ),

                [sty.darkmodeglobal_mode_reveal]: hasVariant(
                  globalVariants,
                  "mode",
                  "reveal"
                ),
              })}
              icon={
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(globalVariants, "mode", "dark")
                      ? DayIcon
                      : NightIcon
                  }
                  className={classNames(projectcss.all, sty.svg__cikJ, {
                    [sty.svgglobal_mode_dark__cikJJYvh]: hasVariant(
                      globalVariants,
                      "mode",
                      "dark"
                    ),

                    [sty.svgglobal_mode_reveal__cikJv94Jk]: hasVariant(
                      globalVariants,
                      "mode",
                      "reveal"
                    ),
                  })}
                  cursor={
                    hasVariant(globalVariants, "mode", "reveal")
                      ? "pointer"
                      : hasVariant(globalVariants, "mode", "dark")
                      ? "pointer"
                      : "pointer"
                  }
                  role={"img"}
                />
              }
              label={
                hasVariant(globalVariants, "mode", "dark")
                  ? "switch to light mode"
                  : "switch to dark mode"
              }
            />
          </nav>
        </p.Stack>
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "freeBox",
    "columns",
    "case1",
    "nav",
    "reveal",
    "backHome",
    "logo",
    "darkmode",
  ],

  h1: ["h1"],
  freeBox: ["freeBox", "columns", "case1"],
  columns: ["columns", "case1"],
  case1: ["case1"],
  nav: ["nav", "reveal", "backHome", "logo", "darkmode"],
  reveal: ["reveal"],
  backHome: ["backHome", "logo"],
  logo: ["logo"],
  darkmode: ["darkmode"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRemember__ArgProps,
      internalVariantPropNames: PlasmicRemember__VariantProps,
    })

    return PlasmicRemember__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicRemember"
  } else {
    func.displayName = `PlasmicRemember.${nodeName}`
  }
  return func
}

export const PlasmicRemember = Object.assign(
  // Top-level PlasmicRemember renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    freeBox: makeNodeComponent("freeBox"),
    columns: makeNodeComponent("columns"),
    case1: makeNodeComponent("case1"),
    nav: makeNodeComponent("nav"),
    reveal: makeNodeComponent("reveal"),
    backHome: makeNodeComponent("backHome"),
    logo: makeNodeComponent("logo"),
    darkmode: makeNodeComponent("darkmode"),
    // Metadata about props expected for PlasmicRemember
    internalVariantProps: PlasmicRemember__VariantProps,
    internalArgProps: PlasmicRemember__ArgProps,
  }
)

export default PlasmicRemember
/* prettier-ignore-end */
