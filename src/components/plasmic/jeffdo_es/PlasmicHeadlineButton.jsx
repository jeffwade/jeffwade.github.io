// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ
// Component: uHRDF-VO-A
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import { useMode } from "./PlasmicGlobalVariant__Mode" // plasmic-import: zulsK3o-3W/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_jeffdo_es.module.css" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss
import * as sty from "./PlasmicHeadlineButton.module.css" // plasmic-import: uHRDF-VO-A/css

export const PlasmicHeadlineButton__VariantProps = new Array()

export const PlasmicHeadlineButton__ArgProps = new Array(
  "word",
  "symbol",
  "label",
  "color"
)

function PlasmicHeadlineButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
  })

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),

          [sty.rootglobal_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
        }
      )}
      tabIndex={1}
    >
      <h1
        className={classNames(projectcss.all, projectcss.h1, sty.h1__mLmRw, {
          [sty.h1global_mode_dark__mLmRwjYvh]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "word",
          value: args.word,
          className: classNames(sty.slotTargetWord, {
            [sty.slotTargetWordglobal_mode_dark]: hasVariant(
              globalVariants,
              "mode",
              "dark"
            ),
          }),
        })}
      </h1>

      <h1 className={classNames(projectcss.all, projectcss.h1, sty.h1__pd88E)}>
        {p.renderPlasmicSlot({
          defaultContents: "*",
          value: args.symbol,
          className: classNames(sty.slotTargetSymbol, {
            [sty.slotTargetSymbolglobal_mode_dark]: hasVariant(
              globalVariants,
              "mode",
              "dark"
            ),
          }),
        })}
      </h1>
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeadlineButton__ArgProps,
      internalVariantPropNames: PlasmicHeadlineButton__VariantProps,
    })

    return PlasmicHeadlineButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHeadlineButton"
  } else {
    func.displayName = `PlasmicHeadlineButton.${nodeName}`
  }
  return func
}

export const PlasmicHeadlineButton = Object.assign(
  // Top-level PlasmicHeadlineButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicHeadlineButton
    internalVariantProps: PlasmicHeadlineButton__VariantProps,
    internalArgProps: PlasmicHeadlineButton__ArgProps,
  }
)

export default PlasmicHeadlineButton
/* prettier-ignore-end */
