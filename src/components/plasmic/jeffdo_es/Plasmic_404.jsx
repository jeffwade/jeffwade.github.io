// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ
// Component: zPZ01Sff-L
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import P5Sketch from "../../P5Sketch" // plasmic-import: ZbI4Qm1ePM/component
import IconButton from "../../IconButton" // plasmic-import: mEnM6zW3GD/component
import { useScreenVariants as useScreenVariantsekypzdksLjd0F } from "./PlasmicGlobalVariant__Screen" // plasmic-import: EKYPZDKSLjd0F/globalVariant
import { useMode } from "./PlasmicGlobalVariant__Mode" // plasmic-import: zulsK3o-3W/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_jeffdo_es.module.css" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss
import * as sty from "./Plasmic_404.module.css" // plasmic-import: zPZ01Sff-L/css
import EyeOpenIcon from "./icons/PlasmicIcon__EyeOpen" // plasmic-import: J7fJnmL4N/icon
import EyeClosedIcon from "./icons/PlasmicIcon__EyeClosed" // plasmic-import: aBAB-JPNq/icon
import JwSharpIcon from "./icons/PlasmicIcon__JwSharp" // plasmic-import: imnHY-_8sU/icon
import NightIcon from "./icons/PlasmicIcon__Night" // plasmic-import: nS7MqAdlwl/icon
import DayIcon from "./icons/PlasmicIcon__Day" // plasmic-import: 2cwRWiCxc/icon

export const Plasmic_404__VariantProps = new Array()

export const Plasmic_404__ArgProps = new Array()

function Plasmic_404__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsekypzdksLjd0F(),
    mode: useMode(),
  })

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [projectcss.global_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),
            }
          )}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__b1Tf7)}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"four oh four"}
              </h2>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Attp
                )}
              >
                {hasVariant(globalVariants, "screen", "desktopOnly")
                  ? "the thing you were looking for isn't here. unless you were looking for this."
                  : "the thing you were looking for isn't here. unless you were looking for this."}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qihLi
                )}
              >
                {
                  "whatever the reason for your presence here, take a moment to be present."
                }
              </div>
            </p.Stack>
          ) : null}

          <P5Sketch
            data-plasmic-name={"p5Sketch"}
            data-plasmic-override={overrides.p5Sketch}
            className={classNames("__wab_instance", sty.p5Sketch)}
          />

          {(hasVariant(globalVariants, "mode", "dark") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__hxHbG, {
                [sty.freeBoxglobal_mode_dark__hxHbGjYvh]: hasVariant(
                  globalVariants,
                  "mode",
                  "dark"
                ),
              })}
            >
              <IconButton
                data-plasmic-name={"reveal"}
                data-plasmic-override={overrides.reveal}
                className={classNames("__wab_instance", sty.reveal, {
                  [sty.revealglobal_mode_reveal]: hasVariant(
                    globalVariants,
                    "mode",
                    "reveal"
                  ),
                })}
                icon={
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(globalVariants, "mode", "reveal")
                        ? EyeClosedIcon
                        : EyeOpenIcon
                    }
                    className={classNames(projectcss.all, sty.svg__mviom, {
                      [sty.svgglobal_mode_reveal__mviomv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                    cursor={
                      hasVariant(globalVariants, "mode", "reveal")
                        ? "pointer"
                        : "pointer"
                    }
                    role={"img"}
                  />
                }
                label={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "hide labels"
                    : "reveal labels"
                }
              />

              <p.PlasmicLink
                data-plasmic-name={"home"}
                data-plasmic-override={overrides.home}
                className={classNames(projectcss.all, projectcss.a, sty.home, {
                  [sty.homeglobal_mode_dark]: hasVariant(
                    globalVariants,
                    "mode",
                    "dark"
                  ),

                  [sty.homeglobal_mode_reveal]: hasVariant(
                    globalVariants,
                    "mode",
                    "reveal"
                  ),
                })}
                component={Link}
                href={"/design"}
                id={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "logo"
                    : hasVariant(globalVariants, "mode", "dark")
                    ? "logo"
                    : "logo"
                }
                platform={"gatsby"}
                title={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "jeff wade"
                    : hasVariant(globalVariants, "mode", "dark")
                    ? "jeff wade"
                    : "jeff wade"
                }
              >
                <IconButton
                  data-plasmic-name={"logo"}
                  data-plasmic-override={overrides.logo}
                  className={classNames("__wab_instance", sty.logo, {
                    [sty.logoglobal_mode_dark]: hasVariant(
                      globalVariants,
                      "mode",
                      "dark"
                    ),

                    [sty.logoglobal_mode_reveal]: hasVariant(
                      globalVariants,
                      "mode",
                      "reveal"
                    ),
                  })}
                  icon={
                    <p.PlasmicIcon
                      PlasmicIconType={
                        hasVariant(globalVariants, "mode", "reveal")
                          ? JwSharpIcon
                          : hasVariant(globalVariants, "mode", "dark")
                          ? JwSharpIcon
                          : JwSharpIcon
                      }
                      className={classNames(projectcss.all, sty.svg__pp4QS, {
                        [sty.svgglobal_mode_dark__pp4QSjYvh]: hasVariant(
                          globalVariants,
                          "mode",
                          "dark"
                        ),

                        [sty.svgglobal_mode_reveal__pp4QSv94Jk]: hasVariant(
                          globalVariants,
                          "mode",
                          "reveal"
                        ),
                      })}
                      role={"img"}
                    />
                  }
                  label={
                    hasVariant(globalVariants, "mode", "reveal")
                      ? "jeff wade"
                      : hasVariant(globalVariants, "mode", "dark")
                      ? "jeff wade"
                      : "jeff wade"
                  }
                />
              </p.PlasmicLink>

              <IconButton
                data-plasmic-name={"darkmode"}
                data-plasmic-override={overrides.darkmode}
                className={classNames("__wab_instance", sty.darkmode, {
                  [sty.darkmodeglobal_mode_dark]: hasVariant(
                    globalVariants,
                    "mode",
                    "dark"
                  ),

                  [sty.darkmodeglobal_mode_reveal]: hasVariant(
                    globalVariants,
                    "mode",
                    "reveal"
                  ),
                })}
                icon={
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(globalVariants, "mode", "reveal")
                        ? NightIcon
                        : hasVariant(globalVariants, "mode", "dark")
                        ? DayIcon
                        : NightIcon
                    }
                    className={classNames(projectcss.all, sty.svg__tMqKe, {
                      [sty.svgglobal_mode_dark__tMqKejYvh]: hasVariant(
                        globalVariants,
                        "mode",
                        "dark"
                      ),

                      [sty.svgglobal_mode_reveal__tMqKEv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                    cursor={
                      hasVariant(globalVariants, "mode", "reveal")
                        ? "pointer"
                        : hasVariant(globalVariants, "mode", "dark")
                        ? "pointer"
                        : "pointer"
                    }
                    role={"img"}
                  />
                }
                label={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "enable darkmode"
                    : hasVariant(globalVariants, "mode", "dark")
                    ? "disable darkmode"
                    : "enable darkmode"
                }
              />
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root: ["root", "h2", "p5Sketch", "reveal", "home", "logo", "darkmode"],
  h2: ["h2"],
  p5Sketch: ["p5Sketch"],
  reveal: ["reveal"],
  home: ["home", "logo"],
  logo: ["logo"],
  darkmode: ["darkmode"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: Plasmic_404__ArgProps,
      internalVariantPropNames: Plasmic_404__VariantProps,
    })

    return Plasmic_404__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "Plasmic_404"
  } else {
    func.displayName = `Plasmic_404.${nodeName}`
  }
  return func
}

export const Plasmic_404 = Object.assign(
  // Top-level Plasmic_404 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    p5Sketch: makeNodeComponent("p5Sketch"),
    reveal: makeNodeComponent("reveal"),
    home: makeNodeComponent("home"),
    logo: makeNodeComponent("logo"),
    darkmode: makeNodeComponent("darkmode"),
    // Metadata about props expected for Plasmic_404
    internalVariantProps: Plasmic_404__VariantProps,
    internalArgProps: Plasmic_404__ArgProps,
  }
)

export default Plasmic_404
/* prettier-ignore-end */
