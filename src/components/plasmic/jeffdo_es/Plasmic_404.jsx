// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ
// Component: zPZ01Sff-L
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import P5Sketch from "../../P5Sketch" // plasmic-import: ZbI4Qm1ePM/component
import IconButton from "../../IconButton" // plasmic-import: mEnM6zW3GD/component
import { useScreenVariants as useScreenVariantsekypzdksLjd0F } from "./PlasmicGlobalVariant__Screen" // plasmic-import: EKYPZDKSLjd0F/globalVariant
import { useMode } from "./PlasmicGlobalVariant__Mode" // plasmic-import: zulsK3o-3W/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_jeffdo_es.module.css" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss
import * as sty from "./Plasmic_404.module.css" // plasmic-import: zPZ01Sff-L/css
import EyeOpenIcon from "./icons/PlasmicIcon__EyeOpen" // plasmic-import: J7fJnmL4N/icon
import EyeClosedIcon from "./icons/PlasmicIcon__EyeClosed" // plasmic-import: aBAB-JPNq/icon
import JwSharpIcon from "./icons/PlasmicIcon__JwSharp" // plasmic-import: imnHY-_8sU/icon
import NightIcon from "./icons/PlasmicIcon__Night" // plasmic-import: nS7MqAdlwl/icon
import DayIcon from "./icons/PlasmicIcon__Day" // plasmic-import: 2cwRWiCxc/icon

export const Plasmic_404__VariantProps = new Array()

export const Plasmic_404__ArgProps = new Array()

function Plasmic_404__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsekypzdksLjd0F(),
    mode: useMode(),
  })

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [projectcss.global_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),

              [projectcss.global_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),

              [sty.rootglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),

              [sty.rootglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            }
          )}
        >
          {(hasVariant(globalVariants, "mode", "reveal") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__b1Tf7, {
                [sty.freeBoxglobal_mode_reveal__b1Tf7V94Jk]: hasVariant(
                  globalVariants,
                  "mode",
                  "reveal"
                ),
              })}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"four oh four"}
              </h2>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Attp
                )}
              >
                {hasVariant(globalVariants, "screen", "desktopOnly")
                  ? "the thing you were looking for isn't here. unless you were looking for this."
                  : "the thing you were looking for isn't here. unless you were looking for this."}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qihLi
                )}
              >
                {
                  "whatever the reason for your presence here, take a moment to be present."
                }
              </div>
            </p.Stack>
          ) : null}

          <P5Sketch
            data-plasmic-name={"p5Sketch"}
            data-plasmic-override={overrides.p5Sketch}
            className={classNames("__wab_instance", sty.p5Sketch, {
              [sty.p5Sketchglobal_mode_reveal]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            })}
          />

          {(hasVariant(globalVariants, "mode", "reveal") ? true : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"controls"}
              data-plasmic-override={overrides.controls}
              hasGap={true}
              className={classNames(projectcss.all, sty.controls, {
                [sty.controlsglobal_mode_reveal]: hasVariant(
                  globalVariants,
                  "mode",
                  "reveal"
                ),
              })}
            >
              {(hasVariant(globalVariants, "mode", "reveal") ? true : true) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__p2Zdo, {
                    [sty.freeBoxglobal_mode_reveal__p2Zdov94Jk]: hasVariant(
                      globalVariants,
                      "mode",
                      "reveal"
                    ),
                  })}
                >
                  <h3
                    data-plasmic-name={"h3"}
                    data-plasmic-override={overrides.h3}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3,
                      {
                        [sty.h3global_mode_reveal]: hasVariant(
                          globalVariants,
                          "mode",
                          "reveal"
                        ),
                      }
                    )}
                  >
                    {hasVariant(globalVariants, "mode", "reveal")
                      ? "controls"
                      : "Enter some text"}
                  </h3>
                </div>
              ) : null}
              {(hasVariant(globalVariants, "mode", "reveal") ? true : true) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___3ZKp, {
                    [sty.freeBoxglobal_mode_reveal___3ZKpv94Jk]: hasVariant(
                      globalVariants,
                      "mode",
                      "reveal"
                    ),
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gWlBb, {
                      [sty.freeBoxglobal_mode_reveal__gWlBBv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hl30A,
                        {
                          [sty.textglobal_mode_reveal__hl30Av94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal") &&
                      hasVariant(globalVariants, "screen", "desktopOnly")
                        ? "click"
                        : hasVariant(globalVariants, "mode", "reveal")
                        ? "tap"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zKrYn,
                        {
                          [sty.textglobal_mode_reveal__zKrYnv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "randomize number of points, circles, & reflections"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__lsdS8, {
                      [sty.freeBoxglobal_mode_reveal__lsdS8V94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yuaCy,
                        {
                          [sty.textglobal_mode_reveal__yuaCyv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "press"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___46OTd,
                        {
                          [sty.textglobal_mode_reveal___46OTdv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "& this'll happen"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__wUgE, {
                      [sty.freeBoxglobal_mode_reveal__wUgEv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__su7Mj,
                        {
                          [sty.textglobal_mode_reveal__su7Mjv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "← / →"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dVEf6,
                        {
                          [sty.textglobal_mode_reveal__dVEf6V94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "Change circle radius [1, w/6]"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__a1Adx, {
                      [sty.freeBoxglobal_mode_reveal__a1AdXv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jx42,
                        {
                          [sty.textglobal_mode_reveal__jx42V94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "↑ / ↓"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mWhT,
                        {
                          [sty.textglobal_mode_reveal__mWhTv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "Change # of points [1, 50]"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__jQbp4, {
                      [sty.freeBoxglobal_mode_reveal__jQbp4V94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fmI7Z,
                        {
                          [sty.textglobal_mode_reveal__fmI7Zv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "+ / -"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zPsps,
                        {
                          [sty.textglobal_mode_reveal__zPspSv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "Change circles/point [1, 50]"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__jQik0, {
                      [sty.freeBoxglobal_mode_reveal__jQik0V94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___85W5,
                        {
                          [sty.textglobal_mode_reveal___85W5V94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "↑ / ↓"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vYtl,
                        {
                          [sty.textglobal_mode_reveal__vYtlv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "Change # of points [1, 50]"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__z6H, {
                      [sty.freeBoxglobal_mode_reveal__z6HV94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9GMvN,
                        {
                          [sty.textglobal_mode_reveal___9GMvNv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "< / >"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mn9Sz,
                        {
                          [sty.textglobal_mode_reveal__mn9Szv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "Change reflections [0, 1, 2]"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__aH8Rt, {
                      [sty.freeBoxglobal_mode_reveal__aH8Rtv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vzP53,
                        {
                          [sty.textglobal_mode_reveal__vzP53V94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "[ / ]"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zh0O8,
                        {
                          [sty.textglobal_mode_reveal__zh0O8V94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "Change rotation [0, 360]"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__xAxfb, {
                      [sty.freeBoxglobal_mode_reveal__xAxfbv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7YKxL,
                        {
                          [sty.textglobal_mode_reveal___7YKxLv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "enter"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wDfxb,
                        {
                          [sty.textglobal_mode_reveal__wDfxBv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "swap fore/background colors"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__bgG2A, {
                      [sty.freeBoxglobal_mode_reveal__bgG2Av94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lQvEg,
                        {
                          [sty.textglobal_mode_reveal__lQvEGv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "j / u"
                        : "Enter some text"}
                    </div>

                    {(
                      hasVariant(globalVariants, "mode", "reveal") ? true : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8EXrt,
                          {
                            [sty.textglobal_mode_reveal___8EXrTv94Jk]:
                              hasVariant(globalVariants, "mode", "reveal"),
                          }
                        )}
                      >
                        {hasVariant(globalVariants, "mode", "reveal")
                          ? "swap fore/background colors"
                          : "Enter some text"}
                      </div>
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uXlNh,
                        {
                          [sty.textglobal_mode_reveal__uXlNhv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "Change hue [0, 360]"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___7FyTr, {
                      [sty.freeBoxglobal_mode_reveal___7FyTRv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vezl8,
                        {
                          [sty.textglobal_mode_reveal__vezl8V94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "k / i"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xnpu3,
                        {
                          [sty.textglobal_mode_reveal__xnpu3V94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "Change saturation [0, 100]"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__fmXd, {
                      [sty.freeBoxglobal_mode_reveal__fmXdv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lTgew,
                        {
                          [sty.textglobal_mode_reveal__lTgewv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "l / o"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xtRf,
                        {
                          [sty.textglobal_mode_reveal__xtRfV94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "Change brightness [0, 100]"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__hGUoi, {
                      [sty.freeBoxglobal_mode_reveal__hGUoiv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__he3Bq,
                        {
                          [sty.textglobal_mode_reveal__he3Bqv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "shift"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tu3Yb,
                        {
                          [sty.textglobal_mode_reveal__tu3YBv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "toggle edit secondary color"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__sBt4N, {
                      [sty.freeBoxglobal_mode_reveal__sBt4Nv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Vvnc,
                        {
                          [sty.textglobal_mode_reveal___1Vvncv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "space"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s0KEd,
                        {
                          [sty.textglobal_mode_reveal__s0KEdv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "fresh canvas (paint bg color)"
                        : "Enter some text"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___3H9Oi, {
                      [sty.freeBoxglobal_mode_reveal___3H9Oiv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yTgCr,
                        {
                          [sty.textglobal_mode_reveal__yTgCRv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "alt / option"
                        : "Enter some text"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7TmOv,
                        {
                          [sty.textglobal_mode_reveal___7TmOVv94Jk]: hasVariant(
                            globalVariants,
                            "mode",
                            "reveal"
                          ),
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "mode", "reveal")
                        ? "toggle straight or curved paths"
                        : "Enter some text"}
                    </div>
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {(hasVariant(globalVariants, "mode", "dark") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__hxHbG, {
                [sty.freeBoxglobal_mode_dark__hxHbGjYvh]: hasVariant(
                  globalVariants,
                  "mode",
                  "dark"
                ),

                [sty.freeBoxglobal_mode_reveal__hxHbGv94Jk]: hasVariant(
                  globalVariants,
                  "mode",
                  "reveal"
                ),
              })}
            >
              <IconButton
                data-plasmic-name={"reveal"}
                data-plasmic-override={overrides.reveal}
                className={classNames("__wab_instance", sty.reveal, {
                  [sty.revealglobal_mode_reveal]: hasVariant(
                    globalVariants,
                    "mode",
                    "reveal"
                  ),
                })}
                icon={
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(globalVariants, "mode", "reveal")
                        ? EyeClosedIcon
                        : EyeOpenIcon
                    }
                    className={classNames(projectcss.all, sty.svg__mviom, {
                      [sty.svgglobal_mode_reveal__mviomv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                    cursor={
                      hasVariant(globalVariants, "mode", "reveal")
                        ? "pointer"
                        : "pointer"
                    }
                    role={"img"}
                  />
                }
                label={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "hide controls"
                    : "show controls"
                }
              />

              <p.PlasmicLink
                data-plasmic-name={"home"}
                data-plasmic-override={overrides.home}
                className={classNames(projectcss.all, projectcss.a, sty.home, {
                  [sty.homeglobal_mode_dark]: hasVariant(
                    globalVariants,
                    "mode",
                    "dark"
                  ),

                  [sty.homeglobal_mode_reveal]: hasVariant(
                    globalVariants,
                    "mode",
                    "reveal"
                  ),
                })}
                component={Link}
                href={"/design"}
                id={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "logo"
                    : hasVariant(globalVariants, "mode", "dark")
                    ? "logo"
                    : "logo"
                }
                platform={"gatsby"}
                title={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "jeff wade"
                    : hasVariant(globalVariants, "mode", "dark")
                    ? "jeff wade"
                    : "jeff wade"
                }
              >
                <IconButton
                  data-plasmic-name={"logo"}
                  data-plasmic-override={overrides.logo}
                  className={classNames("__wab_instance", sty.logo, {
                    [sty.logoglobal_mode_dark]: hasVariant(
                      globalVariants,
                      "mode",
                      "dark"
                    ),

                    [sty.logoglobal_mode_reveal]: hasVariant(
                      globalVariants,
                      "mode",
                      "reveal"
                    ),
                  })}
                  icon={
                    <p.PlasmicIcon
                      PlasmicIconType={
                        hasVariant(globalVariants, "mode", "reveal")
                          ? JwSharpIcon
                          : hasVariant(globalVariants, "mode", "dark")
                          ? JwSharpIcon
                          : JwSharpIcon
                      }
                      className={classNames(projectcss.all, sty.svg__pp4QS, {
                        [sty.svgglobal_mode_dark__pp4QSjYvh]: hasVariant(
                          globalVariants,
                          "mode",
                          "dark"
                        ),

                        [sty.svgglobal_mode_reveal__pp4QSv94Jk]: hasVariant(
                          globalVariants,
                          "mode",
                          "reveal"
                        ),
                      })}
                      role={"img"}
                    />
                  }
                  label={
                    hasVariant(globalVariants, "mode", "reveal")
                      ? "jeff wade"
                      : hasVariant(globalVariants, "mode", "dark")
                      ? "jeff wade"
                      : "jeff wade"
                  }
                />
              </p.PlasmicLink>

              <IconButton
                data-plasmic-name={"darkmode"}
                data-plasmic-override={overrides.darkmode}
                className={classNames("__wab_instance", sty.darkmode, {
                  [sty.darkmodeglobal_mode_dark]: hasVariant(
                    globalVariants,
                    "mode",
                    "dark"
                  ),

                  [sty.darkmodeglobal_mode_reveal]: hasVariant(
                    globalVariants,
                    "mode",
                    "reveal"
                  ),
                })}
                icon={
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(globalVariants, "mode", "reveal")
                        ? NightIcon
                        : hasVariant(globalVariants, "mode", "dark")
                        ? DayIcon
                        : NightIcon
                    }
                    className={classNames(projectcss.all, sty.svg__tMqKe, {
                      [sty.svgglobal_mode_dark__tMqKejYvh]: hasVariant(
                        globalVariants,
                        "mode",
                        "dark"
                      ),

                      [sty.svgglobal_mode_reveal__tMqKEv94Jk]: hasVariant(
                        globalVariants,
                        "mode",
                        "reveal"
                      ),
                    })}
                    cursor={
                      hasVariant(globalVariants, "mode", "reveal")
                        ? "pointer"
                        : hasVariant(globalVariants, "mode", "dark")
                        ? "pointer"
                        : "pointer"
                    }
                    role={"img"}
                  />
                }
                label={
                  hasVariant(globalVariants, "mode", "reveal")
                    ? "skitch to light mode"
                    : hasVariant(globalVariants, "mode", "dark")
                    ? "switch to light mode"
                    : "switch to darkmode"
                }
              />
            </div>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root: [
    "root",
    "h2",
    "p5Sketch",
    "controls",
    "h3",
    "reveal",
    "home",
    "logo",
    "darkmode",
  ],

  h2: ["h2"],
  p5Sketch: ["p5Sketch"],
  controls: ["controls", "h3"],
  h3: ["h3"],
  reveal: ["reveal"],
  home: ["home", "logo"],
  logo: ["logo"],
  darkmode: ["darkmode"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: Plasmic_404__ArgProps,
      internalVariantPropNames: Plasmic_404__VariantProps,
    })

    return Plasmic_404__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "Plasmic_404"
  } else {
    func.displayName = `Plasmic_404.${nodeName}`
  }
  return func
}

export const Plasmic_404 = Object.assign(
  // Top-level Plasmic_404 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    p5Sketch: makeNodeComponent("p5Sketch"),
    controls: makeNodeComponent("controls"),
    h3: makeNodeComponent("h3"),
    reveal: makeNodeComponent("reveal"),
    home: makeNodeComponent("home"),
    logo: makeNodeComponent("logo"),
    darkmode: makeNodeComponent("darkmode"),
    // Metadata about props expected for Plasmic_404
    internalVariantProps: Plasmic_404__VariantProps,
    internalArgProps: Plasmic_404__ArgProps,
  }
)

export default Plasmic_404
/* prettier-ignore-end */
