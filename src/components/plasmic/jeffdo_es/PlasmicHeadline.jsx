// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ
// Component: KiN_FJLYI1
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import HeadlineButton from "../../HeadlineButton" // plasmic-import: uHRDF-VO-A/component
import { useScreenVariants as useScreenVariantsekypzdksLjd0F } from "./PlasmicGlobalVariant__Screen" // plasmic-import: EKYPZDKSLjd0F/globalVariant
import { useMode } from "./PlasmicGlobalVariant__Mode" // plasmic-import: zulsK3o-3W/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_jeffdo_es.module.css" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss
import * as sty from "./PlasmicHeadline.module.css" // plasmic-import: KiN_FJLYI1/css

export const PlasmicHeadline__VariantProps = new Array()

export const PlasmicHeadline__ArgProps = new Array("end", "first")

function PlasmicHeadline__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsekypzdksLjd0F(),
    mode: useMode(),
  })

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
        }
      )}
      tabIndex={-1}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <HeadlineButton
            className={classNames("__wab_instance", sty.headlineButton__xiaYn)}
            color={"purple"}
            label={"*about jeff"}
            word={"Jeff"}
          />
        ),

        value: args.first,
      })}

      <h1
        data-plasmic-name={"h1"}
        data-plasmic-override={overrides.h1}
        className={classNames(projectcss.all, projectcss.h1, sty.h1, {
          [sty.h1global_mode_dark]: hasVariant(globalVariants, "mode", "dark"),
        })}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),
            }
          )}
        >
          {hasVariant(globalVariants, "mode", "dark") ? "does" : "does"}
        </div>
      </h1>

      {p.renderPlasmicSlot({
        defaultContents: (
          <HeadlineButton
            className={classNames("__wab_instance", sty.headlineButton__b86Ep)}
            color={"purple"}
            label={"†work samples"}
            symbol={"†"}
            word={"design"}
          />
        ),

        value: args.end,
      })}
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root", "h1", "text"],
  h1: ["h1", "text"],
  text: ["text"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeadline__ArgProps,
      internalVariantPropNames: PlasmicHeadline__VariantProps,
    })

    return PlasmicHeadline__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHeadline"
  } else {
    func.displayName = `PlasmicHeadline.${nodeName}`
  }
  return func
}

export const PlasmicHeadline = Object.assign(
  // Top-level PlasmicHeadline renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicHeadline
    internalVariantProps: PlasmicHeadline__VariantProps,
    internalArgProps: PlasmicHeadline__ArgProps,
  }
)

export default PlasmicHeadline
/* prettier-ignore-end */
