// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ
// Component: JaZPnDe4BQ
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import { useMode } from "./PlasmicGlobalVariant__Mode" // plasmic-import: zulsK3o-3W/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_jeffdo_es.module.css" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss
import * as sty from "./PlasmicStripe.module.css" // plasmic-import: JaZPnDe4BQ/css
import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight" // plasmic-import: iZuEl1jiaD/icon

export const PlasmicStripe__VariantProps = new Array(
  "color",
  "highlighted",
  "lowlighted"
)

export const PlasmicStripe__ArgProps = new Array(
  "label",
  "icon",
  "category",
  "name"
)

function PlasmicStripe__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false,
    })

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {})
  const [isRootFocusWithin, triggerRootFocusWithinProps] = useTrigger(
    "useFocusedWithin",
    {}
  )

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin,
    hover_root: isRootHover,
    focusWithin_root: isRootFocusWithin,
  }

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
  })

  return true ? (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),

          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.rootcolor_blue]: hasVariant(variants, "color", "blue"),
          [sty.rootcolor_green]: hasVariant(variants, "color", "green"),
          [sty.rootcolor_grey]: hasVariant(variants, "color", "grey"),
          [sty.rootcolor_mint]: hasVariant(variants, "color", "mint"),
          [sty.rootcolor_orange]: hasVariant(variants, "color", "orange"),
          [sty.rootcolor_purple]: hasVariant(variants, "color", "purple"),
          [sty.rootcolor_red]: hasVariant(variants, "color", "red"),
          [sty.rootcolor_yellow]: hasVariant(variants, "color", "yellow"),
          [sty.rootglobal_mode_reveal]: hasVariant(
            globalVariants,
            "mode",
            "reveal"
          ),

          [sty.roothighlighted]: hasVariant(
            variants,
            "highlighted",
            "highlighted"
          ),

          [sty.rootlowlighted]: hasVariant(
            variants,
            "lowlighted",
            "lowlighted"
          ),
        }
      )}
      id={args.name}
      tabIndex={0}
      data-plasmic-trigger-props={[
        triggerRootFocusVisibleWithinProps,
        triggerRootHoverProps,
        triggerRootFocusWithinProps,
      ]}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"title"}
        data-plasmic-override={overrides.title}
        hasGap={true}
        className={classNames(projectcss.all, sty.title, {
          [sty.title___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.titlecolor_blue]: hasVariant(variants, "color", "blue"),
          [sty.titlecolor_green]: hasVariant(variants, "color", "green"),
          [sty.titlecolor_grey]: hasVariant(variants, "color", "grey"),
          [sty.titlecolor_mint]: hasVariant(variants, "color", "mint"),
          [sty.titlecolor_orange]: hasVariant(variants, "color", "orange"),
          [sty.titlecolor_purple]: hasVariant(variants, "color", "purple"),
          [sty.titlecolor_red]: hasVariant(variants, "color", "red"),
          [sty.titlecolor_yellow]: hasVariant(variants, "color", "yellow"),
          [sty.titleglobal_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),

          [sty.titleglobal_mode_reveal]: hasVariant(
            globalVariants,
            "mode",
            "reveal"
          ),

          [sty.titlehighlighted]: hasVariant(
            variants,
            "highlighted",
            "highlighted"
          ),

          [sty.titlelowlighted]: hasVariant(
            variants,
            "lowlighted",
            "lowlighted"
          ),
        })}
      >
        {(
          triggers.focusVisibleWithin_root
            ? true
            : triggers.focusWithin_root
            ? true
            : hasVariant(variants, "highlighted", "highlighted") &&
              triggers.hover_root
            ? true
            : triggers.hover_root &&
              hasVariant(globalVariants, "mode", "reveal")
            ? true
            : triggers.hover_root
            ? true
            : hasVariant(variants, "highlighted", "highlighted")
            ? true
            : hasVariant(globalVariants, "mode", "reveal")
            ? true
            : false
        )
          ? p.renderPlasmicSlot({
              defaultContents: "label",
              value: args.label,
              className: classNames(sty.slotTargetLabel, {
                [sty.slotTargetLabel___focusVisibleWithin]:
                  triggers.focusVisibleWithin_root,
                [sty.slotTargetLabelcolor_blue]: hasVariant(
                  variants,
                  "color",
                  "blue"
                ),

                [sty.slotTargetLabelcolor_green]: hasVariant(
                  variants,
                  "color",
                  "green"
                ),

                [sty.slotTargetLabelcolor_grey]: hasVariant(
                  variants,
                  "color",
                  "grey"
                ),

                [sty.slotTargetLabelcolor_mint]: hasVariant(
                  variants,
                  "color",
                  "mint"
                ),

                [sty.slotTargetLabelcolor_orange]: hasVariant(
                  variants,
                  "color",
                  "orange"
                ),

                [sty.slotTargetLabelcolor_yellow]: hasVariant(
                  variants,
                  "color",
                  "yellow"
                ),

                [sty.slotTargetLabelglobal_mode_reveal]: hasVariant(
                  globalVariants,
                  "mode",
                  "reveal"
                ),

                [sty.slotTargetLabelhighlighted]: hasVariant(
                  variants,
                  "highlighted",
                  "highlighted"
                ),
              }),
            })
          : null}
        {(
          triggers.focusVisibleWithin_root
            ? true
            : triggers.focusWithin_root
            ? true
            : hasVariant(variants, "highlighted", "highlighted") &&
              triggers.hover_root
            ? true
            : triggers.hover_root &&
              hasVariant(globalVariants, "mode", "reveal")
            ? true
            : triggers.hover_root
            ? true
            : hasVariant(variants, "highlighted", "highlighted")
            ? true
            : hasVariant(globalVariants, "mode", "reveal")
            ? true
            : false
        )
          ? p.renderPlasmicSlot({
              defaultContents: (
                <ArrowRightIcon
                  className={classNames(projectcss.all, sty.svg__rm0Cy)}
                  role={"img"}
                />
              ),

              value: args.icon,
              className: classNames(sty.slotTargetIcon, {
                [sty.slotTargetIcon___focusVisibleWithin]:
                  triggers.focusVisibleWithin_root,
                [sty.slotTargetIconcolor_blue]: hasVariant(
                  variants,
                  "color",
                  "blue"
                ),

                [sty.slotTargetIconcolor_green]: hasVariant(
                  variants,
                  "color",
                  "green"
                ),

                [sty.slotTargetIconcolor_grey]: hasVariant(
                  variants,
                  "color",
                  "grey"
                ),

                [sty.slotTargetIconcolor_mint]: hasVariant(
                  variants,
                  "color",
                  "mint"
                ),

                [sty.slotTargetIconcolor_orange]: hasVariant(
                  variants,
                  "color",
                  "orange"
                ),

                [sty.slotTargetIconcolor_yellow]: hasVariant(
                  variants,
                  "color",
                  "yellow"
                ),

                [sty.slotTargetIconglobal_mode_reveal]: hasVariant(
                  globalVariants,
                  "mode",
                  "reveal"
                ),

                [sty.slotTargetIconhighlighted]: hasVariant(
                  variants,
                  "highlighted",
                  "highlighted"
                ),
              }),
            })
          : null}
      </p.Stack>
    </button>
  ) : null
}

const PlasmicDescendants = {
  root: ["root", "title"],
  title: ["title"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStripe__ArgProps,
      internalVariantPropNames: PlasmicStripe__VariantProps,
    })

    return PlasmicStripe__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicStripe"
  } else {
    func.displayName = `PlasmicStripe.${nodeName}`
  }
  return func
}

export const PlasmicStripe = Object.assign(
  // Top-level PlasmicStripe renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    title: makeNodeComponent("title"),
    // Metadata about props expected for PlasmicStripe
    internalVariantProps: PlasmicStripe__VariantProps,
    internalArgProps: PlasmicStripe__ArgProps,
  }
)

export default PlasmicStripe
/* prettier-ignore-end */
