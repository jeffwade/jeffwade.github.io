// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ
// Component: H9mQyyYwch
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import IconButton from "../../IconButton" // plasmic-import: mEnM6zW3GD/component
import { useMode } from "./PlasmicGlobalVariant__Mode" // plasmic-import: zulsK3o-3W/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_jeffdo_es.module.css" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss
import * as sty from "./PlasmicToolbar.module.css" // plasmic-import: H9mQyyYwch/css
import EyeOpenIcon from "./icons/PlasmicIcon__EyeOpen" // plasmic-import: J7fJnmL4N/icon
import NightIcon from "./icons/PlasmicIcon__Night" // plasmic-import: nS7MqAdlwl/icon

export const PlasmicToolbar__VariantProps = new Array()

export const PlasmicToolbar__ArgProps = new Array("reveal", "darkmode")

function PlasmicToolbar__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
  })

  return true ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),

          [sty.rootglobal_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
        }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <IconButton
            className={classNames("__wab_instance", sty.iconButton___4ZFno)}
            icon={
              <EyeOpenIcon
                className={classNames(projectcss.all, sty.svg__hhh7J)}
                cursor={"pointer"}
                role={"img"}
              />
            }
          />
        ),

        value: args.reveal,
      })}

      <p.PlasmicLink
        data-plasmic-name={"home"}
        data-plasmic-override={overrides.home}
        className={classNames(projectcss.all, projectcss.a, sty.home)}
        component={Link}
        href={"/"}
        platform={"gatsby"}
      />

      {p.renderPlasmicSlot({
        defaultContents: (
          <IconButton
            className={classNames("__wab_instance", sty.iconButton__mbVeH)}
            icon={
              <NightIcon
                className={classNames(projectcss.all, sty.svg___4VWmZ)}
                cursor={"pointer"}
                role={"img"}
              />
            }
          />
        ),

        value: args.darkmode,
      })}
    </p.Stack>
  ) : null
}

const PlasmicDescendants = {
  root: ["root", "home"],
  home: ["home"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicToolbar__ArgProps,
      internalVariantPropNames: PlasmicToolbar__VariantProps,
    })

    return PlasmicToolbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicToolbar"
  } else {
    func.displayName = `PlasmicToolbar.${nodeName}`
  }
  return func
}

export const PlasmicToolbar = Object.assign(
  // Top-level PlasmicToolbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    home: makeNodeComponent("home"),
    // Metadata about props expected for PlasmicToolbar
    internalVariantProps: PlasmicToolbar__VariantProps,
    internalArgProps: PlasmicToolbar__ArgProps,
  }
)

export default PlasmicToolbar
/* prettier-ignore-end */
