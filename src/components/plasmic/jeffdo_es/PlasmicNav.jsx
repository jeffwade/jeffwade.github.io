// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ
// Component: oYHrOG4pQI
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import IconButton from "../../IconButton" // plasmic-import: mEnM6zW3GD/component
import { useMode } from "./PlasmicGlobalVariant__Mode" // plasmic-import: zulsK3o-3W/globalVariant
import { useScreenVariants as useScreenVariantsekypzdksLjd0F } from "./PlasmicGlobalVariant__Screen" // plasmic-import: EKYPZDKSLjd0F/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_jeffdo_es.module.css" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss
import * as sty from "./PlasmicNav.module.css" // plasmic-import: oYHrOG4pQI/css
import EyeOpenIcon from "./icons/PlasmicIcon__EyeOpen" // plasmic-import: J7fJnmL4N/icon
import EyeClosedIcon from "./icons/PlasmicIcon__EyeClosed" // plasmic-import: aBAB-JPNq/icon
import JwSharpIcon from "./icons/PlasmicIcon__JwSharp" // plasmic-import: imnHY-_8sU/icon
import NightIcon from "./icons/PlasmicIcon__Night" // plasmic-import: nS7MqAdlwl/icon
import DayIcon from "./icons/PlasmicIcon__Day" // plasmic-import: 2cwRWiCxc/icon

export const PlasmicNav__VariantProps = new Array()

export const PlasmicNav__ArgProps = new Array()

function PlasmicNav__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariantsekypzdksLjd0F(),
  })

  return (hasVariant(globalVariants, "mode", "dark") ? true : true) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),

          [sty.rootglobal_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),

          [sty.rootglobal_mode_reveal]: hasVariant(
            globalVariants,
            "mode",
            "reveal"
          ),
        }
      )}
    >
      <IconButton
        data-plasmic-name={"reveal"}
        data-plasmic-override={overrides.reveal}
        className={classNames("__wab_instance", sty.reveal, {
          [sty.revealglobal_mode_reveal]: hasVariant(
            globalVariants,
            "mode",
            "reveal"
          ),
        })}
        icon={
          <p.PlasmicIcon
            PlasmicIconType={
              hasVariant(globalVariants, "mode", "reveal")
                ? EyeClosedIcon
                : EyeOpenIcon
            }
            className={classNames(projectcss.all, sty.svg__sqohL, {
              [sty.svgglobal_mode_reveal__sqohLv94Jk]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            })}
            cursor={
              hasVariant(globalVariants, "mode", "reveal")
                ? "pointer"
                : "pointer"
            }
            role={"img"}
          />
        }
        label={
          hasVariant(globalVariants, "mode", "reveal")
            ? "hide controls"
            : "show controls"
        }
      />

      <p.PlasmicLink
        data-plasmic-name={"home"}
        data-plasmic-override={overrides.home}
        className={classNames(projectcss.all, projectcss.a, sty.home, {
          [sty.homeglobal_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),

          [sty.homeglobal_mode_reveal]: hasVariant(
            globalVariants,
            "mode",
            "reveal"
          ),
        })}
        component={Link}
        href={"/design"}
        id={
          hasVariant(globalVariants, "mode", "reveal")
            ? "logo"
            : hasVariant(globalVariants, "mode", "dark")
            ? "logo"
            : "logo"
        }
        platform={"gatsby"}
        title={
          hasVariant(globalVariants, "mode", "reveal")
            ? "jeff wade"
            : hasVariant(globalVariants, "mode", "dark")
            ? "jeff wade"
            : "jeff wade"
        }
      >
        <IconButton
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames("__wab_instance", sty.logo, {
            [sty.logoglobal_mode_dark]: hasVariant(
              globalVariants,
              "mode",
              "dark"
            ),

            [sty.logoglobal_mode_reveal]: hasVariant(
              globalVariants,
              "mode",
              "reveal"
            ),
          })}
          icon={
            <p.PlasmicIcon
              PlasmicIconType={
                hasVariant(globalVariants, "mode", "reveal")
                  ? JwSharpIcon
                  : hasVariant(globalVariants, "mode", "dark")
                  ? JwSharpIcon
                  : JwSharpIcon
              }
              className={classNames(projectcss.all, sty.svg__g4Zs, {
                [sty.svgglobal_mode_dark__g4ZsJYvh]: hasVariant(
                  globalVariants,
                  "mode",
                  "dark"
                ),

                [sty.svgglobal_mode_reveal__g4Zsv94Jk]: hasVariant(
                  globalVariants,
                  "mode",
                  "reveal"
                ),
              })}
              role={"img"}
            />
          }
          label={
            hasVariant(globalVariants, "mode", "reveal")
              ? "jeff wade"
              : hasVariant(globalVariants, "mode", "dark")
              ? "jeff wade"
              : "jeff wade"
          }
        />
      </p.PlasmicLink>

      <IconButton
        data-plasmic-name={"darkmode"}
        data-plasmic-override={overrides.darkmode}
        className={classNames("__wab_instance", sty.darkmode, {
          [sty.darkmodeglobal_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),

          [sty.darkmodeglobal_mode_reveal]: hasVariant(
            globalVariants,
            "mode",
            "reveal"
          ),
        })}
        icon={
          <p.PlasmicIcon
            PlasmicIconType={
              hasVariant(globalVariants, "mode", "reveal")
                ? NightIcon
                : hasVariant(globalVariants, "mode", "dark")
                ? DayIcon
                : NightIcon
            }
            className={classNames(projectcss.all, sty.svg___4Ydrm, {
              [sty.svgglobal_mode_dark___4YdrmJYvh]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),

              [sty.svgglobal_mode_reveal___4Ydrmv94Jk]: hasVariant(
                globalVariants,
                "mode",
                "reveal"
              ),
            })}
            cursor={
              hasVariant(globalVariants, "mode", "reveal")
                ? "pointer"
                : hasVariant(globalVariants, "mode", "dark")
                ? "pointer"
                : "pointer"
            }
            role={"img"}
          />
        }
        label={
          hasVariant(globalVariants, "mode", "reveal")
            ? "skitch to light mode"
            : hasVariant(globalVariants, "mode", "dark")
            ? "switch to light mode"
            : "switch to darkmode"
        }
      />
    </div>
  ) : null
}

const PlasmicDescendants = {
  root: ["root", "reveal", "home", "logo", "darkmode"],
  reveal: ["reveal"],
  home: ["home", "logo"],
  logo: ["logo"],
  darkmode: ["darkmode"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNav__ArgProps,
      internalVariantPropNames: PlasmicNav__VariantProps,
    })

    return PlasmicNav__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicNav"
  } else {
    func.displayName = `PlasmicNav.${nodeName}`
  }
  return func
}

export const PlasmicNav = Object.assign(
  // Top-level PlasmicNav renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    reveal: makeNodeComponent("reveal"),
    home: makeNodeComponent("home"),
    logo: makeNodeComponent("logo"),
    darkmode: makeNodeComponent("darkmode"),
    // Metadata about props expected for PlasmicNav
    internalVariantProps: PlasmicNav__VariantProps,
    internalArgProps: PlasmicNav__ArgProps,
  }
)

export default PlasmicNav
/* prettier-ignore-end */
