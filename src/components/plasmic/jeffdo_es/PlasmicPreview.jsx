// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ
// Component: owBVWJcT4K
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Tag from "../../Tag" // plasmic-import: lqv31eB-tK/component
import { useScreenVariants as useScreenVariantsekypzdksLjd0F } from "./PlasmicGlobalVariant__Screen" // plasmic-import: EKYPZDKSLjd0F/globalVariant
import { useMode } from "./PlasmicGlobalVariant__Mode" // plasmic-import: zulsK3o-3W/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_jeffdo_es.module.css" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss
import * as sty from "./PlasmicPreview.module.css" // plasmic-import: owBVWJcT4K/css
import DuoIcon from "./icons/PlasmicIcon__Duo" // plasmic-import: -Sn3oKbpj/icon
import FigmaIcon from "./icons/PlasmicIcon__Figma" // plasmic-import: 0E6VNpvfVZ/icon
import PlasmicIcon from "./icons/PlasmicIcon__Plasmic" // plasmic-import: brPKQ_p-dZ/icon
import NeovimIcon from "./icons/PlasmicIcon__Neovim" // plasmic-import: vdZN0hmLgA/icon
import ProcessingIcon from "./icons/PlasmicIcon__Processing" // plasmic-import: fhhpKKup_h/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin" // plasmic-import: fNKpYQeP9/icon
import DribbbleIcon from "./icons/PlasmicIcon__Dribbble" // plasmic-import: ihEMujSlj/icon
import GithubIcon from "./icons/PlasmicIcon__Github" // plasmic-import: CEDPVo8n8/icon
import selfPortraitBj4ZnGhn7D from "./images/selfPortrait.png" // plasmic-import: BJ4znGHN7D/picture

export const PlasmicPreview__VariantProps = new Array("name")

export const PlasmicPreview__ArgProps = new Array("words")

function PlasmicPreview__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsekypzdksLjd0F(),
    mode: useMode(),
  })

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),

          [sty.rootname_brandtool]: hasVariant(variants, "name", "brandtool"),
          [sty.rootname_learnin]: hasVariant(variants, "name", "learnin"),
          [sty.rootname_likeness]: hasVariant(variants, "name", "likeness"),
          [sty.rootname_orgtool]: hasVariant(variants, "name", "orgtool"),
          [sty.rootname_sprints]: hasVariant(variants, "name", "sprints"),
          [sty.rootname_tracks]: hasVariant(variants, "name", "tracks"),
          [sty.rootname_words]: hasVariant(variants, "name", "words"),
        }
      )}
      id={hasVariant(variants, "name", "tracks") ? "contact" : undefined}
    >
      {(
        hasVariant(variants, "name", "orgtool")
          ? true
          : hasVariant(variants, "name", "brandtool")
          ? true
          : hasVariant(variants, "name", "words")
          ? true
          : hasVariant(variants, "name", "likeness")
          ? true
          : true
      ) ? (
        <div
          data-plasmic-name={"words"}
          data-plasmic-override={overrides.words}
          className={classNames(projectcss.all, sty.words, {
            [sty.wordsname_brandtool]: hasVariant(
              variants,
              "name",
              "brandtool"
            ),

            [sty.wordsname_likeness]: hasVariant(variants, "name", "likeness"),
            [sty.wordsname_orgtool]: hasVariant(variants, "name", "orgtool"),
            [sty.wordsname_words]: hasVariant(variants, "name", "words"),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tUkGt
                  )}
                >
                  {"only a few, 'cause i'm not a fan of using many."}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eActQ
                  )}
                >
                  {
                    "however, i am a fan of thinking through complex systems and mapping them to intuitive representations———facilitating experiences that make sense."
                  }
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__q4H87
                  )}
                >
                  {
                    "i believe that form follows function follows form: the way something works should inform how it looks, which will influence how it's used. my job is to guide that process in a positive way."
                  }
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ggcwH
                  )}
                >
                  {
                    "working with global enterprises, local startups and lots of clients in between, i've built digital products, crafted brand experiences, facilitated innovation workshops, filled up countless sketchbooks, and teamed up with some pretty awesome people."
                  }
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jmRsy
                  )}
                >
                  {"i'm a fan of that."}
                </div>
              </React.Fragment>
            ),

            value: args.words,
          })}
        </div>
      ) : null}
      {(
        hasVariant(variants, "name", "tracks")
          ? true
          : hasVariant(variants, "name", "sprints")
          ? true
          : hasVariant(variants, "name", "orgtool")
          ? true
          : hasVariant(variants, "name", "brandtool")
          ? true
          : hasVariant(variants, "name", "learnin")
          ? true
          : hasVariant(variants, "name", "words")
          ? true
          : true
      ) ? (
        <p.PlasmicImg
          data-plasmic-name={"likeness"}
          data-plasmic-override={overrides.likeness}
          alt={""}
          className={classNames(sty.likeness, {
            [sty.likenessname_brandtool]: hasVariant(
              variants,
              "name",
              "brandtool"
            ),

            [sty.likenessname_learnin]: hasVariant(variants, "name", "learnin"),
            [sty.likenessname_likeness]: hasVariant(
              variants,
              "name",
              "likeness"
            ),

            [sty.likenessname_orgtool]: hasVariant(variants, "name", "orgtool"),
            [sty.likenessname_sprints]: hasVariant(variants, "name", "sprints"),
            [sty.likenessname_tracks]: hasVariant(variants, "name", "tracks"),
            [sty.likenessname_words]: hasVariant(variants, "name", "words"),
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"200px"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: selfPortraitBj4ZnGhn7D,
            fullWidth: 600,
            fullHeight: 840,
            aspectRatio: undefined,
          }}
        />
      ) : null}
      {(hasVariant(variants, "name", "orgtool") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"orgtool"}
          data-plasmic-override={overrides.orgtool}
          hasGap={true}
          className={classNames(projectcss.all, sty.orgtool, {
            [sty.orgtoolname_orgtool]: hasVariant(variants, "name", "orgtool"),
          })}
        >
          <div
            className={classNames(projectcss.all, sty.columns__fKfqK, {
              [sty.columnsname_brandtool__fKfqK02Dcx]: hasVariant(
                variants,
                "name",
                "brandtool"
              ),

              [sty.columnsname_orgtool__fKfqKmi7Gi]: hasVariant(
                variants,
                "name",
                "orgtool"
              ),
            })}
          >
            {(
              hasVariant(variants, "name", "orgtool")
                ? true
                : hasVariant(variants, "name", "brandtool")
                ? true
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.column__czaT, {
                  [sty.columnname_brandtool__czaT02Dcx]: hasVariant(
                    variants,
                    "name",
                    "brandtool"
                  ),

                  [sty.columnname_orgtool__czaTmi7Gi]: hasVariant(
                    variants,
                    "name",
                    "orgtool"
                  ),
                })}
              >
                <Tag
                  className={classNames("__wab_instance", sty.tag__jlXbo, {
                    [sty.tagname_orgtool__jlXbomi7Gi]: hasVariant(
                      variants,
                      "name",
                      "orgtool"
                    ),
                  })}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oMpwN
                      )}
                    >
                      {"ux research"}
                    </div>
                  }
                />
              </div>
            ) : null}
            {(
              hasVariant(variants, "name", "orgtool")
                ? true
                : hasVariant(variants, "name", "brandtool")
                ? true
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.column__ltGx2, {
                  [sty.columnname_brandtool__ltGx202Dcx]: hasVariant(
                    variants,
                    "name",
                    "brandtool"
                  ),

                  [sty.columnname_orgtool__ltGx2Mi7Gi]: hasVariant(
                    variants,
                    "name",
                    "orgtool"
                  ),
                })}
              >
                <Tag
                  className={classNames("__wab_instance", sty.tag___80Bgw, {
                    [sty.tagname_orgtool___80BgwMi7Gi]: hasVariant(
                      variants,
                      "name",
                      "orgtool"
                    ),
                  })}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eJah
                      )}
                    >
                      {"agile workflow"}
                    </div>
                  }
                />

                <Tag
                  className={classNames("__wab_instance", sty.tag__vtN2U, {
                    [sty.tagname_orgtool__vtN2UMi7Gi]: hasVariant(
                      variants,
                      "name",
                      "orgtool"
                    ),
                  })}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__elYh9
                      )}
                    >
                      {"ux/ui design"}
                    </div>
                  }
                />
              </div>
            ) : null}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vluzm,
              {
                [sty.textname_orgtool__vluzmMi7Gi]: hasVariant(
                  variants,
                  "name",
                  "orgtool"
                ),
              }
            )}
          >
            {
              "robust organizational structure-mapping and transformation planning for enterprise clients"
            }
          </div>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "name", "learnin") ? true : true) ? (
        <div
          data-plasmic-name={"learnin"}
          data-plasmic-override={overrides.learnin}
          className={classNames(projectcss.all, sty.learnin, {
            [sty.learninname_learnin]: hasVariant(variants, "name", "learnin"),
            [sty.learninname_tracks]: hasVariant(variants, "name", "tracks"),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__z9Ey,
              {
                [sty.textname_learnin__z9EyahccJ]: hasVariant(
                  variants,
                  "name",
                  "learnin"
                ),
              }
            )}
          >
            {
              "i love to master new tools and products\nthese are a few of my favorite things"
            }
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__r0Wut, {
              [sty.freeBoxname_learnin__r0WuTahccJ]: hasVariant(
                variants,
                "name",
                "learnin"
              ),
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__b8ZD3, {
                [sty.freeBoxname_learnin__b8ZD3AhccJ]: hasVariant(
                  variants,
                  "name",
                  "learnin"
                ),
              })}
            >
              <DuoIcon
                className={classNames(projectcss.all, sty.svg__hgkQw, {
                  [sty.svgname_learnin__hgkQwahccJ]: hasVariant(
                    variants,
                    "name",
                    "learnin"
                  ),
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tuHAs,
                  {
                    [sty.textname_learnin__tuHAsahccJ]: hasVariant(
                      variants,
                      "name",
                      "learnin"
                    ),
                  }
                )}
              >
                {"duolingo"}
              </div>
            </div>

            <div
              className={classNames(projectcss.all, sty.freeBox__qHaYy, {
                [sty.freeBoxname_learnin__qHaYyahccJ]: hasVariant(
                  variants,
                  "name",
                  "learnin"
                ),
              })}
            >
              <FigmaIcon
                className={classNames(projectcss.all, sty.svg__y70L2, {
                  [sty.svgname_learnin__y70L2AhccJ]: hasVariant(
                    variants,
                    "name",
                    "learnin"
                  ),
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xzO0C,
                  {
                    [sty.textname_learnin__xzO0CahccJ]: hasVariant(
                      variants,
                      "name",
                      "learnin"
                    ),
                  }
                )}
              >
                {"figma"}
              </div>
            </div>

            <div
              className={classNames(projectcss.all, sty.freeBox__rjN70, {
                [sty.freeBoxname_learnin__rjN70AhccJ]: hasVariant(
                  variants,
                  "name",
                  "learnin"
                ),
              })}
            >
              <PlasmicIcon
                className={classNames(projectcss.all, sty.svg__cZkPa, {
                  [sty.svgname_learnin__cZkPaahccJ]: hasVariant(
                    variants,
                    "name",
                    "learnin"
                  ),
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tCun,
                  {
                    [sty.textname_learnin__tCunAhccJ]: hasVariant(
                      variants,
                      "name",
                      "learnin"
                    ),
                  }
                )}
              >
                {"plasmic"}
              </div>
            </div>

            <div
              className={classNames(projectcss.all, sty.freeBox__mnFug, {
                [sty.freeBoxname_learnin__mnFugahccJ]: hasVariant(
                  variants,
                  "name",
                  "learnin"
                ),
              })}
            >
              <NeovimIcon
                className={classNames(projectcss.all, sty.svg__qRw6L, {
                  [sty.svgname_learnin__qRw6LahccJ]: hasVariant(
                    variants,
                    "name",
                    "learnin"
                  ),
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u6AAk,
                  {
                    [sty.textname_learnin__u6AAKahccJ]: hasVariant(
                      variants,
                      "name",
                      "learnin"
                    ),
                  }
                )}
              >
                {"neovim"}
              </div>
            </div>

            <div
              className={classNames(projectcss.all, sty.freeBox__a5ZKr, {
                [sty.freeBoxname_learnin__a5ZKRahccJ]: hasVariant(
                  variants,
                  "name",
                  "learnin"
                ),
              })}
            >
              <ProcessingIcon
                className={classNames(projectcss.all, sty.svg__sK1Ji, {
                  [sty.svgname_learnin__sK1JIahccJ]: hasVariant(
                    variants,
                    "name",
                    "learnin"
                  ),
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hHbAf,
                  {
                    [sty.textname_learnin__hHbAFahccJ]: hasVariant(
                      variants,
                      "name",
                      "learnin"
                    ),
                  }
                )}
              >
                {"processing"}
              </div>
            </div>
          </p.Stack>
        </div>
      ) : null}
      {(hasVariant(variants, "name", "tracks") ? true : true) ? (
        <div
          data-plasmic-name={"tracks"}
          data-plasmic-override={overrides.tracks}
          className={classNames(projectcss.all, sty.tracks, {
            [sty.tracksname_tracks]: hasVariant(variants, "name", "tracks"),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rDhas,
              {
                [sty.textname_tracks__rDhaSfOzBj]: hasVariant(
                  variants,
                  "name",
                  "tracks"
                ),
              }
            )}
          >
            {"in sunny sandy eggo, california &"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xSz8B, {
              [sty.freeBoxname_tracks__xSz8BfOzBj]: hasVariant(
                variants,
                "name",
                "tracks"
              ),
            })}
          >
            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__xs6V
              )}
              component={Link}
              platform={"gatsby"}
            >
              <LinkedinIcon
                className={classNames(projectcss.all, sty.svg__sdmbw, {
                  [sty.svgname_tracks__sdmbwfOzBj]: hasVariant(
                    variants,
                    "name",
                    "tracks"
                  ),
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sO13D,
                  {
                    [sty.textname_tracks__sO13DfOzBj]: hasVariant(
                      variants,
                      "name",
                      "tracks"
                    ),
                  }
                )}
              >
                {"/jeffmwade"}
              </div>
            </p.Stack>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__bIrkC,
                {
                  [sty.linkname_tracks__bIrkCfOzBj]: hasVariant(
                    variants,
                    "name",
                    "tracks"
                  ),
                }
              )}
              component={Link}
              platform={"gatsby"}
            >
              <DribbbleIcon
                className={classNames(projectcss.all, sty.svg__wjqFi, {
                  [sty.svgname_tracks__wjqFIfOzBj]: hasVariant(
                    variants,
                    "name",
                    "tracks"
                  ),
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d3Yj,
                  {
                    [sty.textname_tracks__d3YjFOzBj]: hasVariant(
                      variants,
                      "name",
                      "tracks"
                    ),
                  }
                )}
              >
                {"@jeffwade"}
              </div>
            </p.Stack>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___6NQdw,
                {
                  [sty.linkname_tracks___6NQdwfOzBj]: hasVariant(
                    variants,
                    "name",
                    "tracks"
                  ),
                }
              )}
              component={Link}
              platform={"gatsby"}
            >
              <GithubIcon
                className={classNames(projectcss.all, sty.svg__cpFny, {
                  [sty.svgname_tracks__cpFnyfOzBj]: hasVariant(
                    variants,
                    "name",
                    "tracks"
                  ),
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aampz,
                  {
                    [sty.textname_tracks__aampzfOzBj]: hasVariant(
                      variants,
                      "name",
                      "tracks"
                    ),
                  }
                )}
              >
                {"@jeffwade"}
              </div>
            </p.Stack>
          </p.Stack>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qsBq,
              {
                [sty.textname_tracks__qsBqFOzBj]: hasVariant(
                  variants,
                  "name",
                  "tracks"
                ),
              }
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {"you can direct electronic post to\n"}
              </React.Fragment>
              <span
                data-plasmic-name={"span"}
                data-plasmic-override={overrides.span}
                aria-label={"email address"}
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  projectcss.plasmic_default__inline,
                  sty.span
                )}
                id={"email"}
              >
                {"yes [arobase] jeffdo [period] es"}
              </span>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
        </div>
      ) : null}
      {(
        hasVariant(variants, "name", "sprints")
          ? true
          : hasVariant(variants, "name", "orgtool")
          ? true
          : false
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"sprints"}
          data-plasmic-override={overrides.sprints}
          hasGap={true}
          className={classNames(projectcss.all, sty.sprints, {
            [sty.sprintsname_orgtool]: hasVariant(variants, "name", "orgtool"),
            [sty.sprintsname_sprints]: hasVariant(variants, "name", "sprints"),
          })}
        >
          <div
            className={classNames(projectcss.all, sty.columns__chWye, {
              [sty.columnsname_brandtool__chWye02Dcx]: hasVariant(
                variants,
                "name",
                "brandtool"
              ),

              [sty.columnsname_orgtool__chWyeMi7Gi]: hasVariant(
                variants,
                "name",
                "orgtool"
              ),

              [sty.columnsname_sprints__chWye9XxcC]: hasVariant(
                variants,
                "name",
                "sprints"
              ),
            })}
          >
            {(
              hasVariant(variants, "name", "sprints")
                ? true
                : hasVariant(variants, "name", "orgtool")
                ? true
                : hasVariant(variants, "name", "brandtool")
                ? true
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.column__uozKt, {
                  [sty.columnname_brandtool__uozKt02Dcx]: hasVariant(
                    variants,
                    "name",
                    "brandtool"
                  ),

                  [sty.columnname_orgtool__uozKtMi7Gi]: hasVariant(
                    variants,
                    "name",
                    "orgtool"
                  ),

                  [sty.columnname_sprints__uozKt9XxcC]: hasVariant(
                    variants,
                    "name",
                    "sprints"
                  ),
                })}
              >
                <Tag
                  className={classNames("__wab_instance", sty.tag__nAeA4, {
                    [sty.tagname_orgtool__nAeA4Mi7Gi]: hasVariant(
                      variants,
                      "name",
                      "orgtool"
                    ),
                  })}
                  flippabble={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oOtr7
                      )}
                    >
                      {"facilitation"}
                    </div>
                  }
                />
              </div>
            ) : null}
            {(
              hasVariant(variants, "name", "sprints")
                ? true
                : hasVariant(variants, "name", "orgtool")
                ? true
                : hasVariant(variants, "name", "brandtool")
                ? true
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.column__hg2Hk, {
                  [sty.columnname_brandtool__hg2Hk02Dcx]: hasVariant(
                    variants,
                    "name",
                    "brandtool"
                  ),

                  [sty.columnname_orgtool__hg2Hkmi7Gi]: hasVariant(
                    variants,
                    "name",
                    "orgtool"
                  ),

                  [sty.columnname_sprints__hg2Hk9XxcC]: hasVariant(
                    variants,
                    "name",
                    "sprints"
                  ),
                })}
              >
                <Tag
                  className={classNames("__wab_instance", sty.tag__c7IVv, {
                    [sty.tagname_orgtool__c7IVvMi7Gi]: hasVariant(
                      variants,
                      "name",
                      "orgtool"
                    ),
                  })}
                  flippabble={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v9MUp
                      )}
                    >
                      {"prototyping"}
                    </div>
                  }
                />
              </div>
            ) : null}
            {(
              hasVariant(variants, "name", "sprints")
                ? true
                : hasVariant(variants, "name", "orgtool")
                ? true
                : hasVariant(variants, "name", "brandtool")
                ? true
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.column__kcC5, {
                  [sty.columnname_brandtool__kcC502Dcx]: hasVariant(
                    variants,
                    "name",
                    "brandtool"
                  ),

                  [sty.columnname_orgtool__kcC5Mi7Gi]: hasVariant(
                    variants,
                    "name",
                    "orgtool"
                  ),

                  [sty.columnname_sprints__kcC59XxcC]: hasVariant(
                    variants,
                    "name",
                    "sprints"
                  ),
                })}
              >
                <Tag
                  className={classNames("__wab_instance", sty.tag__v3NoT, {
                    [sty.tagname_orgtool__v3NoTmi7Gi]: hasVariant(
                      variants,
                      "name",
                      "orgtool"
                    ),
                  })}
                  flippabble={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oTmx5
                      )}
                    >
                      {"user testing"}
                    </div>
                  }
                />
              </div>
            ) : null}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jtaLp,
              {
                [sty.textname_orgtool__jtaLpMi7Gi]: hasVariant(
                  variants,
                  "name",
                  "orgtool"
                ),

                [sty.textname_sprints__jtaLp9XxcC]: hasVariant(
                  variants,
                  "name",
                  "sprints"
                ),
              }
            )}
          >
            {
              "robust organizational structure-mapping and team planning for enterprise clients"
            }
          </div>
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "name", "orgtool")
          ? true
          : hasVariant(variants, "name", "brandtool")
          ? true
          : false
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"brandtool"}
          data-plasmic-override={overrides.brandtool}
          hasGap={true}
          className={classNames(projectcss.all, sty.brandtool, {
            [sty.brandtoolname_brandtool]: hasVariant(
              variants,
              "name",
              "brandtool"
            ),

            [sty.brandtoolname_orgtool]: hasVariant(
              variants,
              "name",
              "orgtool"
            ),
          })}
        >
          <div
            className={classNames(projectcss.all, sty.columns__gt8Ac, {
              [sty.columnsname_brandtool__gt8Ac02Dcx]: hasVariant(
                variants,
                "name",
                "brandtool"
              ),

              [sty.columnsname_orgtool__gt8Acmi7Gi]: hasVariant(
                variants,
                "name",
                "orgtool"
              ),
            })}
          >
            {(
              hasVariant(variants, "name", "orgtool")
                ? true
                : hasVariant(variants, "name", "brandtool")
                ? true
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.column__pc6K5, {
                  [sty.columnname_brandtool__pc6K502Dcx]: hasVariant(
                    variants,
                    "name",
                    "brandtool"
                  ),

                  [sty.columnname_orgtool__pc6K5Mi7Gi]: hasVariant(
                    variants,
                    "name",
                    "orgtool"
                  ),
                })}
              >
                <Tag
                  className={classNames("__wab_instance", sty.tag__aS62V, {
                    [sty.tagname_brandtool__aS62V02Dcx]: hasVariant(
                      variants,
                      "name",
                      "brandtool"
                    ),

                    [sty.tagname_orgtool__aS62Vmi7Gi]: hasVariant(
                      variants,
                      "name",
                      "orgtool"
                    ),
                  })}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bjBvD,
                        {
                          [sty.textname_brandtool__bjBvD02Dcx]: hasVariant(
                            variants,
                            "name",
                            "brandtool"
                          ),
                        }
                      )}
                    >
                      {hasVariant(variants, "name", "brandtool")
                        ? "information design"
                        : "ux research"}
                    </div>
                  }
                />
              </div>
            ) : null}
            {(
              hasVariant(variants, "name", "orgtool")
                ? true
                : hasVariant(variants, "name", "brandtool")
                ? true
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.column__rgUz1, {
                  [sty.columnname_brandtool__rgUz102Dcx]: hasVariant(
                    variants,
                    "name",
                    "brandtool"
                  ),

                  [sty.columnname_orgtool__rgUz1Mi7Gi]: hasVariant(
                    variants,
                    "name",
                    "orgtool"
                  ),
                })}
              >
                <Tag
                  className={classNames("__wab_instance", sty.tag__bfqLc, {
                    [sty.tagname_brandtool__bfqLc02Dcx]: hasVariant(
                      variants,
                      "name",
                      "brandtool"
                    ),

                    [sty.tagname_orgtool__bfqLcmi7Gi]: hasVariant(
                      variants,
                      "name",
                      "orgtool"
                    ),
                  })}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4AXb2,
                        {
                          [sty.textname_brandtool___4AXb202Dcx]: hasVariant(
                            variants,
                            "name",
                            "brandtool"
                          ),
                        }
                      )}
                    >
                      {hasVariant(variants, "name", "brandtool")
                        ? "micro-interactions"
                        : "agile workflow"}
                    </div>
                  }
                />
              </div>
            ) : null}
            {(
              hasVariant(variants, "name", "orgtool")
                ? true
                : hasVariant(variants, "name", "brandtool")
                ? true
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.column__xwus4, {
                  [sty.columnname_brandtool__xwus402Dcx]: hasVariant(
                    variants,
                    "name",
                    "brandtool"
                  ),

                  [sty.columnname_orgtool__xwus4Mi7Gi]: hasVariant(
                    variants,
                    "name",
                    "orgtool"
                  ),
                })}
              >
                <Tag
                  className={classNames("__wab_instance", sty.tag__oB0D, {
                    [sty.tagname_brandtool__oB0D02Dcx]: hasVariant(
                      variants,
                      "name",
                      "brandtool"
                    ),

                    [sty.tagname_orgtool__oB0DMi7Gi]: hasVariant(
                      variants,
                      "name",
                      "orgtool"
                    ),
                  })}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c1Qk,
                        {
                          [sty.textname_brandtool__c1Qk02Dcx]: hasVariant(
                            variants,
                            "name",
                            "brandtool"
                          ),
                        }
                      )}
                    >
                      {hasVariant(variants, "name", "brandtool")
                        ? "design system"
                        : "ux/ui design"}
                    </div>
                  }
                />
              </div>
            ) : null}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yFoO8,
              {
                [sty.textname_brandtool__yFoO802Dcx]: hasVariant(
                  variants,
                  "name",
                  "brandtool"
                ),

                [sty.textname_orgtool__yFoO8Mi7Gi]: hasVariant(
                  variants,
                  "name",
                  "orgtool"
                ),
              }
            )}
          >
            {hasVariant(variants, "name", "brandtool")
              ? "helping global brand leaders discover, manage and implement brand assets consistently"
              : "robust organizational structure-mapping and transformation planning for enterprise clients"}
          </div>
        </p.Stack>
      ) : null}
    </div>
  )
}

const PlasmicDescendants = {
  root: [
    "root",
    "words",
    "likeness",
    "orgtool",
    "learnin",
    "tracks",
    "span",
    "sprints",
    "brandtool",
  ],

  words: ["words"],
  likeness: ["likeness"],
  orgtool: ["orgtool"],
  learnin: ["learnin"],
  tracks: ["tracks", "span"],
  span: ["span"],
  sprints: ["sprints"],
  brandtool: ["brandtool"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPreview__ArgProps,
      internalVariantPropNames: PlasmicPreview__VariantProps,
    })

    return PlasmicPreview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicPreview"
  } else {
    func.displayName = `PlasmicPreview.${nodeName}`
  }
  return func
}

export const PlasmicPreview = Object.assign(
  // Top-level PlasmicPreview renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    words: makeNodeComponent("words"),
    likeness: makeNodeComponent("likeness"),
    orgtool: makeNodeComponent("orgtool"),
    learnin: makeNodeComponent("learnin"),
    tracks: makeNodeComponent("tracks"),
    span: makeNodeComponent("span"),
    sprints: makeNodeComponent("sprints"),
    brandtool: makeNodeComponent("brandtool"),
    // Metadata about props expected for PlasmicPreview
    internalVariantProps: PlasmicPreview__VariantProps,
    internalArgProps: PlasmicPreview__ArgProps,
  }
)

export default PlasmicPreview
/* prettier-ignore-end */
