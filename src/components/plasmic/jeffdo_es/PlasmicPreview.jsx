// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ
// Component: owBVWJcT4K
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_jeffdo_es.module.css" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss
import * as sty from "./PlasmicPreview.module.css" // plasmic-import: owBVWJcT4K/css
import selfPortraitBj4ZnGhn7D from "./images/selfPortrait.png" // plasmic-import: BJ4znGHN7D/picture

export const PlasmicPreview__VariantProps = new Array("variant")

export const PlasmicPreview__ArgProps = new Array()

function PlasmicPreview__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootvariant_words]: hasVariant(variants, "variant", "words") }
      )}
    >
      {(hasVariant(variants, "variant", "likeness") ? true : true) ? (
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgvariant_likeness]: hasVariant(
              variants,
              "variant",
              "likeness"
            ),
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"200px"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: selfPortraitBj4ZnGhn7D,
            fullWidth: 600,
            fullHeight: 840,
            aspectRatio: undefined,
          }}
        />
      ) : null}
      {(hasVariant(variants, "variant", "words") ? true : true) ? (
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textvariant_words]: hasVariant(variants, "variant", "words"),
            }
          )}
        >
          {
            "only a few, 'cause i'm not a fan of using a lot.\nhowever, i am a fan of thinking through complex systems and mapping them to intuitive representationsâ€”facilitating experiences that make sense.\ni believe that form follows function follows form: the way something works should inform how it looks, which will influence how it's used. my job is to guide that process in a positive way.\nworking with global enterprises, local startups and lots of clients in between, i've built digital products, crafted brand experiences, facilitated innovation workshops, filled up countless sketchbooks, and teamed up with some pretty awesome people.\nand i'm a fan of that."
          }
        </div>
      ) : null}
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root", "img", "text"],
  img: ["img"],
  text: ["text"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPreview__ArgProps,
      internalVariantPropNames: PlasmicPreview__VariantProps,
    })

    return PlasmicPreview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicPreview"
  } else {
    func.displayName = `PlasmicPreview.${nodeName}`
  }
  return func
}

export const PlasmicPreview = Object.assign(
  // Top-level PlasmicPreview renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicPreview
    internalVariantProps: PlasmicPreview__VariantProps,
    internalArgProps: PlasmicPreview__ArgProps,
  }
)

export default PlasmicPreview
/* prettier-ignore-end */
