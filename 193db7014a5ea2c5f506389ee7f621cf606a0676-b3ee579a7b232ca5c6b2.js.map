{"version":3,"file":"193db7014a5ea2c5f506389ee7f621cf606a0676-b3ee579a7b232ca5c6b2.js","mappings":"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","sources":["webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicGlobalVariant__Arrangement.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicStripe.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__WiggleArrow.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicStripe.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicTag.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicTag.module.css","webpack://jeffdoes/./src/components/Tag.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicPreview.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Duo.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Figma.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Plasmic.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Neovim.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Processing.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Linkedin.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Dribbble.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Github.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/selfPortrait.png","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/orgDesign.png","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/infoArchitecture.png","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicPreview.jsx","webpack://jeffdoes/./src/components/Preview.jsx","webpack://jeffdoes/./src/components/Stripe.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHeadlineButton.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHeadlineButton.jsx","webpack://jeffdoes/./src/components/HeadlineButton.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHeadline.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHeadline.jsx","webpack://jeffdoes/./src/components/Headline.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHomepage.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Face.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Info.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Map.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Orgtree.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Learnax.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Sprints.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__Track.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicHomepage.jsx","webpack://jeffdoes/./src/pages/index.jsx"],"sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport * as React from \"react\"\n\nexport const ArrangementContext = React.createContext(\n  \"PLEASE_RENDER_INSIDE_PROVIDER\"\n)\n\nexport function useArrangement() {\n  return React.useContext(ArrangementContext)\n}\n\nexport default ArrangementContext\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicStripe-module--root--bJ9kr\";\nexport var roothighlighted = \"PlasmicStripe-module--roothighlighted--EiH--\";\nexport var rootlowlighted = \"PlasmicStripe-module--rootlowlighted--tU-Cw\";\nexport var root___focusVisibleWithin = \"PlasmicStripe-module--root___focusVisibleWithin--ptI+B\";\nexport var title = \"PlasmicStripe-module--title--Bk9i2\";\nexport var titlecolor_grey = \"PlasmicStripe-module--titlecolor_grey--5WPD+\";\nexport var titlelowlighted = \"PlasmicStripe-module--titlelowlighted--4ExYL\";\nexport var titlecolor_red = \"PlasmicStripe-module--titlecolor_red--Znku5\";\nexport var titlecolor_orange = \"PlasmicStripe-module--titlecolor_orange--sn6Vg\";\nexport var titlecolor_yellow = \"PlasmicStripe-module--titlecolor_yellow--AAXd1\";\nexport var titlecolor_green = \"PlasmicStripe-module--titlecolor_green--YTxHx\";\nexport var titlecolor_mint = \"PlasmicStripe-module--titlecolor_mint--bLTfB\";\nexport var titlecolor_blue = \"PlasmicStripe-module--titlecolor_blue--Cu8nK\";\nexport var titlecolor_purple = \"PlasmicStripe-module--titlecolor_purple--PHLn3\";\nexport var title___focusVisibleWithin = \"PlasmicStripe-module--title___focusVisibleWithin--2G1rb\";\nexport var slotTargetLabel = \"PlasmicStripe-module--slotTargetLabel--j7CQY\";\nexport var slotTargetLabelcolor_grey = \"PlasmicStripe-module--slotTargetLabelcolor_grey--3uumD\";\nexport var slotTargetLabelcolor_orange = \"PlasmicStripe-module--slotTargetLabelcolor_orange--1MxUY\";\nexport var slotTargetLabelcolor_yellow = \"PlasmicStripe-module--slotTargetLabelcolor_yellow--GkuRT\";\nexport var slotTargetLabelcolor_green = \"PlasmicStripe-module--slotTargetLabelcolor_green--VzVFa\";\nexport var slotTargetLabelcolor_mint = \"PlasmicStripe-module--slotTargetLabelcolor_mint--r5Fpo\";\nexport var slotTargetLabelcolor_blue = \"PlasmicStripe-module--slotTargetLabelcolor_blue--TqwF5\";\nexport var __wab_slot = \"PlasmicStripe-module--__wab_slot--sA5So\";\nexport var slotTargetLabel___focusVisibleWithin = \"PlasmicStripe-module--slotTargetLabel___focusVisibleWithin--Y9tT1\";\nexport var slotTargetIcon = \"PlasmicStripe-module--slotTargetIcon--kh1EI\";\nexport var slotTargetIconcolor_grey = \"PlasmicStripe-module--slotTargetIconcolor_grey--z7Si2\";\nexport var slotTargetIconcolor_orange = \"PlasmicStripe-module--slotTargetIconcolor_orange--FRrGL\";\nexport var slotTargetIconcolor_yellow = \"PlasmicStripe-module--slotTargetIconcolor_yellow--HdCc5\";\nexport var slotTargetIconcolor_green = \"PlasmicStripe-module--slotTargetIconcolor_green--jn51U\";\nexport var slotTargetIconcolor_mint = \"PlasmicStripe-module--slotTargetIconcolor_mint--s99Ub\";\nexport var slotTargetIconcolor_blue = \"PlasmicStripe-module--slotTargetIconcolor_blue--Aj2zt\";\nexport var slotTargetIcon___focusVisibleWithin = \"PlasmicStripe-module--slotTargetIcon___focusVisibleWithin--H7FZZ\";\nexport var svg__rm0Cy = \"PlasmicStripe-module--svg__rm0Cy--CmxF9\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function WiggleArrowIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M15.5 8l.354.354a.5.5 0 000-.708L15.5 8zM0 10.5c.841 0 1.495-.212 2.03-.544.523-.325.91-.752 1.23-1.136.337-.405.576-.726.862-.972.26-.223.524-.348.878-.348v-1c-.646 0-1.132.25-1.529.59-.37.316-.693.745-.98 1.09-.305.366-.607.69-.99.926C1.13 9.337.66 9.5 0 9.5v1zm5-3a.61.61 0 01.348.09.823.823 0 01.251.287c.176.3.286.723.416 1.244.12.48.26 1.057.522 1.506.136.234.318.457.57.62.255.167.554.253.893.253v-1a.61.61 0 01-.348-.09.823.823 0 01-.251-.287c-.176-.3-.286-.723-.416-1.244-.12-.48-.26-1.057-.522-1.506a1.813 1.813 0 00-.57-.62A1.607 1.607 0 005 6.5v1zm3 4c.634 0 1.17-.24 1.628-.558.45-.311.858-.72 1.226-1.088.382-.383.725-.723 1.087-.974.354-.245.693-.38 1.059-.38v-1c-.634 0-1.17.24-1.628.558-.45.311-.858.72-1.226 1.088-.382.383-.724.723-1.087.974-.354.245-.693.38-1.059.38v1zm5-3h2.5v-1H13v1zm2.146-.854l-3 3 .708.708 3-3-.708-.708zm.708 0l-3-3-.708.708 3 3 .708-.708z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default WiggleArrowIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: JaZPnDe4BQ\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  useTrigger,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicStripe.module.css\" // plasmic-import: JaZPnDe4BQ/css\nimport WiggleArrowIcon from \"./icons/PlasmicIcon__WiggleArrow\" // plasmic-import: iZuEl1jiaD/icon\n\nexport const PlasmicStripe__VariantProps = new Array(\n  \"color\",\n  \"revealed\",\n  \"highlighted\",\n  \"lowlighted\"\n)\n\nexport const PlasmicStripe__ArgProps = new Array(\n  \"label\",\n  \"icon\",\n  \"category\",\n  \"name\"\n)\n\nfunction PlasmicStripe__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =\n    useTrigger(\"useFocusVisibleWithin\", {\n      isTextInput: false,\n    })\n\n  const [isRootHover, triggerRootHoverProps] = useTrigger(\"useHover\", {})\n  const [isRootFocusWithin, triggerRootFocusWithinProps] = useTrigger(\n    \"useFocusedWithin\",\n    {}\n  )\n\n  const triggers = {\n    focusVisibleWithin_root: isRootFocusVisibleWithin,\n    hover_root: isRootHover,\n    focusWithin_root: isRootFocusWithin,\n  }\n\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n  })\n\n  return true ? (\n    <button\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.button,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,\n          [sty.rootcolor_blue]: hasVariant(variants, \"color\", \"blue\"),\n          [sty.rootcolor_green]: hasVariant(variants, \"color\", \"green\"),\n          [sty.rootcolor_grey]: hasVariant(variants, \"color\", \"grey\"),\n          [sty.rootcolor_mint]: hasVariant(variants, \"color\", \"mint\"),\n          [sty.rootcolor_orange]: hasVariant(variants, \"color\", \"orange\"),\n          [sty.rootcolor_purple]: hasVariant(variants, \"color\", \"purple\"),\n          [sty.rootcolor_red]: hasVariant(variants, \"color\", \"red\"),\n          [sty.rootcolor_yellow]: hasVariant(variants, \"color\", \"yellow\"),\n          [sty.rootglobal_mode_reveal]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"reveal\"\n          ),\n\n          [sty.roothighlighted]: hasVariant(\n            variants,\n            \"highlighted\",\n            \"highlighted\"\n          ),\n\n          [sty.rootlowlighted]: hasVariant(\n            variants,\n            \"lowlighted\",\n            \"lowlighted\"\n          ),\n\n          [sty.rootrevealed]: hasVariant(variants, \"revealed\", \"revealed\"),\n        }\n      )}\n      id={args.name}\n      tabIndex={0}\n      data-plasmic-trigger-props={[\n        triggerRootFocusVisibleWithinProps,\n        triggerRootHoverProps,\n        triggerRootFocusWithinProps,\n      ]}\n    >\n      <p.Stack\n        as={\"div\"}\n        data-plasmic-name={\"title\"}\n        data-plasmic-override={overrides.title}\n        hasGap={true}\n        className={classNames(projectcss.all, sty.title, {\n          [sty.title___focusVisibleWithin]: triggers.focusVisibleWithin_root,\n          [sty.titlecolor_blue]: hasVariant(variants, \"color\", \"blue\"),\n          [sty.titlecolor_green]: hasVariant(variants, \"color\", \"green\"),\n          [sty.titlecolor_grey]: hasVariant(variants, \"color\", \"grey\"),\n          [sty.titlecolor_mint]: hasVariant(variants, \"color\", \"mint\"),\n          [sty.titlecolor_orange]: hasVariant(variants, \"color\", \"orange\"),\n          [sty.titlecolor_purple]: hasVariant(variants, \"color\", \"purple\"),\n          [sty.titlecolor_red]: hasVariant(variants, \"color\", \"red\"),\n          [sty.titlecolor_yellow]: hasVariant(variants, \"color\", \"yellow\"),\n          [sty.titleglobal_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.titleglobal_mode_reveal]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"reveal\"\n          ),\n\n          [sty.titlehighlighted]: hasVariant(\n            variants,\n            \"highlighted\",\n            \"highlighted\"\n          ),\n\n          [sty.titlelowlighted]: hasVariant(\n            variants,\n            \"lowlighted\",\n            \"lowlighted\"\n          ),\n\n          [sty.titlerevealed]: hasVariant(variants, \"revealed\", \"revealed\"),\n        })}\n      >\n        {(\n          triggers.focusVisibleWithin_root\n            ? true\n            : triggers.focusWithin_root\n            ? true\n            : triggers.hover_root &&\n              hasVariant(globalVariants, \"mode\", \"reveal\")\n            ? true\n            : triggers.hover_root\n            ? false\n            : hasVariant(variants, \"revealed\", \"revealed\")\n            ? true\n            : hasVariant(variants, \"highlighted\", \"highlighted\")\n            ? true\n            : hasVariant(globalVariants, \"mode\", \"reveal\")\n            ? true\n            : false\n        )\n          ? p.renderPlasmicSlot({\n              defaultContents: \"label\",\n              value: args.label,\n              className: classNames(sty.slotTargetLabel, {\n                [sty.slotTargetLabel___focusVisibleWithin]:\n                  triggers.focusVisibleWithin_root,\n                [sty.slotTargetLabelcolor_blue]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"blue\"\n                ),\n\n                [sty.slotTargetLabelcolor_green]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"green\"\n                ),\n\n                [sty.slotTargetLabelcolor_grey]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"grey\"\n                ),\n\n                [sty.slotTargetLabelcolor_mint]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"mint\"\n                ),\n\n                [sty.slotTargetLabelcolor_orange]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"orange\"\n                ),\n\n                [sty.slotTargetLabelcolor_yellow]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"yellow\"\n                ),\n\n                [sty.slotTargetLabelglobal_mode_reveal]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"reveal\"\n                ),\n\n                [sty.slotTargetLabelhighlighted]: hasVariant(\n                  variants,\n                  \"highlighted\",\n                  \"highlighted\"\n                ),\n\n                [sty.slotTargetLabelrevealed]: hasVariant(\n                  variants,\n                  \"revealed\",\n                  \"revealed\"\n                ),\n              }),\n            })\n          : null}\n        {(\n          triggers.focusVisibleWithin_root\n            ? true\n            : triggers.focusWithin_root\n            ? true\n            : triggers.hover_root &&\n              hasVariant(globalVariants, \"mode\", \"reveal\")\n            ? true\n            : triggers.hover_root\n            ? false\n            : hasVariant(variants, \"revealed\", \"revealed\")\n            ? true\n            : hasVariant(variants, \"highlighted\", \"highlighted\")\n            ? true\n            : hasVariant(globalVariants, \"mode\", \"reveal\")\n            ? true\n            : false\n        )\n          ? p.renderPlasmicSlot({\n              defaultContents: (\n                <WiggleArrowIcon\n                  className={classNames(projectcss.all, sty.svg__rm0Cy)}\n                  role={\"img\"}\n                />\n              ),\n\n              value: args.icon,\n              className: classNames(sty.slotTargetIcon, {\n                [sty.slotTargetIcon___focusVisibleWithin]:\n                  triggers.focusVisibleWithin_root,\n                [sty.slotTargetIconcolor_blue]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"blue\"\n                ),\n\n                [sty.slotTargetIconcolor_green]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"green\"\n                ),\n\n                [sty.slotTargetIconcolor_grey]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"grey\"\n                ),\n\n                [sty.slotTargetIconcolor_mint]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"mint\"\n                ),\n\n                [sty.slotTargetIconcolor_orange]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"orange\"\n                ),\n\n                [sty.slotTargetIconcolor_yellow]: hasVariant(\n                  variants,\n                  \"color\",\n                  \"yellow\"\n                ),\n\n                [sty.slotTargetIconglobal_mode_reveal]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"reveal\"\n                ),\n\n                [sty.slotTargetIconhighlighted]: hasVariant(\n                  variants,\n                  \"highlighted\",\n                  \"highlighted\"\n                ),\n\n                [sty.slotTargetIconrevealed]: hasVariant(\n                  variants,\n                  \"revealed\",\n                  \"revealed\"\n                ),\n              }),\n            })\n          : null}\n      </p.Stack>\n    </button>\n  ) : null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"title\"],\n  title: [\"title\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicStripe__ArgProps,\n      internalVariantPropNames: PlasmicStripe__VariantProps,\n    })\n\n    return PlasmicStripe__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicStripe\"\n  } else {\n    func.displayName = `PlasmicStripe.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicStripe = Object.assign(\n  // Top-level PlasmicStripe renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    title: makeNodeComponent(\"title\"),\n    // Metadata about props expected for PlasmicStripe\n    internalVariantProps: PlasmicStripe__VariantProps,\n    internalArgProps: PlasmicStripe__ArgProps,\n  }\n)\n\nexport default PlasmicStripe\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: lqv31eB-tK\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicTag.module.css\" // plasmic-import: lqv31eB-tK/css\n\nexport const PlasmicTag__VariantProps = new Array(\"stroke\")\n\nexport const PlasmicTag__ArgProps = new Array(\"label\")\n\nfunction PlasmicTag__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n  })\n\n  return (\n    <div\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.rootstroke]: hasVariant(variants, \"stroke\", \"stroke\"),\n        }\n      )}\n    >\n      {p.renderPlasmicSlot({\n        defaultContents: (\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text___7ZTu\n            )}\n          >\n            {\"label\"}\n          </div>\n        ),\n\n        value: args.label,\n        className: classNames(sty.slotTargetLabel),\n      })}\n    </div>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicTag__ArgProps,\n      internalVariantPropNames: PlasmicTag__VariantProps,\n    })\n\n    return PlasmicTag__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicTag\"\n  } else {\n    func.displayName = `PlasmicTag.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicTag = Object.assign(\n  // Top-level PlasmicTag renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    // Metadata about props expected for PlasmicTag\n    internalVariantProps: PlasmicTag__VariantProps,\n    internalArgProps: PlasmicTag__ArgProps,\n  }\n)\n\nexport default PlasmicTag\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicTag-module--root--pTGDs\";\nexport var rootstroke = \"PlasmicTag-module--rootstroke--+ZG-S\";\nexport var slotTargetLabel = \"PlasmicTag-module--slotTargetLabel--6vRHo\";\nexport var text___7ZTu = \"PlasmicTag-module--text___7ZTu---EpSK\";","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport { PlasmicTag } from \"./plasmic/jeffdo_es/PlasmicTag\"\n\nfunction Tag_(props, ref) {\n  // Use PlasmicTag to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicTag are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all TagProps here, but feel free\n  // to do whatever works for you.\n  return <PlasmicTag root={{ ref }} {...props} />\n}\n\nconst Tag = React.forwardRef(Tag_)\n\nexport default Tag\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicPreview-module--root--BE+4N\";\nexport var rootname_likeness = \"PlasmicPreview-module--rootname_likeness--klGzG\";\nexport var rootname_words = \"PlasmicPreview-module--rootname_words--RnW95\";\nexport var rootname_brandtool = \"PlasmicPreview-module--rootname_brandtool--fQh9M\";\nexport var rootname_orgtool = \"PlasmicPreview-module--rootname_orgtool---l2RB\";\nexport var rootname_tracks = \"PlasmicPreview-module--rootname_tracks--p+4dB\";\nexport var rootname_learnin = \"PlasmicPreview-module--rootname_learnin--yAS7l\";\nexport var words = \"PlasmicPreview-module--words--FMnB9\";\nexport var wordsname_likeness = \"PlasmicPreview-module--wordsname_likeness--3O90u\";\nexport var wordsname_words = \"PlasmicPreview-module--wordsname_words--7+qUE\";\nexport var wordsname_brandtool = \"PlasmicPreview-module--wordsname_brandtool--A4vjz\";\nexport var wordsname_orgtool = \"PlasmicPreview-module--wordsname_orgtool--4geac\";\nexport var text__zzYs3 = \"PlasmicPreview-module--text__zzYs3--s0A7g\";\nexport var textname_likeness__zzYs3Tam8T = \"PlasmicPreview-module--textname_likeness__zzYs3Tam8T--MSuEn\";\nexport var textname_words__zzYs3GdArj = \"PlasmicPreview-module--textname_words__zzYs3GdArj--Gg+3s\";\nexport var textname_brandtool__zzYs302Dcx = \"PlasmicPreview-module--textname_brandtool__zzYs302Dcx---4s36\";\nexport var text__fSRh = \"PlasmicPreview-module--text__fSRh--2XN+D\";\nexport var textname_likeness__fSRhTam8T = \"PlasmicPreview-module--textname_likeness__fSRhTam8T--VgtbC\";\nexport var textname_words__fSRhgdArj = \"PlasmicPreview-module--textname_words__fSRhgdArj--cU3X6\";\nexport var textname_brandtool__fSRh02Dcx = \"PlasmicPreview-module--textname_brandtool__fSRh02Dcx--pi6Ah\";\nexport var text__f2X6O = \"PlasmicPreview-module--text__f2X6O--db9kb\";\nexport var textname_likeness__f2X6OTam8T = \"PlasmicPreview-module--textname_likeness__f2X6OTam8T--3jyPs\";\nexport var textname_words__f2X6OgdArj = \"PlasmicPreview-module--textname_words__f2X6OgdArj--Omzbc\";\nexport var textname_brandtool__f2X6O02Dcx = \"PlasmicPreview-module--textname_brandtool__f2X6O02Dcx--pmM-w\";\nexport var text__tYiB = \"PlasmicPreview-module--text__tYiB--P70PX\";\nexport var textname_likeness__tYiBtam8T = \"PlasmicPreview-module--textname_likeness__tYiBtam8T--ZOuPU\";\nexport var textname_words__tYiBgdArj = \"PlasmicPreview-module--textname_words__tYiBgdArj--a+3GQ\";\nexport var textname_brandtool__tYiB02Dcx = \"PlasmicPreview-module--textname_brandtool__tYiB02Dcx--qB+UP\";\nexport var text__hWuag = \"PlasmicPreview-module--text__hWuag--lxA7r\";\nexport var textname_likeness__hWuagTam8T = \"PlasmicPreview-module--textname_likeness__hWuagTam8T--Ojeor\";\nexport var textname_words__hWuaggdArj = \"PlasmicPreview-module--textname_words__hWuaggdArj--jV8uQ\";\nexport var textname_brandtool__hWuag02Dcx = \"PlasmicPreview-module--textname_brandtool__hWuag02Dcx--OvbQD\";\nexport var likeness = \"PlasmicPreview-module--likeness--NEbCM\";\nexport var __wab_imgSpacer = \"PlasmicPreview-module--__wab_img-spacer--B-zd5\";\nexport var likenessname_likeness = \"PlasmicPreview-module--likenessname_likeness--oHghB\";\nexport var likenessname_words = \"PlasmicPreview-module--likenessname_words--SQIQl\";\nexport var likenessname_brandtool = \"PlasmicPreview-module--likenessname_brandtool--D4WmH\";\nexport var likenessname_orgtool = \"PlasmicPreview-module--likenessname_orgtool--emjlC\";\nexport var likenessname_sprints = \"PlasmicPreview-module--likenessname_sprints--mwWJX\";\nexport var likenessname_tracks = \"PlasmicPreview-module--likenessname_tracks--X4RTC\";\nexport var likenessname_learnin = \"PlasmicPreview-module--likenessname_learnin--GMuwN\";\nexport var orgtool = \"PlasmicPreview-module--orgtool--8Et4n\";\nexport var orgtoolname_orgtool = \"PlasmicPreview-module--orgtoolname_orgtool--vucTA\";\nexport var text__vluzm = \"PlasmicPreview-module--text__vluzm--fnvSF\";\nexport var freeBox__o3KS3 = \"PlasmicPreview-module--freeBox__o3KS3--o2qoi\";\nexport var tag__gphct = \"PlasmicPreview-module--tag__gphct--LjYEl\";\nexport var text__erNOd = \"PlasmicPreview-module--text__erNOd--fbXTS\";\nexport var tag___6R4Ad = \"PlasmicPreview-module--tag___6R4Ad--hk+tF\";\nexport var text__gMegt = \"PlasmicPreview-module--text__gMegt--oEljs\";\nexport var tag__ojZr = \"PlasmicPreview-module--tag__ojZr--2ymo-\";\nexport var text__rzavJ = \"PlasmicPreview-module--text__rzavJ--DUYZ0\";\nexport var img__xhkUk = \"PlasmicPreview-module--img__xhkUk--cqkPc\";\nexport var brandtool = \"PlasmicPreview-module--brandtool--wUY9d\";\nexport var brandtoolname_brandtool = \"PlasmicPreview-module--brandtoolname_brandtool--6FOou\";\nexport var text__tTtFw = \"PlasmicPreview-module--text__tTtFw--apdIn\";\nexport var freeBox__ihBuF = \"PlasmicPreview-module--freeBox__ihBuF--cR71R\";\nexport var tag___0ZkTz = \"PlasmicPreview-module--tag___0ZkTz--sHuXI\";\nexport var text__dnB2 = \"PlasmicPreview-module--text__dnB2--G9Znu\";\nexport var tag__yw9Qx = \"PlasmicPreview-module--tag__yw9Qx--zbtK3\";\nexport var text__dYOm5 = \"PlasmicPreview-module--text__dYOm5--FlXm3\";\nexport var tag___8Cg2A = \"PlasmicPreview-module--tag___8Cg2A--oKc-i\";\nexport var text__u51Tx = \"PlasmicPreview-module--text__u51Tx--gmvaH\";\nexport var img__mxcUu = \"PlasmicPreview-module--img__mxcUu--COCue\";\nexport var learnin = \"PlasmicPreview-module--learnin--nfDvS\";\nexport var learninname_learnin = \"PlasmicPreview-module--learninname_learnin--DzJA1\";\nexport var text__z9Ey = \"PlasmicPreview-module--text__z9Ey--55WM3\";\nexport var freeBox__r0Wut = \"PlasmicPreview-module--freeBox__r0Wut--c3ecQ\";\nexport var freeBox__b8ZD3 = \"PlasmicPreview-module--freeBox__b8ZD3--S45ml\";\nexport var svg__hgkQw = \"PlasmicPreview-module--svg__hgkQw--iKZpF\";\nexport var text__tuHAs = \"PlasmicPreview-module--text__tuHAs--9QaCD\";\nexport var freeBox__qHaYy = \"PlasmicPreview-module--freeBox__qHaYy--j2IFV\";\nexport var svg__y70L2 = \"PlasmicPreview-module--svg__y70L2--+O7lV\";\nexport var text__xzO0C = \"PlasmicPreview-module--text__xzO0C--Og4BF\";\nexport var freeBox__rjN70 = \"PlasmicPreview-module--freeBox__rjN70--NyVJf\";\nexport var svg__cZkPa = \"PlasmicPreview-module--svg__cZkPa--0EzhY\";\nexport var text__tCun = \"PlasmicPreview-module--text__tCun--uQW3O\";\nexport var freeBox__mnFug = \"PlasmicPreview-module--freeBox__mnFug--399aX\";\nexport var svg__qRw6L = \"PlasmicPreview-module--svg__qRw6L--8arfc\";\nexport var text__u6AAk = \"PlasmicPreview-module--text__u6AAk--1qG11\";\nexport var freeBox__a5ZKr = \"PlasmicPreview-module--freeBox__a5ZKr--9qzmJ\";\nexport var svg__sK1Ji = \"PlasmicPreview-module--svg__sK1Ji--zOKn9\";\nexport var text__hHbAf = \"PlasmicPreview-module--text__hHbAf--8lbW1\";\nexport var tracks = \"PlasmicPreview-module--tracks--3lwkH\";\nexport var tracksname_tracks = \"PlasmicPreview-module--tracksname_tracks--VGbw+\";\nexport var text__rDhas = \"PlasmicPreview-module--text__rDhas--Ml72U\";\nexport var freeBox__xSz8B = \"PlasmicPreview-module--freeBox__xSz8B--5XND0\";\nexport var link__xs6V = \"PlasmicPreview-module--link__xs6V--b0DGM\";\nexport var svg__sdmbw = \"PlasmicPreview-module--svg__sdmbw--pmLou\";\nexport var text__sO13D = \"PlasmicPreview-module--text__sO13D--vOx7e\";\nexport var link__bIrkC = \"PlasmicPreview-module--link__bIrkC--sMUR0\";\nexport var svg__wjqFi = \"PlasmicPreview-module--svg__wjqFi--diha9\";\nexport var text__d3Yj = \"PlasmicPreview-module--text__d3Yj--7z+K1\";\nexport var link___6NQdw = \"PlasmicPreview-module--link___6NQdw--Ak9Zf\";\nexport var svg__cpFny = \"PlasmicPreview-module--svg__cpFny--EMft3\";\nexport var text__aampz = \"PlasmicPreview-module--text__aampz--fQ16t\";\nexport var text__qsBq = \"PlasmicPreview-module--text__qsBq--UXad8\";\nexport var span = \"PlasmicPreview-module--span--qP-y6\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function DuoIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M3.625 7.39a.744.744 0 01-.8.737v.97c0 .623.517 1.131 1.15 1.131.632 0 1.148-.508 1.148-1.132V7.85c0-.623-.516-1.132-1.148-1.132-.208 0-.402.055-.57.15a.73.73 0 01.22.523zm7.946 0a.744.744 0 01-.799.737v.97c0 .623.516 1.131 1.149 1.131s1.149-.508 1.149-1.132V7.85c0-.623-.516-1.132-1.15-1.132-.206 0-.4.055-.569.15a.73.73 0 01.22.523z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M6.279 5.293L3.763 2.6c-.15-.148-.333-.132-.45.049-.26.452-.353.967-.284 1.466l-.748-.826c-.15-.148-.4-.132-.5.065-.253.428-.354.91-.308 1.383A3.462 3.462 0 000 7.57v1.821c0 1.903 1.565 3.462 3.513 3.462h.1a3.521 3.521 0 003.152-1.931l-.405-.07c-.05 0-.067-.017-.067-.066v-.066c.15-.754.883-1.312 1.749-1.312.815 0 1.531.574 1.681 1.312v.066c0 .05-.016.082-.066.066l-.402.069a3.517 3.517 0 003.149 1.932h.083C14.418 12.853 16 11.31 16 9.39V7.554a3.445 3.445 0 00-1.457-2.807 2.268 2.268 0 00-.308-1.393c-.083-.197-.333-.213-.483-.065l-.75.822a2.269 2.269 0 00-.299-1.462.3.3 0 00-.482-.05l-2.142 2.337a3.478 3.478 0 00-.289.276c-1.019.842-2.54.869-3.511.081zm-.135 2.458c0-1.329-1.1-2.412-2.448-2.412-1.348 0-2.447 1.083-2.447 2.412v1.46c0 1.329 1.099 2.412 2.447 2.412 1.349 0 2.448-1.083 2.448-2.412v-1.46zm6.16-2.412c1.348 0 2.447 1.083 2.447 2.412v1.46c0 1.329-1.099 2.412-2.447 2.412-1.349 0-2.448-1.083-2.448-2.412v-1.46c0-1.329 1.1-2.412 2.448-2.412z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        d={\n          \"M8.032 9.408zM6.9 10.925v.098a1.125 1.125 0 002.25 0v-.103l-1.11.192h-.06l-1.08-.187z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default DuoIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function FigmaIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        stroke: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M7.533 8A1.833 1.833 0 1111.2 8a1.833 1.833 0 01-3.667 0zm-3.196 5.963a1.833 1.833 0 011.296-3.13h1.834v1.834a1.833 1.833 0 01-3.13 1.296zm5.03-8.796H7.533V1.5h1.834a1.833 1.833 0 110 3.667zm-5.03-.537A1.833 1.833 0 015.633 1.5h1.834v3.667H5.633c-.486 0-.952-.193-1.296-.537zm0 4.666a1.833 1.833 0 011.296-3.13h1.834v3.667H5.633c-.486 0-.952-.193-1.296-.537z\"\n        }\n        stroke={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default FigmaIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function PlasmicIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M.889 12c-.49 0-.894-.4-.84-.887a8 8 0 0115.902 0c.053.488-.35.887-.84.887h-.889a6.222 6.222 0 10-12.444 0h-.89z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M2.667 12a5.333 5.333 0 0110.666 0h-1.777a3.555 3.555 0 10-7.112 0H2.667z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M5.333 12a2.667 2.667 0 015.334 0H9.333c-.245 0-.435-.21-.553-.427a.89.89 0 00-1.56 0c-.118.217-.308.427-.553.427H5.333z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default PlasmicIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function NeovimIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M3 4.182L5.308 2 13 11.818 10.692 14 3 4.182zm10 .363L10.308 2v6L13 11.454V4.545z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M5.692 14V8L3 4.545v6.91L5.692 14zm-.769-1.756V8.24L3.77 6.759v4.394l1.154 1.091z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default NeovimIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function ProcessingIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M12.683 10.31C11.62 11.375 10.097 12 8.248 12V9c1.15 0 1.878-.374 2.314-.81.45-.451.686-1.061.686-1.69s-.236-1.239-.686-1.69C10.126 4.375 9.398 4 8.248 4V1c1.85 0 3.372.626 4.435 1.69a5.378 5.378 0 011.565 3.81 5.378 5.378 0 01-1.565 3.81z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        d={\n          \"M2.245 10.004L1.048 11.6l2.4 1.8 6-8-2.4-1.8L4.35 7.196 5.683 9.86l-2.808 1.405-.63-1.26z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        d={\"M2.338 9.879l.6 1.198 2.557-1.28-1.238-2.476-1.919 2.558z\"}\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        d={\"M1 7.202l2.558-1.279 1.937 3.875-2.558 1.279L1 7.202z\"}\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default ProcessingIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function LinkedinIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M13.633 13.633h-2.37V9.92c0-.885-.017-2.025-1.234-2.025-1.235 0-1.424.965-1.424 1.96v3.778h-2.37V5.998H8.51V7.04h.031a2.494 2.494 0 012.246-1.233c2.403 0 2.846 1.58 2.846 3.637l-.001 4.188zM3.56 4.954a1.376 1.376 0 110-2.751 1.376 1.376 0 010 2.751zm1.185 8.68H2.372V5.997h2.373v7.635zM14.815 0H1.18A1.168 1.168 0 000 1.154v13.691A1.168 1.168 0 001.18 16h13.635A1.17 1.17 0 0016 14.845V1.153A1.17 1.17 0 0014.815 0\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default LinkedinIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function DribbbleIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M8 16A8 8 0 108 0a8 8 0 000 16zM1 8c0-3.864 3.136-7 7-7 3.857 0 7 3.136 7 7s-3.143 7-7 7c-3.864 0-7-3.136-7-7zm12.975-.053a5.951 5.951 0 00-1.351-3.72c-.13.167-1.132 1.457-3.333 2.353.136.281.273.577.394.866.02.044.037.088.055.132.024.061.048.121.075.179 1.935-.244 3.856.13 4.14.186l.02.004zm-2.012-4.411A5.966 5.966 0 008 2.033a6.08 6.08 0 00-1.405.159l.008.01c.192.261 1.26 1.717 2.225 3.49 2.125-.797 3.029-2.004 3.135-2.156zm-4.29 2.513a37.73 37.73 0 00-2.216-3.455 6.007 6.007 0 00-3.31 4.184h.015c.335 0 2.766.002 5.512-.73zM2.018 7.825v.183c0 1.533.585 2.938 1.534 3.993.137-.228 1.777-2.946 4.859-3.94l.117-.034.118-.035a17.784 17.784 0 00-.486-1.017c-2.983.896-5.884.858-6.142.85zm2.316 4.897A5.937 5.937 0 008 13.982a5.88 5.88 0 002.338-.478 24.719 24.719 0 00-1.275-4.532c-.008.004-.013.005-.02.007a.131.131 0 00-.018.008c-3.371 1.177-4.586 3.515-4.692 3.735zm5.838-4.024c.782 2.15 1.101 3.895 1.162 4.26a5.928 5.928 0 002.559-4.001c-.205-.069-1.845-.555-3.72-.259z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default DribbbleIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function GithubIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0016 8c0-4.42-3.58-8-8-8z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default GithubIcon\n/* prettier-ignore-end */\n","export default __webpack_public_path__ + \"static/selfPortrait-d6048d3ff3da15534ddebd1d956f9713.png\";","export default __webpack_public_path__ + \"static/orgDesign-d1f45f731d370dee96c5c2a317236c3d.png\";","export default __webpack_public_path__ + \"static/infoArchitecture-6a1765e33deb28486848e9907f643989.png\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: owBVWJcT4K\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport Tag from \"../../Tag\" // plasmic-import: lqv31eB-tK/component\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicPreview.module.css\" // plasmic-import: owBVWJcT4K/css\nimport DuoIcon from \"./icons/PlasmicIcon__Duo\" // plasmic-import: -Sn3oKbpj/icon\nimport FigmaIcon from \"./icons/PlasmicIcon__Figma\" // plasmic-import: 0E6VNpvfVZ/icon\nimport PlasmicIcon from \"./icons/PlasmicIcon__Plasmic\" // plasmic-import: brPKQ_p-dZ/icon\nimport NeovimIcon from \"./icons/PlasmicIcon__Neovim\" // plasmic-import: vdZN0hmLgA/icon\nimport ProcessingIcon from \"./icons/PlasmicIcon__Processing\" // plasmic-import: fhhpKKup_h/icon\nimport LinkedinIcon from \"./icons/PlasmicIcon__Linkedin\" // plasmic-import: fNKpYQeP9/icon\nimport DribbbleIcon from \"./icons/PlasmicIcon__Dribbble\" // plasmic-import: ihEMujSlj/icon\nimport GithubIcon from \"./icons/PlasmicIcon__Github\" // plasmic-import: CEDPVo8n8/icon\nimport selfPortraitBj4ZnGhn7D from \"./images/selfPortrait.png\" // plasmic-import: BJ4znGHN7D/picture\nimport orgDesignMeo1PxVz7 from \"./images/orgDesign.png\" // plasmic-import: meo1PxVZ7/picture\nimport infoArchitecture9E8Fl55Ys from \"./images/infoArchitecture.png\" // plasmic-import: 9E8fl55ys/picture\n\nexport const PlasmicPreview__VariantProps = new Array(\"name\")\n\nexport const PlasmicPreview__ArgProps = new Array()\n\nfunction PlasmicPreview__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n  })\n\n  return (\n    <div\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.rootname_brandtool]: hasVariant(variants, \"name\", \"brandtool\"),\n          [sty.rootname_learnin]: hasVariant(variants, \"name\", \"learnin\"),\n          [sty.rootname_likeness]: hasVariant(variants, \"name\", \"likeness\"),\n          [sty.rootname_orgtool]: hasVariant(variants, \"name\", \"orgtool\"),\n          [sty.rootname_tracks]: hasVariant(variants, \"name\", \"tracks\"),\n          [sty.rootname_words]: hasVariant(variants, \"name\", \"words\"),\n        }\n      )}\n      id={hasVariant(variants, \"name\", \"tracks\") ? \"contact\" : undefined}\n    >\n      {(\n        hasVariant(variants, \"name\", \"orgtool\")\n          ? true\n          : hasVariant(variants, \"name\", \"brandtool\")\n          ? true\n          : hasVariant(variants, \"name\", \"words\")\n          ? true\n          : hasVariant(variants, \"name\", \"likeness\")\n          ? true\n          : true\n      ) ? (\n        <div\n          data-plasmic-name={\"words\"}\n          data-plasmic-override={overrides.words}\n          className={classNames(projectcss.all, sty.words, {\n            [sty.wordsname_brandtool]: hasVariant(\n              variants,\n              \"name\",\n              \"brandtool\"\n            ),\n\n            [sty.wordsname_likeness]: hasVariant(variants, \"name\", \"likeness\"),\n            [sty.wordsname_orgtool]: hasVariant(variants, \"name\", \"orgtool\"),\n            [sty.wordsname_words]: hasVariant(variants, \"name\", \"words\"),\n          })}\n        >\n          {(\n            hasVariant(variants, \"name\", \"brandtool\")\n              ? true\n              : hasVariant(variants, \"name\", \"words\")\n              ? true\n              : hasVariant(variants, \"name\", \"likeness\")\n              ? true\n              : true\n          ) ? (\n            <div\n              className={classNames(\n                projectcss.all,\n                projectcss.__wab_text,\n                sty.text__zzYs3,\n                {\n                  [sty.textname_brandtool__zzYs302Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"brandtool\"\n                  ),\n\n                  [sty.textname_likeness__zzYs3Tam8T]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"likeness\"\n                  ),\n\n                  [sty.textname_words__zzYs3GdArj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"words\"\n                  ),\n                }\n              )}\n            >\n              {\"only a few, 'cause i'm not a fan of using many.\"}\n            </div>\n          ) : null}\n          {(\n            hasVariant(variants, \"name\", \"brandtool\")\n              ? true\n              : hasVariant(variants, \"name\", \"words\")\n              ? true\n              : hasVariant(variants, \"name\", \"likeness\")\n              ? true\n              : false\n          ) ? (\n            <div\n              className={classNames(\n                projectcss.all,\n                projectcss.__wab_text,\n                sty.text__fSRh,\n                {\n                  [sty.textname_brandtool__fSRh02Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"brandtool\"\n                  ),\n\n                  [sty.textname_likeness__fSRhTam8T]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"likeness\"\n                  ),\n\n                  [sty.textname_words__fSRhgdArj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"words\"\n                  ),\n                }\n              )}\n            >\n              {\n                \"however, i am a fan of thinking through complex systems and mapping them to intuitive representations———facilitating experiences that make sense.\"\n              }\n            </div>\n          ) : null}\n          {(\n            hasVariant(variants, \"name\", \"brandtool\")\n              ? true\n              : hasVariant(variants, \"name\", \"words\")\n              ? true\n              : hasVariant(variants, \"name\", \"likeness\")\n              ? true\n              : false\n          ) ? (\n            <div\n              className={classNames(\n                projectcss.all,\n                projectcss.__wab_text,\n                sty.text__f2X6O,\n                {\n                  [sty.textname_brandtool__f2X6O02Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"brandtool\"\n                  ),\n\n                  [sty.textname_likeness__f2X6OTam8T]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"likeness\"\n                  ),\n\n                  [sty.textname_words__f2X6OgdArj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"words\"\n                  ),\n                }\n              )}\n            >\n              {\n                \"i believe that form follows function follows form: the way something works should inform how it looks, which will influence how it's used. my job is to guide that process in a positive way.\"\n              }\n            </div>\n          ) : null}\n          {(\n            hasVariant(variants, \"name\", \"brandtool\")\n              ? true\n              : hasVariant(variants, \"name\", \"words\")\n              ? true\n              : hasVariant(variants, \"name\", \"likeness\")\n              ? true\n              : false\n          ) ? (\n            <div\n              className={classNames(\n                projectcss.all,\n                projectcss.__wab_text,\n                sty.text__tYiB,\n                {\n                  [sty.textname_brandtool__tYiB02Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"brandtool\"\n                  ),\n\n                  [sty.textname_likeness__tYiBtam8T]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"likeness\"\n                  ),\n\n                  [sty.textname_words__tYiBgdArj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"words\"\n                  ),\n                }\n              )}\n            >\n              {\n                \"working with global enterprises, local startups and lots of clients in between, i've built digital products, crafted brand experiences, facilitated innovation workshops, filled up countless sketchbooks, and teamed up with some pretty awesome people.\"\n              }\n            </div>\n          ) : null}\n          {(\n            hasVariant(variants, \"name\", \"brandtool\")\n              ? true\n              : hasVariant(variants, \"name\", \"words\")\n              ? true\n              : hasVariant(variants, \"name\", \"likeness\")\n              ? true\n              : false\n          ) ? (\n            <div\n              className={classNames(\n                projectcss.all,\n                projectcss.__wab_text,\n                sty.text__hWuag,\n                {\n                  [sty.textname_brandtool__hWuag02Dcx]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"brandtool\"\n                  ),\n\n                  [sty.textname_likeness__hWuagTam8T]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"likeness\"\n                  ),\n\n                  [sty.textname_words__hWuaggdArj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"words\"\n                  ),\n                }\n              )}\n            >\n              {\"i'm a fan of that.\"}\n            </div>\n          ) : null}\n        </div>\n      ) : null}\n      {(\n        hasVariant(variants, \"name\", \"learnin\")\n          ? true\n          : hasVariant(variants, \"name\", \"tracks\")\n          ? true\n          : hasVariant(variants, \"name\", \"sprints\")\n          ? true\n          : hasVariant(variants, \"name\", \"orgtool\")\n          ? true\n          : hasVariant(variants, \"name\", \"brandtool\")\n          ? true\n          : hasVariant(variants, \"name\", \"words\")\n          ? true\n          : true\n      ) ? (\n        <p.PlasmicImg\n          data-plasmic-name={\"likeness\"}\n          data-plasmic-override={overrides.likeness}\n          alt={\"\"}\n          className={classNames(sty.likeness, {\n            [sty.likenessname_brandtool]: hasVariant(\n              variants,\n              \"name\",\n              \"brandtool\"\n            ),\n\n            [sty.likenessname_learnin]: hasVariant(variants, \"name\", \"learnin\"),\n            [sty.likenessname_likeness]: hasVariant(\n              variants,\n              \"name\",\n              \"likeness\"\n            ),\n\n            [sty.likenessname_orgtool]: hasVariant(variants, \"name\", \"orgtool\"),\n            [sty.likenessname_sprints]: hasVariant(variants, \"name\", \"sprints\"),\n            [sty.likenessname_tracks]: hasVariant(variants, \"name\", \"tracks\"),\n            [sty.likenessname_words]: hasVariant(variants, \"name\", \"words\"),\n          })}\n          displayHeight={\"auto\"}\n          displayMaxHeight={\"none\"}\n          displayMaxWidth={\"200px\"}\n          displayMinHeight={\"0\"}\n          displayMinWidth={\"0\"}\n          displayWidth={\"auto\"}\n          loading={\"lazy\"}\n          src={{\n            src: selfPortraitBj4ZnGhn7D,\n            fullWidth: 600,\n            fullHeight: 840,\n            aspectRatio: undefined,\n          }}\n        />\n      ) : null}\n      {(hasVariant(variants, \"name\", \"orgtool\") ? true : true) ? (\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"orgtool\"}\n          data-plasmic-override={overrides.orgtool}\n          hasGap={true}\n          className={classNames(projectcss.all, sty.orgtool, {\n            [sty.orgtoolname_orgtool]: hasVariant(variants, \"name\", \"orgtool\"),\n          })}\n        >\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text__vluzm,\n              {\n                [sty.textname_orgtool__vluzmMi7Gi]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"orgtool\"\n                ),\n              }\n            )}\n          >\n            {\n              \"organizational structure mapping and planning for enterprise clients\"\n            }\n          </div>\n\n          <div\n            className={classNames(projectcss.all, sty.freeBox__o3KS3, {\n              [sty.freeBoxname_orgtool__o3KS3Mi7Gi]: hasVariant(\n                variants,\n                \"name\",\n                \"orgtool\"\n              ),\n            })}\n          >\n            <Tag\n              className={classNames(\"__wab_instance\", sty.tag__gphct, {\n                [sty.tagname_orgtool__gphctMi7Gi]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"orgtool\"\n                ),\n              })}\n              label={\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__erNOd\n                  )}\n                >\n                  {\"ux research\"}\n                </div>\n              }\n            />\n\n            <Tag\n              className={classNames(\"__wab_instance\", sty.tag___6R4Ad, {\n                [sty.tagname_orgtool___6R4AdMi7Gi]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"orgtool\"\n                ),\n              })}\n              label={\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__gMegt\n                  )}\n                >\n                  {\"agile workflow\"}\n                </div>\n              }\n            />\n\n            <Tag\n              className={classNames(\"__wab_instance\", sty.tag__ojZr, {\n                [sty.tagname_orgtool__ojZrMi7Gi]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"orgtool\"\n                ),\n              })}\n              label={\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__rzavJ\n                  )}\n                >\n                  {\"ux/ui design\"}\n                </div>\n              }\n            />\n          </div>\n\n          <p.PlasmicImg\n            alt={\"\"}\n            className={classNames(sty.img__xhkUk, {\n              [sty.imgname_orgtool__xhkUkMi7Gi]: hasVariant(\n                variants,\n                \"name\",\n                \"orgtool\"\n              ),\n            })}\n            displayHeight={\"auto\"}\n            displayMaxHeight={\"none\"}\n            displayMaxWidth={\"480px\"}\n            displayMinHeight={\"0\"}\n            displayMinWidth={\"0\"}\n            displayWidth={\"auto\"}\n            loading={\"lazy\"}\n            src={{\n              src: orgDesignMeo1PxVz7,\n              fullWidth: 2880,\n              fullHeight: 2048,\n              aspectRatio: undefined,\n            }}\n          />\n        </p.Stack>\n      ) : null}\n      {(hasVariant(variants, \"name\", \"brandtool\") ? true : true) ? (\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"brandtool\"}\n          data-plasmic-override={overrides.brandtool}\n          hasGap={true}\n          className={classNames(projectcss.all, sty.brandtool, {\n            [sty.brandtoolname_brandtool]: hasVariant(\n              variants,\n              \"name\",\n              \"brandtool\"\n            ),\n          })}\n        >\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text__tTtFw,\n              {\n                [sty.textname_brandtool__tTtFw02Dcx]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"brandtool\"\n                ),\n\n                [sty.textname_orgtool__tTtFwmi7Gi]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"orgtool\"\n                ),\n              }\n            )}\n          >\n            {\n              \"helping firm members to discover, manage and implement brand assets consistently\"\n            }\n          </div>\n\n          <div\n            className={classNames(projectcss.all, sty.freeBox__ihBuF, {\n              [sty.freeBoxname_brandtool__ihBuF02Dcx]: hasVariant(\n                variants,\n                \"name\",\n                \"brandtool\"\n              ),\n\n              [sty.freeBoxname_orgtool__ihBuFmi7Gi]: hasVariant(\n                variants,\n                \"name\",\n                \"orgtool\"\n              ),\n            })}\n          >\n            <Tag\n              className={classNames(\"__wab_instance\", sty.tag___0ZkTz, {\n                [sty.tagname_orgtool___0ZkTzMi7Gi]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"orgtool\"\n                ),\n              })}\n              label={\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__dnB2\n                  )}\n                >\n                  {\"info architecture\"}\n                </div>\n              }\n            />\n\n            <Tag\n              className={classNames(\"__wab_instance\", sty.tag__yw9Qx, {\n                [sty.tagname_orgtool__yw9QxMi7Gi]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"orgtool\"\n                ),\n              })}\n              label={\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__dYOm5\n                  )}\n                >\n                  {\"microinteractions\"}\n                </div>\n              }\n            />\n\n            <Tag\n              className={classNames(\"__wab_instance\", sty.tag___8Cg2A, {\n                [sty.tagname_orgtool___8Cg2AMi7Gi]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"orgtool\"\n                ),\n              })}\n              label={\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__u51Tx\n                  )}\n                >\n                  {\"design system\"}\n                </div>\n              }\n            />\n          </div>\n\n          <p.PlasmicImg\n            alt={\"\"}\n            className={classNames(sty.img__mxcUu, {\n              [sty.imgname_brandtool__mxcUu02Dcx]: hasVariant(\n                variants,\n                \"name\",\n                \"brandtool\"\n              ),\n            })}\n            displayHeight={\"auto\"}\n            displayMaxHeight={\"none\"}\n            displayMaxWidth={\"480px\"}\n            displayMinHeight={\"0\"}\n            displayMinWidth={\"0\"}\n            displayWidth={\"100%\"}\n            loading={\"lazy\"}\n            src={{\n              src: infoArchitecture9E8Fl55Ys,\n              fullWidth: 1280,\n              fullHeight: 944,\n              aspectRatio: undefined,\n            }}\n          />\n        </p.Stack>\n      ) : null}\n      {(hasVariant(variants, \"name\", \"learnin\") ? true : true) ? (\n        <div\n          data-plasmic-name={\"learnin\"}\n          data-plasmic-override={overrides.learnin}\n          className={classNames(projectcss.all, sty.learnin, {\n            [sty.learninname_learnin]: hasVariant(variants, \"name\", \"learnin\"),\n            [sty.learninname_tracks]: hasVariant(variants, \"name\", \"tracks\"),\n          })}\n        >\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text__z9Ey,\n              {\n                [sty.textname_learnin__z9EyahccJ]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"learnin\"\n                ),\n              }\n            )}\n          >\n            {\n              \"i love to master new tools and products\\nthese are a few of my favorite things\"\n            }\n          </div>\n\n          <p.Stack\n            as={\"div\"}\n            hasGap={true}\n            className={classNames(projectcss.all, sty.freeBox__r0Wut, {\n              [sty.freeBoxname_learnin__r0WuTahccJ]: hasVariant(\n                variants,\n                \"name\",\n                \"learnin\"\n              ),\n            })}\n          >\n            <div\n              className={classNames(projectcss.all, sty.freeBox__b8ZD3, {\n                [sty.freeBoxname_learnin__b8ZD3AhccJ]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"learnin\"\n                ),\n              })}\n            >\n              <DuoIcon\n                className={classNames(projectcss.all, sty.svg__hgkQw, {\n                  [sty.svgname_learnin__hgkQwahccJ]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"learnin\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__tuHAs,\n                  {\n                    [sty.textname_learnin__tuHAsahccJ]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"learnin\"\n                    ),\n                  }\n                )}\n              >\n                {\"duolingo\"}\n              </div>\n            </div>\n\n            <div\n              className={classNames(projectcss.all, sty.freeBox__qHaYy, {\n                [sty.freeBoxname_learnin__qHaYyahccJ]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"learnin\"\n                ),\n              })}\n            >\n              <FigmaIcon\n                className={classNames(projectcss.all, sty.svg__y70L2, {\n                  [sty.svgname_learnin__y70L2AhccJ]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"learnin\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__xzO0C,\n                  {\n                    [sty.textname_learnin__xzO0CahccJ]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"learnin\"\n                    ),\n                  }\n                )}\n              >\n                {\"figma\"}\n              </div>\n            </div>\n\n            <div\n              className={classNames(projectcss.all, sty.freeBox__rjN70, {\n                [sty.freeBoxname_learnin__rjN70AhccJ]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"learnin\"\n                ),\n              })}\n            >\n              <PlasmicIcon\n                className={classNames(projectcss.all, sty.svg__cZkPa, {\n                  [sty.svgname_learnin__cZkPaahccJ]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"learnin\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__tCun,\n                  {\n                    [sty.textname_learnin__tCunAhccJ]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"learnin\"\n                    ),\n                  }\n                )}\n              >\n                {\"plasmic\"}\n              </div>\n            </div>\n\n            <div\n              className={classNames(projectcss.all, sty.freeBox__mnFug, {\n                [sty.freeBoxname_learnin__mnFugahccJ]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"learnin\"\n                ),\n              })}\n            >\n              <NeovimIcon\n                className={classNames(projectcss.all, sty.svg__qRw6L, {\n                  [sty.svgname_learnin__qRw6LahccJ]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"learnin\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__u6AAk,\n                  {\n                    [sty.textname_learnin__u6AAKahccJ]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"learnin\"\n                    ),\n                  }\n                )}\n              >\n                {\"neovim\"}\n              </div>\n            </div>\n\n            <div\n              className={classNames(projectcss.all, sty.freeBox__a5ZKr, {\n                [sty.freeBoxname_learnin__a5ZKRahccJ]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"learnin\"\n                ),\n              })}\n            >\n              <ProcessingIcon\n                className={classNames(projectcss.all, sty.svg__sK1Ji, {\n                  [sty.svgname_learnin__sK1JIahccJ]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"learnin\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__hHbAf,\n                  {\n                    [sty.textname_learnin__hHbAFahccJ]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"learnin\"\n                    ),\n                  }\n                )}\n              >\n                {\"processing\"}\n              </div>\n            </div>\n          </p.Stack>\n        </div>\n      ) : null}\n      {(hasVariant(variants, \"name\", \"tracks\") ? true : true) ? (\n        <div\n          data-plasmic-name={\"tracks\"}\n          data-plasmic-override={overrides.tracks}\n          className={classNames(projectcss.all, sty.tracks, {\n            [sty.tracksname_tracks]: hasVariant(variants, \"name\", \"tracks\"),\n          })}\n        >\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text__rDhas,\n              {\n                [sty.textname_tracks__rDhaSfOzBj]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"tracks\"\n                ),\n              }\n            )}\n          >\n            {\"in sunny Sandy Eggo, CA &\"}\n          </div>\n\n          <p.Stack\n            as={\"div\"}\n            hasGap={true}\n            className={classNames(projectcss.all, sty.freeBox__xSz8B, {\n              [sty.freeBoxname_tracks__xSz8BfOzBj]: hasVariant(\n                variants,\n                \"name\",\n                \"tracks\"\n              ),\n            })}\n          >\n            <p.Stack\n              as={p.PlasmicLink}\n              hasGap={true}\n              className={classNames(\n                projectcss.all,\n                projectcss.a,\n                sty.link__xs6V\n              )}\n              component={Link}\n              platform={\"gatsby\"}\n            >\n              <LinkedinIcon\n                className={classNames(projectcss.all, sty.svg__sdmbw, {\n                  [sty.svgname_tracks__sdmbwfOzBj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"tracks\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__sO13D,\n                  {\n                    [sty.textname_tracks__sO13DfOzBj]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"tracks\"\n                    ),\n                  }\n                )}\n              >\n                {\"/jeffmwade\"}\n              </div>\n            </p.Stack>\n\n            <p.Stack\n              as={p.PlasmicLink}\n              hasGap={true}\n              className={classNames(\n                projectcss.all,\n                projectcss.a,\n                sty.link__bIrkC,\n                {\n                  [sty.linkname_tracks__bIrkCfOzBj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"tracks\"\n                  ),\n                }\n              )}\n              component={Link}\n              platform={\"gatsby\"}\n            >\n              <DribbbleIcon\n                className={classNames(projectcss.all, sty.svg__wjqFi, {\n                  [sty.svgname_tracks__wjqFIfOzBj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"tracks\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__d3Yj,\n                  {\n                    [sty.textname_tracks__d3YjFOzBj]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"tracks\"\n                    ),\n                  }\n                )}\n              >\n                {\"@jeffwade\"}\n              </div>\n            </p.Stack>\n\n            <p.Stack\n              as={p.PlasmicLink}\n              hasGap={true}\n              className={classNames(\n                projectcss.all,\n                projectcss.a,\n                sty.link___6NQdw,\n                {\n                  [sty.linkname_tracks___6NQdwfOzBj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"tracks\"\n                  ),\n                }\n              )}\n              component={Link}\n              platform={\"gatsby\"}\n            >\n              <GithubIcon\n                className={classNames(projectcss.all, sty.svg__cpFny, {\n                  [sty.svgname_tracks__cpFnyfOzBj]: hasVariant(\n                    variants,\n                    \"name\",\n                    \"tracks\"\n                  ),\n                })}\n                role={\"img\"}\n              />\n\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__aampz,\n                  {\n                    [sty.textname_tracks__aampzfOzBj]: hasVariant(\n                      variants,\n                      \"name\",\n                      \"tracks\"\n                    ),\n                  }\n                )}\n              >\n                {\"@jeffwade\"}\n              </div>\n            </p.Stack>\n          </p.Stack>\n\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text__qsBq,\n              {\n                [sty.textname_tracks__qsBqFOzBj]: hasVariant(\n                  variants,\n                  \"name\",\n                  \"tracks\"\n                ),\n              }\n            )}\n          >\n            <React.Fragment>\n              <React.Fragment>\n                {\"you can direct electronic post to\\n\"}\n              </React.Fragment>\n              <span\n                data-plasmic-name={\"span\"}\n                data-plasmic-override={overrides.span}\n                aria-label={\"email address\"}\n                className={classNames(\n                  projectcss.all,\n                  projectcss.span,\n                  projectcss.__wab_text,\n                  projectcss.plasmic_default__inline,\n                  sty.span\n                )}\n                id={\"email\"}\n              >\n                {\"yes [arobase] jeffdo [period] es\"}\n              </span>\n              <React.Fragment>{\"\"}</React.Fragment>\n            </React.Fragment>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\n    \"root\",\n    \"words\",\n    \"likeness\",\n    \"orgtool\",\n    \"brandtool\",\n    \"learnin\",\n    \"tracks\",\n    \"span\",\n  ],\n\n  words: [\"words\"],\n  likeness: [\"likeness\"],\n  orgtool: [\"orgtool\"],\n  brandtool: [\"brandtool\"],\n  learnin: [\"learnin\"],\n  tracks: [\"tracks\", \"span\"],\n  span: [\"span\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicPreview__ArgProps,\n      internalVariantPropNames: PlasmicPreview__VariantProps,\n    })\n\n    return PlasmicPreview__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicPreview\"\n  } else {\n    func.displayName = `PlasmicPreview.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicPreview = Object.assign(\n  // Top-level PlasmicPreview renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    words: makeNodeComponent(\"words\"),\n    likeness: makeNodeComponent(\"likeness\"),\n    orgtool: makeNodeComponent(\"orgtool\"),\n    brandtool: makeNodeComponent(\"brandtool\"),\n    learnin: makeNodeComponent(\"learnin\"),\n    tracks: makeNodeComponent(\"tracks\"),\n    span: makeNodeComponent(\"span\"),\n    // Metadata about props expected for PlasmicPreview\n    internalVariantProps: PlasmicPreview__VariantProps,\n    internalArgProps: PlasmicPreview__ArgProps,\n  }\n)\n\nexport default PlasmicPreview\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { PlasmicPreview } from \"./plasmic/jeffdo_es/PlasmicPreview\"\n\nfunction Preview_(props, ref) {\n  const { name, ...rest } = props;\n  return <PlasmicPreview name={name} root={ { ref }} {...rest} />\n}\n\nconst Preview = React.forwardRef(Preview_)\n\nexport default Preview\n","import * as React from \"react\"\nimport { useEffect, useState } from \"react\"\nimport { PlasmicStripe } from \"./plasmic/jeffdo_es/PlasmicStripe\"\nimport useTooltip from \"../hooks/useTooltip\"\nimport useMousePosition from \"../hooks/useMousePosition\"\nimport Preview from \"../components/Preview\"\n\nfunction Stripe_(props, ref) {\n  const {\n    name,\n    label,\n    icon,\n    category,\n    color,\n    mode,\n    highlighted,\n    lowlighted,\n    revealed,\n    labelIsVisible,\n    ...rest\n  } = props\n  const [isHovered, setIsHovered] = useState(false)\n  const isBrowser = typeof window !== \"undefined\";\n  const mousePosition = useMousePosition()\n  const [mobile, setMobile] = useState(undefined)\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(max-width: 768px)\")\n    window.addEventListener(\"mousemove\", () => setMobile(mediaQuery.matches), {\n      once: true,\n    })\n    mediaQuery.addEventListener(\"change\", e => setMobile(e.matches))\n  }, [])\n\n  const labelStyles = {\n    position: \"absolute\",\n    display: \"flex\",\n    gap: \"1rem\",\n    alignItems: \"center\",\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n  }\n\n  if (isBrowser) {\n    if (!mobile) {\n      if (mousePosition.x > window.innerWidth / 2) {\n        labelStyles[\"left\"] = \"auto\"\n        labelStyles[\"right\"] = window.innerWidth - mousePosition.x + 15\n        labelStyles[\"flexDirection\"] = \"row-reverse\"\n      } else {\n        labelStyles[\"left\"] = mousePosition.x + 15\n        labelStyles[\"right\"] = \"auto\"\n        labelStyles[\"flexDirection\"] = \"row\"\n      }\n    } else {\n      labelStyles[\"left\"] = \"auto\"\n      labelStyles[\"right\"] = \"auto\"\n    }\n  }\n\n  const stripeLabel = (\n    <div style={labelStyles}>\n      {icon}\n      {label}\n    </div>\n  )\n\n  const tooltipLabel = labelIsVisible ? [icon, label, icon] : null\n  const content = <Preview name={name} />\n  const tooltip = useTooltip(\n    color,\n    tooltipLabel,\n    content,\n    \"334\",\n    \"480px\",\n    false\n  )\n\n  return (\n    <>\n      {isHovered && tooltip}\n      <PlasmicStripe\n        root={{ ref }}\n        name={name}\n        color={color}\n        icon={null}\n        category={category}\n        mode={mode}\n        highlighted={highlighted}\n        lowlighted={lowlighted}\n        {...rest}\n        label={stripeLabel}\n        onMouseOver={() => setIsHovered(true)}\n        onFocus={() => setIsHovered(true)}\n        onMouseOut={() => setIsHovered(false)}\n        onBlur={() => setIsHovered(false)}\n      />\n    </>\n  )\n}\n\nconst Stripe = React.forwardRef(Stripe_)\n\nexport default Stripe\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicHeadlineButton-module--root--LFUOj\";\nexport var h1__mLmRw = \"PlasmicHeadlineButton-module--h1__mLmRw--7cXrp\";\nexport var h1global_mode_dark__mLmRwjYvh = \"PlasmicHeadlineButton-module--h1global_mode_dark__mLmRwjYvh--dr-xM\";\nexport var slotTargetWord = \"PlasmicHeadlineButton-module--slotTargetWord--ywVbD\";\nexport var slotTargetWordglobal_mode_dark = \"PlasmicHeadlineButton-module--slotTargetWordglobal_mode_dark--pAv80\";\nexport var __wab_text = \"PlasmicHeadlineButton-module--__wab_text--BuOnH\";\nexport var __wab_slotStringWrapper = \"PlasmicHeadlineButton-module--__wab_slot-string-wrapper--emheJ\";\nexport var __wab_slot = \"PlasmicHeadlineButton-module--__wab_slot--GfG3j\";\nexport var h1__pd88E = \"PlasmicHeadlineButton-module--h1__pd88E--anAyn\";\nexport var slotTargetSymbol = \"PlasmicHeadlineButton-module--slotTargetSymbol--K250U\";\nexport var slotTargetSymbolglobal_mode_dark = \"PlasmicHeadlineButton-module--slotTargetSymbolglobal_mode_dark--7J9QM\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: uHRDF-VO-A\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicHeadlineButton.module.css\" // plasmic-import: uHRDF-VO-A/css\n\nexport const PlasmicHeadlineButton__VariantProps = new Array()\n\nexport const PlasmicHeadlineButton__ArgProps = new Array(\n  \"word\",\n  \"symbol\",\n  \"label\",\n  \"color\"\n)\n\nfunction PlasmicHeadlineButton__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n  })\n\n  return (\n    <p.Stack\n      as={\"div\"}\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      hasGap={true}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.rootglobal_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n        }\n      )}\n      tabIndex={1}\n    >\n      <h1\n        className={classNames(projectcss.all, projectcss.h1, sty.h1__mLmRw, {\n          [sty.h1global_mode_dark__mLmRwjYvh]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n        })}\n      >\n        {p.renderPlasmicSlot({\n          defaultContents: \"word\",\n          value: args.word,\n          className: classNames(sty.slotTargetWord, {\n            [sty.slotTargetWordglobal_mode_dark]: hasVariant(\n              globalVariants,\n              \"mode\",\n              \"dark\"\n            ),\n          }),\n        })}\n      </h1>\n\n      <h1 className={classNames(projectcss.all, projectcss.h1, sty.h1__pd88E)}>\n        {p.renderPlasmicSlot({\n          defaultContents: \"*\",\n          value: args.symbol,\n          className: classNames(sty.slotTargetSymbol, {\n            [sty.slotTargetSymbolglobal_mode_dark]: hasVariant(\n              globalVariants,\n              \"mode\",\n              \"dark\"\n            ),\n          }),\n        })}\n      </h1>\n    </p.Stack>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicHeadlineButton__ArgProps,\n      internalVariantPropNames: PlasmicHeadlineButton__VariantProps,\n    })\n\n    return PlasmicHeadlineButton__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicHeadlineButton\"\n  } else {\n    func.displayName = `PlasmicHeadlineButton.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicHeadlineButton = Object.assign(\n  // Top-level PlasmicHeadlineButton renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    // Metadata about props expected for PlasmicHeadlineButton\n    internalVariantProps: PlasmicHeadlineButton__VariantProps,\n    internalArgProps: PlasmicHeadlineButton__ArgProps,\n  }\n)\n\nexport default PlasmicHeadlineButton\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { PlasmicHeadlineButton } from \"./plasmic/jeffdo_es/PlasmicHeadlineButton\"\nimport { useState } from \"react\";\nimport useTooltip from \"../hooks/useTooltip\";\n\nfunction HeadlineButton_(props, ref) {\n  const { color, label } = props;\n  const [isHovered, setIsHovered] = useState(false);\n  const tooltip = useTooltip(color, label, null, 120, 240, true);\n\n  return (\n    <>\n      { isHovered && tooltip }\n      <PlasmicHeadlineButton\n        root={{ ref }}\n        {...props}\n\n        onMouseOver={ () => setIsHovered(true) }\n        onMouseOut={ () => setIsHovered(false) }\n      />\n    </>\n  );\n}\n\nconst HeadlineButton = React.forwardRef(HeadlineButton_)\n\nexport default HeadlineButton\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicHeadline-module--root--+FOhO\";\nexport var headlineButton__xiaYn = \"PlasmicHeadline-module--headlineButton__xiaYn--7zs16\";\nexport var h1 = \"PlasmicHeadline-module--h1--H4unP\";\nexport var h1global_mode_dark = \"PlasmicHeadline-module--h1global_mode_dark--9wTPQ\";\nexport var textglobal_mode_dark = \"PlasmicHeadline-module--textglobal_mode_dark--Dj8Cy\";\nexport var headlineButton__b86Ep = \"PlasmicHeadline-module--headlineButton__b86Ep--GtGdy\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: KiN_FJLYI1\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport HeadlineButton from \"../../HeadlineButton\" // plasmic-import: uHRDF-VO-A/component\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicHeadline.module.css\" // plasmic-import: KiN_FJLYI1/css\n\nexport const PlasmicHeadline__VariantProps = new Array()\n\nexport const PlasmicHeadline__ArgProps = new Array(\"end\", \"first\")\n\nfunction PlasmicHeadline__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    screen: useScreenVariantsekypzdksLjd0F(),\n    mode: useMode(),\n  })\n\n  return (\n    <p.Stack\n      as={\"div\"}\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      hasGap={true}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n        }\n      )}\n      tabIndex={-1}\n    >\n      {p.renderPlasmicSlot({\n        defaultContents: (\n          <HeadlineButton\n            className={classNames(\"__wab_instance\", sty.headlineButton__xiaYn)}\n            color={\"purple\"}\n            label={\"*about jeff\"}\n            word={\"Jeff\"}\n          />\n        ),\n\n        value: args.first,\n      })}\n\n      <h1\n        data-plasmic-name={\"h1\"}\n        data-plasmic-override={overrides.h1}\n        className={classNames(projectcss.all, projectcss.h1, sty.h1, {\n          [sty.h1global_mode_dark]: hasVariant(globalVariants, \"mode\", \"dark\"),\n        })}\n      >\n        <div\n          data-plasmic-name={\"text\"}\n          data-plasmic-override={overrides.text}\n          className={classNames(\n            projectcss.all,\n            projectcss.__wab_text,\n            sty.text,\n            {\n              [sty.textglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n            }\n          )}\n        >\n          {hasVariant(globalVariants, \"mode\", \"dark\") ? \"does\" : \"does\"}\n        </div>\n      </h1>\n\n      {p.renderPlasmicSlot({\n        defaultContents: (\n          <HeadlineButton\n            className={classNames(\"__wab_instance\", sty.headlineButton__b86Ep)}\n            color={\"purple\"}\n            label={\"†work samples\"}\n            symbol={\"†\"}\n            word={\"design\"}\n          />\n        ),\n\n        value: args.end,\n      })}\n    </p.Stack>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"h1\", \"text\"],\n  h1: [\"h1\", \"text\"],\n  text: [\"text\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicHeadline__ArgProps,\n      internalVariantPropNames: PlasmicHeadline__VariantProps,\n    })\n\n    return PlasmicHeadline__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicHeadline\"\n  } else {\n    func.displayName = `PlasmicHeadline.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicHeadline = Object.assign(\n  // Top-level PlasmicHeadline renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    h1: makeNodeComponent(\"h1\"),\n    text: makeNodeComponent(\"text\"),\n    // Metadata about props expected for PlasmicHeadline\n    internalVariantProps: PlasmicHeadline__VariantProps,\n    internalArgProps: PlasmicHeadline__ArgProps,\n  }\n)\n\nexport default PlasmicHeadline\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { PlasmicHeadline } from \"./plasmic/jeffdo_es/PlasmicHeadline\"\n\nfunction Headline_(props, ref) {\n\n  return (\n    <PlasmicHeadline\n      root={{ ref }}\n      {...props}\n    />\n  )\n}\n\nconst Headline = React.forwardRef(Headline_)\n\nexport default Headline\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicHomepage-module--root--piTGt\";\nexport var rootglobal_mode_dark = \"PlasmicHomepage-module--rootglobal_mode_dark--gDrQH\";\nexport var rootglobal_arrangement_float = \"PlasmicHomepage-module--rootglobal_arrangement_float--jSXK7\";\nexport var likeness = \"PlasmicHomepage-module--likeness--kjgie\";\nexport var likenessglobal_arrangement_float = \"PlasmicHomepage-module--likenessglobal_arrangement_float--T6f4U\";\nexport var svg__gvVi7 = \"PlasmicHomepage-module--svg__gvVi7--b1ybr\";\nexport var words = \"PlasmicHomepage-module--words--xbRgA\";\nexport var wordsglobal_arrangement_float = \"PlasmicHomepage-module--wordsglobal_arrangement_float--22vAC\";\nexport var text__oP3Fs = \"PlasmicHomepage-module--text__oP3Fs---TVyO\";\nexport var svg__iok3E = \"PlasmicHomepage-module--svg__iok3E--SoAeQ\";\nexport var headline = \"PlasmicHomepage-module--headline--JnSyO\";\nexport var headlineglobal_mode_dark = \"PlasmicHomepage-module--headlineglobal_mode_dark--FdBUU\";\nexport var headlineglobal_arrangement_float = \"PlasmicHomepage-module--headlineglobal_arrangement_float--WNEW2\";\nexport var design = \"PlasmicHomepage-module--design--FmwK2\";\nexport var jeff = \"PlasmicHomepage-module--jeff--JRnZO\";\nexport var brandtool = \"PlasmicHomepage-module--brandtool--Cak6L\";\nexport var brandtoolglobal_arrangement_float = \"PlasmicHomepage-module--brandtoolglobal_arrangement_float--d6eAa\";\nexport var svg__laIzF = \"PlasmicHomepage-module--svg__laIzF--kg8yO\";\nexport var orgtool = \"PlasmicHomepage-module--orgtool--SMO2Q\";\nexport var orgtoolglobal_arrangement_float = \"PlasmicHomepage-module--orgtoolglobal_arrangement_float--FVaz6\";\nexport var text__raQdW = \"PlasmicHomepage-module--text__raQdW--EtU0y\";\nexport var svg__ff02 = \"PlasmicHomepage-module--svg__ff02--GM5f-\";\nexport var learnin = \"PlasmicHomepage-module--learnin--aGch6\";\nexport var learninglobal_mode_reveal = \"PlasmicHomepage-module--learninglobal_mode_reveal--TcIXc\";\nexport var learninglobal_highlight_about = \"PlasmicHomepage-module--learninglobal_highlight_about--DjwgT\";\nexport var learninglobal_highlight_work = \"PlasmicHomepage-module--learninglobal_highlight_work--pjD1c\";\nexport var learninglobal_arrangement_float = \"PlasmicHomepage-module--learninglobal_arrangement_float--jrEiH\";\nexport var svg__ofC2X = \"PlasmicHomepage-module--svg__ofC2X--z5xmd\";\nexport var sprints = \"PlasmicHomepage-module--sprints--tbjRy\";\nexport var sprintsglobal_arrangement_float = \"PlasmicHomepage-module--sprintsglobal_arrangement_float--zLHm4\";\nexport var svg__hgkau = \"PlasmicHomepage-module--svg__hgkau--derWS\";\nexport var tracks = \"PlasmicHomepage-module--tracks--I94SR\";\nexport var tracksglobal_arrangement_float = \"PlasmicHomepage-module--tracksglobal_arrangement_float--hUKjN\";\nexport var svg__xhEae = \"PlasmicHomepage-module--svg__xhEae--1MBWO\";\nexport var freeBox = \"PlasmicHomepage-module--freeBox--kRCni\";\nexport var freeBoxglobal_arrangement_float = \"PlasmicHomepage-module--freeBoxglobal_arrangement_float--JQrSm\";\nexport var reveal = \"PlasmicHomepage-module--reveal--XQTzX\";\nexport var svg__tyr6 = \"PlasmicHomepage-module--svg__tyr6--czJdn\";\nexport var home = \"PlasmicHomepage-module--home--bY6JX\";\nexport var svg___1A3Bw = \"PlasmicHomepage-module--svg___1A3Bw--EM64l\";\nexport var svgglobal_mode_dark___1A3BwJYvh = \"PlasmicHomepage-module--svgglobal_mode_dark___1A3BwJYvh--aTbF4\";\nexport var svg___9Ekg = \"PlasmicHomepage-module--svg___9Ekg--ZCzw6\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function FaceIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M16 8A8 8 0 110 8a8 8 0 0116 0zm-5-2.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM3.5 7a1.5 1.5 0 100-3 1.5 1.5 0 000 3zM5 11.5L6.5 2h1.2l-1.2 8H8v1.5H5zm5-1.5h3.5c-.5 2-3 4-5.5 4 2-1.5 2.5-2.5 2-4z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default FaceIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function InfoIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M8 16A8 8 0 108 0a8 8 0 000 16zM9.6 4a1.6 1.6 0 11-3.2 0 1.6 1.6 0 013.2 0zM6.4 7.2h3.2s.4.8.4 1.6c0 .4-.3.8-.6 1.2-.3.4-.6.8-.6 1.2 0 .8.8 2.4.8 2.4H6.4s-.8-1.6-.8-2.4c0-.4.3-.8.6-1.2.3-.4.6-.8.6-1.2 0-.8-.4-1.6-.4-1.6z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default InfoIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function MapIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M12.574 4.913c-.579.631-1.214 1.273-1.964 1.85L9.39 5.177c.623-.479 1.16-1.017 1.696-1.601-.632-.581-1.274-1.22-1.847-1.968L10.826.392c.475.62 1.012 1.157 1.597 1.695.578-.63 1.215-1.27 1.967-1.85l1.22 1.586c-.626.48-1.164 1.019-1.7 1.602.635.581 1.279 1.22 1.851 1.967l-1.587 1.216c-.474-.618-1.012-1.155-1.6-1.695zM7.061 10.44c-.342.939-.265 1.769.247 2.471.332.456.67.674.965.774.3.101.62.102.943.017.71-.186 1.225-.718 1.344-1.044.213-.585.089-.908-.133-1.159-.288-.325-.853-.632-1.683-.835a8.547 8.547 0 00-1.683-.224zm-2.114.155c-.232 1.181-.05 2.403.745 3.494.546.75 1.209 1.243 1.939 1.49.724.245 1.45.227 2.094.057 1.227-.322 2.333-1.246 2.715-2.294.445-1.222.228-2.329-.515-3.168-.677-.765-1.7-1.207-2.706-1.453a9.608 9.608 0 00-.965-.182c.383-.431.837-.85 1.352-1.244l-1.212-1.59c-1.044.796-1.946 1.74-2.578 2.76-.992.074-1.967.276-2.732.626-.88.402-1.835 1.183-2.34 2.304-.53 1.177-.507 2.61.399 4.12l1.714-1.03c-.594-.99-.53-1.733-.289-2.27.267-.59.812-1.06 1.348-1.306a4.787 4.787 0 011.03-.314z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default MapIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function OrgtreeIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M9.5 12.706c0-1.267 1.007-2.294 2.25-2.294S14 11.439 14 12.706C14 13.973 12.993 15 11.75 15S9.5 13.973 9.5 12.706zM5.75 3.294C5.75 2.027 6.757 1 8 1s2.25 1.027 2.25 2.294c0 1.267-1.007 2.294-2.25 2.294S5.75 4.561 5.75 3.294zm-1.5 7.118c-1.243 0-2.25 1.027-2.25 2.294C2 13.973 3.007 15 4.25 15s2.25-1.027 2.25-2.294c0-1.267-1.007-2.294-2.25-2.294zm3-4.441h1.5v.764h3.75v3.294H11V8.265H5v1.764H3.5V6.735h3.75v-.764z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default OrgtreeIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function LearnaxIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M2.275 2.364A1 1 0 001 3.326v8.92a1 1 0 00.725.961L8 15l6.275-1.793a1 1 0 00.725-.961v-8.92a1 1 0 00-1.275-.962L8 4 2.275 2.364zm11.24 3.757a.5.5 0 10-.243-.97l-3.03.758a.5.5 0 00.243.97l3.03-.758zm-.97 2.2a.5.5 0 10-.243-.97l-2.06.515a.5.5 0 00.243.97l2.06-.515zm.97 1.558a.5.5 0 10-.243-.97l-3.03.757a.5.5 0 00.243.97l3.03-.757zm-10.5.485c.067-.268.606-.364.606-.364l2.06.515a.5.5 0 01-.242.97l-2.06-.515a.5.5 0 01-.364-.606zM2 5.698c.025.583.645 1.724 1.787 1.674-.037-.875.188-.903.188-.903.06-.031 1.694 1.504 1.936 1.813.1.13.15.262.193.378.06.162.108.29.266.332.27.073.845-.392.546-.608-.3-.216-2.416-2.144-2.531-2.371l.199-.315L3.912 5c-.42.568-1.26.669-1.912.698z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default LearnaxIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function SprintsIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M12.214 2.857a1.857 1.857 0 11-3.714 0 1.857 1.857 0 013.714 0zm.929 0A2.786 2.786 0 117.73 1.93H2v3.495a2.786 2.786 0 014.639 2.233c-.29-.102-.6-.157-.925-.157a1.857 1.857 0 10-2.572 1.714 2.772 2.772 0 00-.21.915A2.783 2.783 0 012 9.576V14h6.158c2.663 0 4.985-.516 6.842-1.857-.763-3.434-.734-5.7-.7-8.39.008-.582.016-1.185.016-1.824h-1.332c.103.29.159.603.159.928zm-7.429 9.286a1.857 1.857 0 100-3.714 1.857 1.857 0 000 3.714z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default SprintsIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function TrackIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M8.301 8.194c1.86-.045 1.81 2.285 2.236 2.804.426.52 1.04 1.29 1.703 1.559.663.27.086 2.221-.309 2.903-.345.596-1.882-.205-3.389-.267-1.43-.059-2.834.644-3.161.267-.353-.405-.5-.832-.806-2.384-.277-1.413 1.278-2.078 1.704-2.597.426-.52.133-2.24 2.022-2.285z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n\n      <path\n        d={\n          \"M14.779 9.965c-.158.992-1.17 1.655-2.261 1.48-1.091-.173-1.847-1.118-1.69-2.11.159-.991 1.386-3 2.477-2.827 1.09.174 1.632 2.465 1.474 3.457zM12.61 4.481a2 2 0 01-3.979.416c-.115-1.098.527-3.574 1.625-3.689 1.099-.115 2.239 2.174 2.354 3.273zm-4.147.398a2 2 0 11-3.983-.378c.105-1.1 1.223-3.4 2.323-3.296 1.1.105 1.764 2.574 1.66 3.674zM5.648 8.874c.241.975-.432 1.98-1.504 2.246-1.073.265-2.138-.31-2.379-1.284-.241-.975.104-3.304 1.176-3.57C4.013 6.002 5.406 7.9 5.648 8.874z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default TrackIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: ZgtgOwq6J5gf\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport Stripe from \"../../Stripe\" // plasmic-import: JaZPnDe4BQ/component\nimport Headline from \"../../Headline\" // plasmic-import: KiN_FJLYI1/component\nimport HeadlineButton from \"../../HeadlineButton\" // plasmic-import: uHRDF-VO-A/component\nimport IconButton from \"../../IconButton\" // plasmic-import: mEnM6zW3GD/component\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport { useHighlight } from \"./PlasmicGlobalVariant__Highlight\" // plasmic-import: ntiwPmQAsH/globalVariant\nimport { useArrangement } from \"./PlasmicGlobalVariant__Arrangement\" // plasmic-import: hhgYSeu_QK/globalVariant\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicHomepage.module.css\" // plasmic-import: ZgtgOwq6J5gf/css\nimport FaceIcon from \"./icons/PlasmicIcon__Face\" // plasmic-import: BZoH_3Sy18/icon\nimport InfoIcon from \"./icons/PlasmicIcon__Info\" // plasmic-import: 5Sy2g4y6V/icon\nimport MapIcon from \"./icons/PlasmicIcon__Map\" // plasmic-import: i-ZGrNlsT/icon\nimport OrgtreeIcon from \"./icons/PlasmicIcon__Orgtree\" // plasmic-import: j92l7Cm_Yv/icon\nimport LearnaxIcon from \"./icons/PlasmicIcon__Learnax\" // plasmic-import: PH_4kYBwV/icon\nimport SprintsIcon from \"./icons/PlasmicIcon__Sprints\" // plasmic-import: 0hscHUcbO/icon\nimport TrackIcon from \"./icons/PlasmicIcon__Track\" // plasmic-import: GuFQhLpY5/icon\nimport EyeOpenIcon from \"./icons/PlasmicIcon__EyeOpen\" // plasmic-import: J7fJnmL4N/icon\nimport EyeClosedIcon from \"./icons/PlasmicIcon__EyeClosed\" // plasmic-import: aBAB-JPNq/icon\nimport JwSharpIcon from \"./icons/PlasmicIcon__JwSharp\" // plasmic-import: imnHY-_8sU/icon\nimport NightIcon from \"./icons/PlasmicIcon__Night\" // plasmic-import: nS7MqAdlwl/icon\nimport DayIcon from \"./icons/PlasmicIcon__Day\" // plasmic-import: 2cwRWiCxc/icon\n\nexport const PlasmicHomepage__VariantProps = new Array()\n\nexport const PlasmicHomepage__ArgProps = new Array(\"path\")\n\nfunction PlasmicHomepage__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n    highlight: useHighlight(),\n    arrangement: useArrangement(),\n    screen: useScreenVariantsekypzdksLjd0F(),\n  })\n\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          hasGap={true}\n          className={classNames(\n            projectcss.all,\n            projectcss.root_reset,\n            projectcss.plasmic_default_styles,\n            projectcss.plasmic_tokens,\n            sty.root,\n            {\n              [projectcss.global_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.rootglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.rootglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.rootglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.rootglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.rootglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            }\n          )}\n        >\n          <Stripe\n            data-plasmic-name={\"likeness\"}\n            data-plasmic-override={overrides.likeness}\n            category={\"about\"}\n            className={classNames(\"__wab_instance\", sty.likeness, {\n              [sty.likenessglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.likenessglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.likenessglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.likenessglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.likenessglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\n              hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                ? \"mint\"\n                : \"mint\"\n            }\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            icon={\n              <FaceIcon\n                className={classNames(projectcss.all, sty.svg__gvVi7)}\n                role={\"img\"}\n              />\n            }\n            label={\"a likeness\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            name={\"likeness\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"words\"}\n            data-plasmic-override={overrides.words}\n            category={\"about\"}\n            className={classNames(\"__wab_instance\", sty.words, {\n              [sty.wordsglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.wordsglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.wordsglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.wordsglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.wordsglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"yellow\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            icon={\n              <InfoIcon\n                className={classNames(projectcss.all, sty.svg__iok3E)}\n                role={\"img\"}\n              />\n            }\n            label={\n              <div\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text__oP3Fs,\n                  {\n                    [sty.textglobal_mode_reveal__oP3FSv94Jk]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"reveal\"\n                    ),\n                  }\n                )}\n              >\n                {\"some words\"}\n              </div>\n            }\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            name={\"words\"}\n          />\n\n          <Headline\n            data-plasmic-name={\"headline\"}\n            data-plasmic-override={overrides.headline}\n            className={classNames(\"__wab_instance\", sty.headline, {\n              [sty.headlineglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.headlineglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.headlineglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.headlineglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            end={\n              <HeadlineButton\n                data-plasmic-name={\"design\"}\n                data-plasmic-override={overrides.design}\n                className={classNames(\"__wab_instance\", sty.design, {\n                  [sty.designglobal_highlight_about]: hasVariant(\n                    globalVariants,\n                    \"highlight\",\n                    \"about\"\n                  ),\n\n                  [sty.designglobal_highlight_work]: hasVariant(\n                    globalVariants,\n                    \"highlight\",\n                    \"work\"\n                  ),\n\n                  [sty.designglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.designglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                color={\"purple\"}\n                label={\"† case studies\"}\n                symbol={\"†\"}\n                word={\"design\"}\n              />\n            }\n            first={\n              <HeadlineButton\n                data-plasmic-name={\"jeff\"}\n                data-plasmic-override={overrides.jeff}\n                className={classNames(\"__wab_instance\", sty.jeff, {\n                  [sty.jeffglobal_arrangement_float]: hasVariant(\n                    globalVariants,\n                    \"arrangement\",\n                    \"float\"\n                  ),\n\n                  [sty.jeffglobal_highlight_about]: hasVariant(\n                    globalVariants,\n                    \"highlight\",\n                    \"about\"\n                  ),\n\n                  [sty.jeffglobal_highlight_work]: hasVariant(\n                    globalVariants,\n                    \"highlight\",\n                    \"work\"\n                  ),\n\n                  [sty.jeffglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.jeffglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                color={\"purple\"}\n                label={\"* about jeff\"}\n                word={\"Jeff\"}\n              />\n            }\n          />\n\n          <Stripe\n            data-plasmic-name={\"brandtool\"}\n            data-plasmic-override={overrides.brandtool}\n            category={\"work\"}\n            className={classNames(\"__wab_instance\", sty.brandtool, {\n              [sty.brandtoolglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.brandtoolglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.brandtoolglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.brandtoolglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"orange\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            icon={\n              <MapIcon\n                className={classNames(projectcss.all, sty.svg__laIzF)}\n                role={\"img\"}\n              />\n            }\n            label={\"brand navigator\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            name={\"brandtool\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"orgtool\"}\n            data-plasmic-override={overrides.orgtool}\n            category={\"work\"}\n            className={classNames(\"__wab_instance\", sty.orgtool, {\n              [sty.orgtoolglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.orgtoolglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.orgtoolglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.orgtoolglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n\n              [sty.orgtoolglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"blue\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            icon={\n              <OrgtreeIcon\n                className={classNames(projectcss.all, sty.svg__ff02)}\n                role={\"img\"}\n              />\n            }\n            label={\n              true ? (\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__raQdW\n                  )}\n                >\n                  {\"org-design tool\"}\n                </div>\n              ) : null\n            }\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            name={\"orgtool\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"learnin\"}\n            data-plasmic-override={overrides.learnin}\n            category={\"about\"}\n            className={classNames(\"__wab_instance\", sty.learnin, {\n              [sty.learninglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.learninglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.learninglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.learninglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"purple\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            icon={\n              <LearnaxIcon\n                className={classNames(projectcss.all, sty.svg__ofC2X)}\n                role={\"img\"}\n              />\n            }\n            label={\"tools and learnins\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            name={\"learnin\"}\n            revealed={\n              hasVariant(globalVariants, \"mode\", \"reveal\") ? true : undefined\n            }\n          />\n\n          <Stripe\n            data-plasmic-name={\"sprints\"}\n            data-plasmic-override={overrides.sprints}\n            category={\"work\"}\n            className={classNames(\"__wab_instance\", sty.sprints, {\n              [sty.sprintsglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.sprintsglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.sprintsglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.sprintsglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"grey\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            icon={\n              <SprintsIcon\n                className={classNames(projectcss.all, sty.svg__hgkau)}\n                role={\"img\"}\n              />\n            }\n            label={\"sprints & workshops\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            name={\"sprints\"}\n          />\n\n          <Stripe\n            data-plasmic-name={\"tracks\"}\n            data-plasmic-override={overrides.tracks}\n            category={\"about\"}\n            className={classNames(\"__wab_instance\", sty.tracks, {\n              [sty.tracksglobal_arrangement_float]: hasVariant(\n                globalVariants,\n                \"arrangement\",\n                \"float\"\n              ),\n\n              [sty.tracksglobal_highlight_about]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"about\"\n              ),\n\n              [sty.tracksglobal_highlight_work]: hasVariant(\n                globalVariants,\n                \"highlight\",\n                \"work\"\n              ),\n\n              [sty.tracksglobal_mode_reveal]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"reveal\"\n              ),\n            })}\n            color={\"red\"}\n            highlighted={\n              hasVariant(globalVariants, \"highlight\", \"about\")\n                ? true\n                : undefined\n            }\n            icon={\n              <TrackIcon\n                className={classNames(projectcss.all, sty.svg__xhEae)}\n                role={\"img\"}\n              />\n            }\n            label={\"leaving tracks\"}\n            lowlighted={\n              hasVariant(globalVariants, \"highlight\", \"work\") ? true : undefined\n            }\n            name={\"tracks\"}\n          />\n\n          {true ? (\n            <div\n              data-plasmic-name={\"freeBox\"}\n              data-plasmic-override={overrides.freeBox}\n              className={classNames(projectcss.all, sty.freeBox, {\n                [sty.freeBoxglobal_arrangement_float]: hasVariant(\n                  globalVariants,\n                  \"arrangement\",\n                  \"float\"\n                ),\n\n                [sty.freeBoxglobal_mode_dark]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"dark\"\n                ),\n              })}\n            >\n              <IconButton\n                data-plasmic-name={\"reveal\"}\n                data-plasmic-override={overrides.reveal}\n                className={classNames(\"__wab_instance\", sty.reveal, {\n                  [sty.revealglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                icon={\n                  <p.PlasmicIcon\n                    PlasmicIconType={\n                      hasVariant(globalVariants, \"mode\", \"reveal\")\n                        ? EyeClosedIcon\n                        : EyeOpenIcon\n                    }\n                    className={classNames(projectcss.all, sty.svg__tyr6, {\n                      [sty.svgglobal_mode_reveal__tyr6V94Jk]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"reveal\"\n                      ),\n                    })}\n                    cursor={\"pointer\"}\n                    role={\"img\"}\n                  />\n                }\n                label={\n                  hasVariant(globalVariants, \"mode\", \"reveal\")\n                    ? \"hide labels\"\n                    : \"reveal labels\"\n                }\n              />\n\n              <p.PlasmicLink\n                data-plasmic-name={\"home\"}\n                data-plasmic-override={overrides.home}\n                className={classNames(projectcss.all, projectcss.a, sty.home, {\n                  [sty.homeglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.homeglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                component={Link}\n                href={args.path !== undefined ? args.path : \"/design\"}\n                id={\"logo\"}\n                platform={\"gatsby\"}\n                title={\"jeff wade\"}\n              >\n                <IconButton\n                  data-plasmic-name={\"logo\"}\n                  data-plasmic-override={overrides.logo}\n                  className={classNames(\"__wab_instance\", sty.logo, {\n                    [sty.logoglobal_mode_dark]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"dark\"\n                    ),\n\n                    [sty.logoglobal_mode_reveal]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"reveal\"\n                    ),\n                  })}\n                  icon={\n                    <p.PlasmicIcon\n                      PlasmicIconType={\n                        hasVariant(globalVariants, \"mode\", \"dark\")\n                          ? JwSharpIcon\n                          : JwSharpIcon\n                      }\n                      className={classNames(projectcss.all, sty.svg___1A3Bw, {\n                        [sty.svgglobal_mode_dark___1A3BwJYvh]: hasVariant(\n                          globalVariants,\n                          \"mode\",\n                          \"dark\"\n                        ),\n\n                        [sty.svgglobal_mode_reveal___1A3Bwv94Jk]: hasVariant(\n                          globalVariants,\n                          \"mode\",\n                          \"reveal\"\n                        ),\n                      })}\n                      role={\"img\"}\n                    />\n                  }\n                  label={\"\"}\n                />\n              </p.PlasmicLink>\n\n              <IconButton\n                data-plasmic-name={\"darkmode\"}\n                data-plasmic-override={overrides.darkmode}\n                className={classNames(\"__wab_instance\", sty.darkmode, {\n                  [sty.darkmodeglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.darkmodeglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                icon={\n                  <p.PlasmicIcon\n                    PlasmicIconType={\n                      hasVariant(globalVariants, \"mode\", \"dark\")\n                        ? DayIcon\n                        : NightIcon\n                    }\n                    className={classNames(projectcss.all, sty.svg___9Ekg, {\n                      [sty.svgglobal_mode_dark___9EkgJYvh]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"dark\"\n                      ),\n\n                      [sty.svgglobal_mode_reveal___9Ekgv94Jk]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"reveal\"\n                      ),\n                    })}\n                    cursor={\"pointer\"}\n                    role={\"img\"}\n                  />\n                }\n                label={\n                  hasVariant(globalVariants, \"mode\", \"dark\")\n                    ? \"switch to light mode\"\n                    : \"switch to dark mode\"\n                }\n              />\n            </div>\n          ) : null}\n        </p.Stack>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\n    \"root\",\n    \"likeness\",\n    \"words\",\n    \"headline\",\n    \"design\",\n    \"jeff\",\n    \"brandtool\",\n    \"orgtool\",\n    \"learnin\",\n    \"sprints\",\n    \"tracks\",\n    \"freeBox\",\n    \"reveal\",\n    \"home\",\n    \"logo\",\n    \"darkmode\",\n  ],\n\n  likeness: [\"likeness\"],\n  words: [\"words\"],\n  headline: [\"headline\", \"design\", \"jeff\"],\n  design: [\"design\"],\n  jeff: [\"jeff\"],\n  brandtool: [\"brandtool\"],\n  orgtool: [\"orgtool\"],\n  learnin: [\"learnin\"],\n  sprints: [\"sprints\"],\n  tracks: [\"tracks\"],\n  freeBox: [\"freeBox\", \"reveal\", \"home\", \"logo\", \"darkmode\"],\n  reveal: [\"reveal\"],\n  home: [\"home\", \"logo\"],\n  logo: [\"logo\"],\n  darkmode: [\"darkmode\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicHomepage__ArgProps,\n      internalVariantPropNames: PlasmicHomepage__VariantProps,\n    })\n\n    return PlasmicHomepage__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicHomepage\"\n  } else {\n    func.displayName = `PlasmicHomepage.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicHomepage = Object.assign(\n  // Top-level PlasmicHomepage renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    likeness: makeNodeComponent(\"likeness\"),\n    words: makeNodeComponent(\"words\"),\n    headline: makeNodeComponent(\"headline\"),\n    design: makeNodeComponent(\"design\"),\n    jeff: makeNodeComponent(\"jeff\"),\n    brandtool: makeNodeComponent(\"brandtool\"),\n    orgtool: makeNodeComponent(\"orgtool\"),\n    learnin: makeNodeComponent(\"learnin\"),\n    sprints: makeNodeComponent(\"sprints\"),\n    tracks: makeNodeComponent(\"tracks\"),\n    freeBox: makeNodeComponent(\"freeBox\"),\n    reveal: makeNodeComponent(\"reveal\"),\n    home: makeNodeComponent(\"home\"),\n    logo: makeNodeComponent(\"logo\"),\n    darkmode: makeNodeComponent(\"darkmode\"),\n    // Metadata about props expected for PlasmicHomepage\n    internalVariantProps: PlasmicHomepage__VariantProps,\n    internalArgProps: PlasmicHomepage__ArgProps,\n  }\n)\n\nexport default PlasmicHomepage\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { useState } from \"react\"\n\nimport { ModeContext } from \"../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Mode\"\nimport { HighlightContext } from \"../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Highlight\"\nimport { ArrangementContext } from \"../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Arrangement\"\n\nimport { PlasmicHomepage } from \"../components/plasmic/jeffdo_es/PlasmicHomepage\"\n\nfunction Homepage() {\n  const [mode, setMode] = useState([])\n  const [showLabel, setShowLabel] = useState(true)\n  const [highlight, setHighlight] = useState(undefined)\n\n  const toggleDarkMode = () => {\n    const newMode = [...mode]\n    if (newMode.includes(\"dark\")) {\n      newMode.shift()\n    } else {\n      newMode.unshift(\"dark\")\n    }\n    setMode(newMode)\n  }\n\n  const toggleHighlight = cat => {\n    switch (cat) {\n      case \"about\":\n        setHighlight(\"about\")\n        break\n      case \"work\":\n        setHighlight(\"work\")\n        break\n      default:\n        setHighlight(undefined)\n    }\n  }\n\n  const toggleReveal = () => {\n    const newMode = [...mode]\n    if (newMode.includes(\"reveal\")) {\n      newMode.pop()\n      setShowLabel(true)\n    } else {\n      newMode.push(\"reveal\")\n      setShowLabel(false)\n    }\n    setMode(newMode)\n    document.body.focus()\n  }\n\n  return (\n    <ModeContext.Provider value={mode}>\n      <HighlightContext.Provider value={highlight}>\n        <ArrangementContext.Provider value={undefined}>\n          <PlasmicHomepage\n            jeff={{\n              onFocus: () => toggleHighlight(\"about\"),\n              onBlur: () => toggleHighlight(),\n            }}\n            design={{\n              onFocus: () => toggleHighlight(\"work\"),\n              onBlur: () => toggleHighlight(),\n            }}\n            reveal={{\n              onClick: () => toggleReveal(),\n            }}\n            darkmode={{\n              onClick: () => toggleDarkMode(),\n            }}\n            likeness={{\n              labelIsVisible: showLabel,\n            }}\n            words={{\n              labelIsVisible: showLabel,\n            }}\n            brandtool={{\n              labelIsVisible: showLabel,\n            }}\n            orgtool={{\n              labelIsVisible: showLabel,\n            }}\n            learnin={{\n              labelIsVisible: showLabel,\n            }}\n            sprints={{\n              labelIsVisible: showLabel,\n            }}\n            tracks={{\n              labelIsVisible: showLabel,\n            }}\n          />\n        </ArrangementContext.Provider>\n      </HighlightContext.Provider>\n    </ModeContext.Provider>\n  )\n}\n\nexport default Homepage\n"],"names":["ArrangementContext","React","useArrangement","root","roothighlighted","rootlowlighted","root___focusVisibleWithin","title","titlecolor_grey","titlelowlighted","titlecolor_red","titlecolor_orange","titlecolor_yellow","titlecolor_green","titlecolor_mint","titlecolor_blue","titlecolor_purple","title___focusVisibleWithin","slotTargetLabel","slotTargetLabelcolor_grey","slotTargetLabelcolor_orange","slotTargetLabelcolor_yellow","slotTargetLabelcolor_green","slotTargetLabelcolor_mint","slotTargetLabelcolor_blue","slotTargetLabel___focusVisibleWithin","slotTargetIcon","slotTargetIconcolor_grey","slotTargetIconcolor_orange","slotTargetIconcolor_yellow","slotTargetIconcolor_green","slotTargetIconcolor_mint","slotTargetIconcolor_blue","slotTargetIcon___focusVisibleWithin","svg__rm0Cy","props","className","style","restProps","xmlns","fill","viewBox","height","width","classNames","d","PlasmicStripe__VariantProps","Array","PlasmicStripe__ArgProps","PlasmicDescendants","makeNodeComponent","nodeName","func","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","args","overrides","forNode","useTrigger","isTextInput","isRootFocusVisibleWithin","triggerRootFocusVisibleWithinProps","isRootHover","triggerRootHoverProps","isRootFocusWithin","triggerRootFocusWithinProps","triggers","focusVisibleWithin_root","hover_root","focusWithin_root","globalVariants","ensureGlobalVariants","mode","useMode","projectcss","sty","hasVariant","id","tabIndex","as","hasGap","p","defaultContents","value","label","role","icon","PlasmicStripe__RenderFunc","displayName","PlasmicStripe","Object","assign","internalVariantProps","internalArgProps","PlasmicTag__VariantProps","PlasmicTag__ArgProps","PlasmicTag","PlasmicTag__RenderFunc","Tag_","ref","rootname_likeness","rootname_words","rootname_brandtool","rootname_orgtool","rootname_tracks","rootname_learnin","words","wordsname_likeness","wordsname_words","wordsname_brandtool","wordsname_orgtool","text__zzYs3","textname_likeness__zzYs3Tam8T","textname_words__zzYs3GdArj","textname_brandtool__zzYs302Dcx","text__fSRh","textname_likeness__fSRhTam8T","textname_words__fSRhgdArj","textname_brandtool__fSRh02Dcx","text__f2X6O","textname_likeness__f2X6OTam8T","textname_words__f2X6OgdArj","textname_brandtool__f2X6O02Dcx","text__tYiB","textname_likeness__tYiBtam8T","textname_words__tYiBgdArj","textname_brandtool__tYiB02Dcx","text__hWuag","textname_likeness__hWuagTam8T","textname_words__hWuaggdArj","textname_brandtool__hWuag02Dcx","likeness","likenessname_likeness","likenessname_words","likenessname_brandtool","likenessname_orgtool","likenessname_sprints","likenessname_tracks","likenessname_learnin","orgtool","orgtoolname_orgtool","text__vluzm","freeBox__o3KS3","tag__gphct","text__erNOd","tag___6R4Ad","text__gMegt","tag__ojZr","text__rzavJ","img__xhkUk","brandtool","brandtoolname_brandtool","text__tTtFw","freeBox__ihBuF","tag___0ZkTz","text__dnB2","tag__yw9Qx","text__dYOm5","tag___8Cg2A","text__u51Tx","img__mxcUu","learnin","learninname_learnin","text__z9Ey","freeBox__r0Wut","freeBox__b8ZD3","svg__hgkQw","text__tuHAs","freeBox__qHaYy","svg__y70L2","text__xzO0C","freeBox__rjN70","svg__cZkPa","text__tCun","freeBox__mnFug","svg__qRw6L","text__u6AAk","freeBox__a5ZKr","svg__sK1Ji","text__hHbAf","tracks","tracksname_tracks","text__rDhas","freeBox__xSz8B","link__xs6V","svg__sdmbw","text__sO13D","link__bIrkC","svg__wjqFi","text__d3Yj","link___6NQdw","svg__cpFny","text__aampz","text__qsBq","span","fillRule","clipRule","stroke","PlasmicPreview__VariantProps","PlasmicPreview__ArgProps","undefined","alt","displayHeight","displayMaxHeight","displayMaxWidth","displayMinHeight","displayMinWidth","displayWidth","loading","src","selfPortraitBj4ZnGhn7D","fullWidth","fullHeight","aspectRatio","orgDesignMeo1PxVz7","infoArchitecture9E8Fl55Ys","component","Link","platform","PlasmicPreview__RenderFunc","PlasmicPreview","Preview_","rest","Stripe_","category","color","highlighted","lowlighted","labelIsVisible","revealed","useState","isHovered","setIsHovered","isBrowser","window","mousePosition","useMousePosition","mobile","setMobile","useEffect","mediaQuery","matchMedia","addEventListener","matches","once","e","labelStyles","position","display","gap","alignItems","overflow","whiteSpace","x","innerWidth","stripeLabel","tooltipLabel","content","tooltip","useTooltip","onMouseOver","onFocus","onMouseOut","onBlur","h1__mLmRw","h1global_mode_dark__mLmRwjYvh","slotTargetWord","slotTargetWordglobal_mode_dark","h1__pd88E","slotTargetSymbol","slotTargetSymbolglobal_mode_dark","PlasmicHeadlineButton__VariantProps","PlasmicHeadlineButton__ArgProps","PlasmicHeadlineButton","word","symbol","PlasmicHeadlineButton__RenderFunc","HeadlineButton_","headlineButton__xiaYn","h1","h1global_mode_dark","textglobal_mode_dark","headlineButton__b86Ep","PlasmicHeadline__VariantProps","PlasmicHeadline__ArgProps","text","screen","useScreenVariantsekypzdksLjd0F","first","end","PlasmicHeadline__RenderFunc","PlasmicHeadline","Headline_","rootglobal_mode_dark","rootglobal_arrangement_float","likenessglobal_arrangement_float","svg__gvVi7","wordsglobal_arrangement_float","text__oP3Fs","svg__iok3E","headline","headlineglobal_mode_dark","headlineglobal_arrangement_float","design","jeff","brandtoolglobal_arrangement_float","svg__laIzF","orgtoolglobal_arrangement_float","text__raQdW","svg__ff02","learninglobal_mode_reveal","learninglobal_highlight_about","learninglobal_highlight_work","learninglobal_arrangement_float","svg__ofC2X","sprints","sprintsglobal_arrangement_float","svg__hgkau","tracksglobal_arrangement_float","svg__xhEae","freeBox","freeBoxglobal_arrangement_float","reveal","svg__tyr6","home","svg___1A3Bw","svgglobal_mode_dark___1A3BwJYvh","svg___9Ekg","PlasmicHomepage__VariantProps","PlasmicHomepage__ArgProps","logo","darkmode","highlight","useHighlight","arrangement","IconButton","PlasmicIconType","EyeClosedIcon","EyeOpenIcon","cursor","href","path","JwSharpIcon","DayIcon","NightIcon","PlasmicHomepage__RenderFunc","PlasmicHomepage","setMode","showLabel","setShowLabel","setHighlight","toggleHighlight","cat","onClick","newMode","includes","pop","push","document","body","focus","shift","unshift"],"sourceRoot":""}