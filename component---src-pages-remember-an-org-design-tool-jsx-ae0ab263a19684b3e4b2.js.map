{"version":3,"file":"component---src-pages-remember-an-org-design-tool-jsx-ae0ab263a19684b3e4b2.js","mappings":"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","sources":["webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicTag.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicTag.jsx","webpack://jeffdoes/./src/components/Tag.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicGlobalVariant__Arrangement.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__ArrowRight.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__ArrowLeft.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicBackButton.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicBackButton.module.css","webpack://jeffdoes/./src/components/BackButton.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicCaseStudy.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/icons/PlasmicIcon__ArrowDown.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/orgtoolHeader.png","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/orgtool01Png.png","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/orgtool03Png.png","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/orgtoolResearchpng.png","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicCaseStudy.jsx","webpack://jeffdoes/./src/components/CaseStudy.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicOrgTool.module.css","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/PlasmicOrgTool.jsx","webpack://jeffdoes/./src/pages/remember/an-org-design-tool--.jsx","webpack://jeffdoes/./src/components/plasmic/jeffdo_es/images/orgDesign.png"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicTag-module--root--pTGDs\";\nexport var rootstroke = \"PlasmicTag-module--rootstroke--+ZG-S\";\nexport var rootflippabble = \"PlasmicTag-module--rootflippabble--2dGdV\";\nexport var slotTargetLabel = \"PlasmicTag-module--slotTargetLabel--6vRHo\";\nexport var text___7ZTu = \"PlasmicTag-module--text___7ZTu---EpSK\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: lqv31eB-tK\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicTag.module.css\" // plasmic-import: lqv31eB-tK/css\n\nexport const PlasmicTag__VariantProps = new Array(\"stroke\", \"flippabble\")\n\nexport const PlasmicTag__ArgProps = new Array(\"label\")\n\nfunction PlasmicTag__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n    screen: useScreenVariantsekypzdksLjd0F(),\n  })\n\n  return (\n    <div\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.rootflippabble]: hasVariant(\n            variants,\n            \"flippabble\",\n            \"flippabble\"\n          ),\n\n          [sty.rootstroke]: hasVariant(variants, \"stroke\", \"stroke\"),\n        }\n      )}\n    >\n      {p.renderPlasmicSlot({\n        defaultContents: (\n          <div\n            className={classNames(\n              projectcss.all,\n              projectcss.__wab_text,\n              sty.text___7ZTu\n            )}\n          >\n            {\"label\"}\n          </div>\n        ),\n\n        value: args.label,\n        className: classNames(sty.slotTargetLabel, {\n          [sty.slotTargetLabelflippabble]: hasVariant(\n            variants,\n            \"flippabble\",\n            \"flippabble\"\n          ),\n\n          [sty.slotTargetLabelglobal_mode_dark_flippabble]:\n            hasVariant(variants, \"flippabble\", \"flippabble\") &&\n            hasVariant(globalVariants, \"mode\", \"dark\"),\n        }),\n      })}\n    </div>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicTag__ArgProps,\n      internalVariantPropNames: PlasmicTag__VariantProps,\n    })\n\n    return PlasmicTag__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicTag\"\n  } else {\n    func.displayName = `PlasmicTag.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicTag = Object.assign(\n  // Top-level PlasmicTag renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    // Metadata about props expected for PlasmicTag\n    internalVariantProps: PlasmicTag__VariantProps,\n    internalArgProps: PlasmicTag__ArgProps,\n  }\n)\n\nexport default PlasmicTag\n/* prettier-ignore-end */\n","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport { PlasmicTag } from \"./plasmic/jeffdo_es/PlasmicTag\"\n\nfunction Tag_(props, ref) {\n  // Use PlasmicTag to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicTag are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all TagProps here, but feel free\n  // to do whatever works for you.\n  return <PlasmicTag root={{ ref }} {...props} />\n}\n\nconst Tag = React.forwardRef(Tag_)\n\nexport default Tag\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport * as React from \"react\"\n\nexport const ArrangementContext = React.createContext(\n  \"PLEASE_RENDER_INSIDE_PROVIDER\"\n)\n\nexport function useArrangement() {\n  return React.useContext(ArrangementContext)\n}\n\nexport default ArrangementContext\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function ArrowRightIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M15.5 8l.354.354a.5.5 0 000-.708L15.5 8zM0 10.5c.841 0 1.495-.212 2.03-.544.523-.325.91-.752 1.23-1.136.337-.405.576-.726.862-.972.26-.223.524-.348.878-.348v-1c-.646 0-1.132.25-1.529.59-.37.316-.693.745-.98 1.09-.305.366-.607.69-.99.926C1.13 9.337.66 9.5 0 9.5v1zm5-3a.61.61 0 01.348.09.823.823 0 01.251.287c.176.3.286.723.416 1.244.12.48.26 1.057.522 1.506.136.234.318.457.57.62.255.167.554.253.893.253v-1a.61.61 0 01-.348-.09.823.823 0 01-.251-.287c-.176-.3-.286-.723-.416-1.244-.12-.48-.26-1.057-.522-1.506a1.813 1.813 0 00-.57-.62A1.607 1.607 0 005 6.5v1zm3 4c.634 0 1.17-.24 1.628-.558.45-.311.858-.72 1.226-1.088.382-.383.725-.723 1.087-.974.354-.245.693-.38 1.059-.38v-1c-.634 0-1.17.24-1.628.558-.45.311-.858.72-1.226 1.088-.382.383-.724.723-1.087.974-.354.245-.693.38-1.059.38v1zm5-3h2.5v-1H13v1zm2.146-.854l-3 3 .708.708 3-3-.708-.708zm.708 0l-3-3-.708.708 3 3 .708-.708z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default ArrowRightIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function ArrowLeftIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M1.707 8.5l2.147 2.146-.708.708-3-3a.5.5 0 010-.708l3-3 .708.708L1.707 7.5H3c1.134 0 2.11.558 2.95 1.038l.048.028c.899.513 1.657.934 2.502.934.893 0 1.263-.243 1.487-.519a2.51 2.51 0 00.339-.602c.047-.11.093-.225.142-.348l.018-.046c.055-.14.115-.288.182-.438.273-.613.673-1.28 1.516-1.775C13.01 5.287 14.204 5 16 5v1c-1.704 0-2.698.275-3.31.634-.593.35-.88.807-1.108 1.32a11.154 11.154 0 00-.185.447c-.049.122-.1.249-.152.373-.12.278-.267.574-.482.839-.463.568-1.156.887-2.263.887-1.134 0-2.11-.558-2.95-1.038l-.048-.028C4.603 8.921 3.845 8.5 3 8.5H1.707z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default ArrowLeftIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: 6NgyzpZAz-\nimport * as React from \"react\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicBackButton.module.css\" // plasmic-import: 6NgyzpZAz-/css\nimport ArrowLeftIcon from \"./icons/PlasmicIcon__ArrowLeft\" // plasmic-import: GP0PpNpUV/icon\n\nexport const PlasmicBackButton__VariantProps = new Array()\n\nexport const PlasmicBackButton__ArgProps = new Array()\n\nfunction PlasmicBackButton__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n    screen: useScreenVariantsekypzdksLjd0F(),\n  })\n\n  return (\n    <button\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.button,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root,\n        \"txt-button\",\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [projectcss.global_mode_reveal]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"reveal\"\n          ),\n        }\n      )}\n      disabled={false}\n      id={\"back-button\"}\n      role={\"\"}\n      title={\"back to case studies\"}\n    >\n      <ArrowLeftIcon\n        data-plasmic-name={\"svg\"}\n        data-plasmic-override={overrides.svg}\n        className={classNames(projectcss.all, sty.svg)}\n        role={\"img\"}\n      />\n\n      <div\n        data-plasmic-name={\"text\"}\n        data-plasmic-override={overrides.text}\n        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}\n      >\n        {\"case studies\"}\n      </div>\n    </button>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"svg\", \"text\"],\n  svg: [\"svg\"],\n  text: [\"text\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicBackButton__ArgProps,\n      internalVariantPropNames: PlasmicBackButton__VariantProps,\n    })\n\n    return PlasmicBackButton__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicBackButton\"\n  } else {\n    func.displayName = `PlasmicBackButton.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicBackButton = Object.assign(\n  // Top-level PlasmicBackButton renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    svg: makeNodeComponent(\"svg\"),\n    text: makeNodeComponent(\"text\"),\n    // Metadata about props expected for PlasmicBackButton\n    internalVariantProps: PlasmicBackButton__VariantProps,\n    internalArgProps: PlasmicBackButton__ArgProps,\n  }\n)\n\nexport default PlasmicBackButton\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicBackButton-module--root--mEg3J\";\nexport var svg = \"PlasmicBackButton-module--svg--99BoR\";\nexport var text = \"PlasmicBackButton-module--text--YPzyA\";","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport { PlasmicBackButton } from \"./plasmic/jeffdo_es/PlasmicBackButton\"\n\nfunction BackButton_(props, ref) {\n  // Use PlasmicBackButton to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicBackButton are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all BackButtonProps here, but feel free\n  // to do whatever works for you.\n  return <PlasmicBackButton root={{ ref }} {...props} />\n}\n\nconst BackButton = React.forwardRef(BackButton_)\n\nexport default BackButton\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicCaseStudy-module--root--cyyRb\";\nexport var link = \"PlasmicCaseStudy-module--link--DS+C3\";\nexport var hero = \"PlasmicCaseStudy-module--hero--g6vmY\";\nexport var heroglobal_mode_reveal = \"PlasmicCaseStudy-module--heroglobal_mode_reveal--QW6aq\";\nexport var img__z5CWf = \"PlasmicCaseStudy-module--img__z5CWf--xt0P2\";\nexport var __wab_imgSpacer = \"PlasmicCaseStudy-module--__wab_img-spacer--IxV93\";\nexport var content = \"PlasmicCaseStudy-module--content--jMKw2\";\nexport var contentglobal_mode_reveal = \"PlasmicCaseStudy-module--contentglobal_mode_reveal--OMmFd\";\nexport var header = \"PlasmicCaseStudy-module--header--7BSap\";\nexport var title = \"PlasmicCaseStudy-module--title--wNhp8\";\nexport var text = \"PlasmicCaseStudy-module--text--Yka6u\";\nexport var h1 = \"PlasmicCaseStudy-module--h1--QLuwK\";\nexport var slotTargetTitle = \"PlasmicCaseStudy-module--slotTargetTitle--tE6ym\";\nexport var description = \"PlasmicCaseStudy-module--description--FoD5k\";\nexport var slotTargetDescription = \"PlasmicCaseStudy-module--slotTargetDescription--j6p71\";\nexport var services = \"PlasmicCaseStudy-module--services--ipM5P\";\nexport var slotTargetServices = \"PlasmicCaseStudy-module--slotTargetServices---Ij0J\";\nexport var tag__biiB9 = \"PlasmicCaseStudy-module--tag__biiB9--EzBXJ\";\nexport var text__oRvv = \"PlasmicCaseStudy-module--text__oRvv--GPnuG\";\nexport var tag__kE5P = \"PlasmicCaseStudy-module--tag__kE5P--xyfeC\";\nexport var text__oegoj = \"PlasmicCaseStudy-module--text__oegoj--So+3S\";\nexport var tag__fgfHd = \"PlasmicCaseStudy-module--tag__fgfHd--mqxex\";\nexport var text__dvlR2 = \"PlasmicCaseStudy-module--text__dvlR2--AT+L3\";\nexport var tag__hpi5N = \"PlasmicCaseStudy-module--tag__hpi5N--Z52B-\";\nexport var text__pxaQd = \"PlasmicCaseStudy-module--text__pxaQd--K2ytF\";\nexport var tag__trtnX = \"PlasmicCaseStudy-module--tag__trtnX--E0BsK\";\nexport var text___52AfD = \"PlasmicCaseStudy-module--text___52AfD--KgNwZ\";\nexport var overview = \"PlasmicCaseStudy-module--overview--ddmih\";\nexport var overviewImages = \"PlasmicCaseStudy-module--overviewImages--nIslH\";\nexport var overviewImagesglobal_mode_reveal = \"PlasmicCaseStudy-module--overviewImagesglobal_mode_reveal--hvNPE\";\nexport var freeBox___4M8J = \"PlasmicCaseStudy-module--freeBox___4M8J--0caZ-\";\nexport var img___2YcZy = \"PlasmicCaseStudy-module--img___2YcZy--T5gg3\";\nexport var img__gS99C = \"PlasmicCaseStudy-module--img__gS99C--lICIh\";\nexport var svg = \"PlasmicCaseStudy-module--svg--n8voj\";\nexport var img__lAzkm = \"PlasmicCaseStudy-module--img__lAzkm--mKwZV\";\nexport var overviewCaption = \"PlasmicCaseStudy-module--overviewCaption--EYf+J\";\nexport var overviewCaptionglobal_mode_reveal = \"PlasmicCaseStudy-module--overviewCaptionglobal_mode_reveal--o3ugI\";\nexport var slotTargetOverviewCaption = \"PlasmicCaseStudy-module--slotTargetOverviewCaption--RcIiI\";\nexport var overviewDescription = \"PlasmicCaseStudy-module--overviewDescription--Enk9r\";\nexport var overviewDescriptionglobal_mode_dark = \"PlasmicCaseStudy-module--overviewDescriptionglobal_mode_dark--fr1up\";\nexport var problem = \"PlasmicCaseStudy-module--problem--+r1Dd\";\nexport var h3__i9Mpl = \"PlasmicCaseStudy-module--h3__i9Mpl---PI3D\";\nexport var slotTargetProblem = \"PlasmicCaseStudy-module--slotTargetProblem--wHfaj\";\nexport var approach = \"PlasmicCaseStudy-module--approach--af7DP\";\nexport var h3__dcsPd = \"PlasmicCaseStudy-module--h3__dcsPd--fmvCm\";\nexport var text___9TmiC = \"PlasmicCaseStudy-module--text___9TmiC--6WFfp\";\nexport var work = \"PlasmicCaseStudy-module--work--gsBaG\";\nexport var h3___6KB0 = \"PlasmicCaseStudy-module--h3___6KB0--LKGwb\";\nexport var freeBox__zGxN9 = \"PlasmicCaseStudy-module--freeBox__zGxN9--n-riw\";\nexport var freeBox__t1Txf = \"PlasmicCaseStudy-module--freeBox__t1Txf--t0U1o\";\nexport var h4___2SBb1 = \"PlasmicCaseStudy-module--h4___2SBb1--9zRKN\";\nexport var freeBox__uWjBd = \"PlasmicCaseStudy-module--freeBox__uWjBd---KX+P\";\nexport var text___5L9Dt = \"PlasmicCaseStudy-module--text___5L9Dt--FmuPm\";\nexport var img__dbx1Y = \"PlasmicCaseStudy-module--img__dbx1Y--b2Dni\";\nexport var freeBox__pZcZ2 = \"PlasmicCaseStudy-module--freeBox__pZcZ2--NFYCS\";\nexport var text__pFzr3 = \"PlasmicCaseStudy-module--text__pFzr3--25fHj\";\nexport var freeBox__tkYh = \"PlasmicCaseStudy-module--freeBox__tkYh--B95vy\";\nexport var h4__gxcwv = \"PlasmicCaseStudy-module--h4__gxcwv--iSpMe\";\nexport var text__uOads = \"PlasmicCaseStudy-module--text__uOads--Lzbo+\";\nexport var freeBox__uDUoD = \"PlasmicCaseStudy-module--freeBox__uDUoD--I9Chw\";\nexport var h4__leY5Y = \"PlasmicCaseStudy-module--h4__leY5Y--2I+Eu\";\nexport var text__gwt9 = \"PlasmicCaseStudy-module--text__gwt9--hnW+h\";\nexport var gallery = \"PlasmicCaseStudy-module--gallery---oqw9\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function ArrowDownIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 17\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M7.75 13.25h-.5.5zm0 2.5l-.354.354a.5.5 0 00.708 0l-.354-.354zM9.25.25c0 .659-.163 1.13-.394 1.502-.237.382-.56.684-.926.989-.345.287-.774.61-1.09.98-.34.397-.59.883-.59 1.529h1c0-.354.125-.618.348-.878.246-.286.567-.525.972-.863.384-.32.81-.706 1.136-1.23.332-.534.544-1.188.544-2.029h-1zm-3 5c0 .339.086.638.253.894.163.25.386.433.62.57.45.261 1.027.401 1.506.521.52.13.943.24 1.244.416.141.082.23.166.286.25a.61.61 0 01.091.349h1c0-.339-.086-.638-.253-.894a1.813 1.813 0 00-.62-.57c-.45-.261-1.027-.401-1.506-.521-.52-.13-.943-.24-1.244-.416a.823.823 0 01-.286-.25.61.61 0 01-.091-.349h-1zm4 3c0 .366-.135.705-.38 1.06-.25.362-.591.704-.974 1.086-.367.368-.777.775-1.088 1.226-.318.458-.558.994-.558 1.628h1c0-.366.135-.705.38-1.06.25-.361.591-.704.974-1.086.367-.368.777-.775 1.088-1.226.318-.458.558-.994.558-1.628h-1zm-3 5v2.5h1v-2.5h-1zm.854 2.854l3-3-.708-.708-3 3 .708.708zm0-.708l-3-3-.708.708 3 3 .708-.708z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  )\n}\n\nexport default ArrowDownIcon\n/* prettier-ignore-end */\n","export default __webpack_public_path__ + \"static/orgtoolHeader-382659c4b6f46053ed057afa40e56478.png\";","export default __webpack_public_path__ + \"static/orgtool01Png-fed837af3848d6b88db7402a876166aa.png\";","export default __webpack_public_path__ + \"static/orgtool03Png-1967769be00607d5c6c0cd2205208235.png\";","export default __webpack_public_path__ + \"static/orgtoolResearchpng-3a84a93b2654be7f0e70217c07dee2e0.png\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: SiSovdu-fA\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport BackButton from \"../../BackButton\" // plasmic-import: 6NgyzpZAz-/component\nimport Tag from \"../../Tag\" // plasmic-import: lqv31eB-tK/component\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicCaseStudy.module.css\" // plasmic-import: SiSovdu-fA/css\nimport ArrowDownIcon from \"./icons/PlasmicIcon__ArrowDown\" // plasmic-import: b3K-zpFY_4/icon\nimport ArrowRightIcon from \"./icons/PlasmicIcon__ArrowRight\" // plasmic-import: iZuEl1jiaD/icon\nimport orgtoolHeaderOgUr0KDw from \"./images/orgtoolHeader.png\" // plasmic-import: OgUr_0kDw/picture\nimport orgtool01PngY3BRp8Cp1 from \"./images/orgtool01Png.png\" // plasmic-import: y3bRP8cp1/picture\nimport orgtool03PngOVR0NOy from \"./images/orgtool03Png.png\" // plasmic-import: O_V_r0nOy/picture\nimport orgDesignMeo1PxVz7 from \"./images/orgDesign.png\" // plasmic-import: meo1PxVZ7/picture\nimport orgtoolResearchpngJIeMqIOo from \"./images/orgtoolResearchpng.png\" // plasmic-import: JIeMq-IOo/picture\n\nexport const PlasmicCaseStudy__VariantProps = new Array()\n\nexport const PlasmicCaseStudy__ArgProps = new Array(\n  \"heroImage\",\n  \"title\",\n  \"services\",\n  \"description\",\n  \"problem\",\n  \"approach\",\n  \"overviewCaption\",\n  \"work1\",\n  \"work2\",\n  \"work3\"\n)\n\nfunction PlasmicCaseStudy__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n    screen: useScreenVariantsekypzdksLjd0F(),\n  })\n\n  return (\n    <article\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.rootglobal_mode_reveal]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"reveal\"\n          ),\n        }\n      )}\n    >\n      <p.PlasmicLink\n        data-plasmic-name={\"link\"}\n        data-plasmic-override={overrides.link}\n        className={classNames(projectcss.all, projectcss.a, sty.link)}\n        component={Link}\n        href={\"/remember\"}\n        id={\"back-button\"}\n        platform={\"gatsby\"}\n        title={\"back to case studies\"}\n      >\n        <BackButton\n          data-plasmic-name={\"back\"}\n          data-plasmic-override={overrides.back}\n          className={classNames(\"__wab_instance\", sty.back, {\n            [sty.backglobal_mode_reveal]: hasVariant(\n              globalVariants,\n              \"mode\",\n              \"reveal\"\n            ),\n          })}\n        />\n      </p.PlasmicLink>\n\n      {(hasVariant(globalVariants, \"mode\", \"reveal\") ? true : true) ? (\n        <div\n          data-plasmic-name={\"hero\"}\n          data-plasmic-override={overrides.hero}\n          className={classNames(projectcss.all, sty.hero, {\n            [sty.heroglobal_mode_reveal]: hasVariant(\n              globalVariants,\n              \"mode\",\n              \"reveal\"\n            ),\n          })}\n        >\n          {p.renderPlasmicSlot({\n            defaultContents: (\n              <p.PlasmicImg\n                alt={\"\"}\n                className={classNames(sty.img__z5CWf)}\n                displayHeight={\"200px\"}\n                displayMaxHeight={\"none\"}\n                displayMaxWidth={\"100%\"}\n                displayMinHeight={\"0\"}\n                displayMinWidth={\"0\"}\n                displayWidth={\"100%\"}\n                id={\"hero-image\"}\n                loading={\"lazy\"}\n                src={{\n                  src: orgtoolHeaderOgUr0KDw,\n                  fullWidth: 1440,\n                  fullHeight: 200,\n                  aspectRatio: undefined,\n                }}\n              />\n            ),\n\n            value: args.heroImage,\n          })}\n        </div>\n      ) : null}\n\n      <div\n        data-plasmic-name={\"content\"}\n        data-plasmic-override={overrides.content}\n        className={classNames(projectcss.all, sty.content, {\n          [sty.contentglobal_mode_reveal]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"reveal\"\n          ),\n        })}\n      >\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"header\"}\n          data-plasmic-override={overrides.header}\n          hasGap={true}\n          className={classNames(projectcss.all, sty.header)}\n        >\n          {true ? (\n            <div\n              data-plasmic-name={\"title\"}\n              data-plasmic-override={overrides.title}\n              className={classNames(projectcss.all, sty.title)}\n            >\n              <div\n                data-plasmic-name={\"text\"}\n                data-plasmic-override={overrides.text}\n                className={classNames(\n                  projectcss.all,\n                  projectcss.__wab_text,\n                  sty.text\n                )}\n              >\n                {\"jeff does remember\"}\n              </div>\n\n              <h1\n                data-plasmic-name={\"h1\"}\n                data-plasmic-override={overrides.h1}\n                className={classNames(projectcss.all, projectcss.h1, sty.h1)}\n              >\n                {p.renderPlasmicSlot({\n                  defaultContents: \"an org design tool\",\n                  value: args.title,\n                  className: classNames(sty.slotTargetTitle),\n                })}\n              </h1>\n\n              <div\n                data-plasmic-name={\"description\"}\n                data-plasmic-override={overrides.description}\n                className={classNames(projectcss.all, sty.description)}\n              >\n                {p.renderPlasmicSlot({\n                  defaultContents:\n                    \"robust organizational structure-mapping and transformation planning for enterprise clients\",\n                  value: args.description,\n                  className: classNames(sty.slotTargetDescription),\n                })}\n              </div>\n            </div>\n          ) : null}\n\n          <p.Stack\n            as={\"div\"}\n            data-plasmic-name={\"services\"}\n            data-plasmic-override={overrides.services}\n            hasGap={true}\n            className={classNames(projectcss.all, sty.services)}\n          >\n            {p.renderPlasmicSlot({\n              defaultContents: (\n                <React.Fragment>\n                  <Tag\n                    className={classNames(\"__wab_instance\", sty.tag__biiB9)}\n                    label={\n                      <div\n                        className={classNames(\n                          projectcss.all,\n                          projectcss.__wab_text,\n                          sty.text__oRvv\n                        )}\n                      >\n                        {\"user research\"}\n                      </div>\n                    }\n                  />\n\n                  <Tag\n                    className={classNames(\"__wab_instance\", sty.tag__kE5P)}\n                    label={\n                      <div\n                        className={classNames(\n                          projectcss.all,\n                          projectcss.__wab_text,\n                          sty.text__oegoj\n                        )}\n                      >\n                        {\"user testing\"}\n                      </div>\n                    }\n                  />\n\n                  <Tag\n                    className={classNames(\"__wab_instance\", sty.tag__fgfHd)}\n                    label={\n                      <div\n                        className={classNames(\n                          projectcss.all,\n                          projectcss.__wab_text,\n                          sty.text__dvlR2\n                        )}\n                      >\n                        {\"workshop facilitation\"}\n                      </div>\n                    }\n                  />\n\n                  <Tag\n                    className={classNames(\"__wab_instance\", sty.tag__hpi5N)}\n                    label={\n                      <div\n                        className={classNames(\n                          projectcss.all,\n                          projectcss.__wab_text,\n                          sty.text__pxaQd\n                        )}\n                      >\n                        {\"prototyping\"}\n                      </div>\n                    }\n                  />\n\n                  <Tag\n                    className={classNames(\"__wab_instance\", sty.tag__trtnX)}\n                    label={\n                      <div\n                        className={classNames(\n                          projectcss.all,\n                          projectcss.__wab_text,\n                          sty.text___52AfD\n                        )}\n                      >\n                        {\"agile development\"}\n                      </div>\n                    }\n                  />\n                </React.Fragment>\n              ),\n\n              value: args.services,\n              className: classNames(sty.slotTargetServices),\n            })}\n          </p.Stack>\n        </p.Stack>\n\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"overview\"}\n          data-plasmic-override={overrides.overview}\n          hasGap={true}\n          className={classNames(projectcss.all, sty.overview)}\n        >\n          {(\n            hasVariant(globalVariants, \"mode\", \"reveal\")\n              ? true\n              : hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n              ? true\n              : true\n          ) ? (\n            <p.Stack\n              as={\"div\"}\n              data-plasmic-name={\"overviewImages\"}\n              data-plasmic-override={overrides.overviewImages}\n              hasGap={true}\n              className={classNames(projectcss.all, sty.overviewImages, {\n                [sty.overviewImagesglobal_mode_reveal]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"reveal\"\n                ),\n              })}\n            >\n              {true ? (\n                <p.Stack\n                  as={\"div\"}\n                  hasGap={true}\n                  className={classNames(projectcss.all, sty.freeBox___4M8J)}\n                >\n                  <p.PlasmicImg\n                    alt={\"\"}\n                    className={classNames(sty.img___2YcZy)}\n                    displayHeight={\"auto\"}\n                    displayMaxHeight={\"none\"}\n                    displayMaxWidth={\n                      hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                        ? \"50%\"\n                        : \"50%\"\n                    }\n                    displayMinHeight={\"0\"}\n                    displayMinWidth={\"0\"}\n                    displayWidth={\"100%\"}\n                    loading={\"lazy\"}\n                    src={{\n                      src: orgtool01PngY3BRp8Cp1,\n                      fullWidth: 840,\n                      fullHeight: 477,\n                      aspectRatio: undefined,\n                    }}\n                  />\n\n                  <p.PlasmicImg\n                    alt={\"\"}\n                    className={classNames(sty.img__gS99C, {\n                      [sty.imgglobal_mode_reveal__gS99Cv94Jk]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"reveal\"\n                      ),\n                    })}\n                    displayHeight={\"auto\"}\n                    displayMaxHeight={\"none\"}\n                    displayMaxWidth={\n                      hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                        ? \"50%\"\n                        : \"50%\"\n                    }\n                    displayMinHeight={\"0\"}\n                    displayMinWidth={\"0\"}\n                    displayWidth={\"100%\"}\n                    loading={\"lazy\"}\n                    src={{\n                      src: orgtool03PngOVR0NOy,\n                      fullWidth: 840,\n                      fullHeight: 477,\n                      aspectRatio: undefined,\n                    }}\n                  />\n                </p.Stack>\n              ) : null}\n              {(\n                hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                  ? true\n                  : true\n              ) ? (\n                <p.PlasmicIcon\n                  data-plasmic-name={\"svg\"}\n                  data-plasmic-override={overrides.svg}\n                  PlasmicIconType={\n                    hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                      ? ArrowRightIcon\n                      : ArrowDownIcon\n                  }\n                  className={classNames(projectcss.all, sty.svg)}\n                  role={\"img\"}\n                />\n              ) : null}\n\n              <p.PlasmicImg\n                alt={\"\"}\n                className={classNames(sty.img__lAzkm)}\n                displayHeight={\"auto\"}\n                displayMaxHeight={\"none\"}\n                displayMaxWidth={\n                  hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                    ? \"30%\"\n                    : \"100%\"\n                }\n                displayMinHeight={\"0\"}\n                displayMinWidth={\"0\"}\n                displayWidth={\"100%\"}\n                loading={\"lazy\"}\n                src={{\n                  src: orgDesignMeo1PxVz7,\n                  fullWidth: 2880,\n                  fullHeight: 2048,\n                  aspectRatio: undefined,\n                }}\n              />\n            </p.Stack>\n          ) : null}\n          {(hasVariant(globalVariants, \"mode\", \"reveal\") ? true : true) ? (\n            <div\n              data-plasmic-name={\"overviewCaption\"}\n              data-plasmic-override={overrides.overviewCaption}\n              className={classNames(projectcss.all, sty.overviewCaption, {\n                [sty.overviewCaptionglobal_mode_reveal]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"reveal\"\n                ),\n              })}\n            >\n              {p.renderPlasmicSlot({\n                defaultContents:\n                  \"The first two images show the tool before this initiative. The last shows the new, integrated workspace.\",\n                value: args.overviewCaption,\n                className: classNames(sty.slotTargetOverviewCaption, {\n                  [sty.slotTargetOverviewCaptionglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                }),\n              })}\n            </div>\n          ) : null}\n          {true ? (\n            <div\n              data-plasmic-name={\"overviewDescription\"}\n              data-plasmic-override={overrides.overviewDescription}\n              className={classNames(projectcss.all, sty.overviewDescription, {\n                [sty.overviewDescriptionglobal_mode_dark]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"dark\"\n                ),\n              })}\n            >\n              <div\n                data-plasmic-name={\"problem\"}\n                data-plasmic-override={overrides.problem}\n                className={classNames(projectcss.all, sty.problem, {\n                  [sty.problemglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n                })}\n              >\n                <h3\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.h3,\n                    projectcss.__wab_text,\n                    sty.h3__i9Mpl,\n                    {\n                      [sty.h3global_mode_dark__i9MpljYvh]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"dark\"\n                      ),\n                    }\n                  )}\n                >\n                  {\"the problem\"}\n                </h3>\n\n                {p.renderPlasmicSlot({\n                  defaultContents:\n                    \"OrgTool began with a single visualization and diagnostic of an organization's structure. Over the years, various modules and analyses were added, piecemeal, by multiple teams. This led to a disjointed, complicated experience for users and lackluster adoption by clients.\",\n                  value: args.problem,\n                  className: classNames(sty.slotTargetProblem, {\n                    [sty.slotTargetProblemglobal_mode_dark]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"dark\"\n                    ),\n                  }),\n                })}\n              </div>\n\n              {true ? (\n                <div\n                  data-plasmic-name={\"approach\"}\n                  data-plasmic-override={overrides.approach}\n                  className={classNames(projectcss.all, sty.approach)}\n                >\n                  <h3\n                    className={classNames(\n                      projectcss.all,\n                      projectcss.h3,\n                      projectcss.__wab_text,\n                      sty.h3__dcsPd\n                    )}\n                  >\n                    {hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                      ? \"the ask\"\n                      : \"the ask\"}\n                  </h3>\n\n                  {p.renderPlasmicSlot({\n                    defaultContents: (\n                      <div\n                        className={classNames(\n                          projectcss.all,\n                          projectcss.__wab_text,\n                          sty.text___9TmiC\n                        )}\n                      >\n                        {\n                          \"Leaders needed a design leader to join the team to partner with engineering and ui designers to evolve OrgTool into a product capable of supporting complex workflows while optimizing user experience and flow—integrating and extending existing functionalities to make OrgTool the paragon of org design software\"\n                        }\n                      </div>\n                    ),\n\n                    value: args.approach,\n                  })}\n                </div>\n              ) : null}\n            </div>\n          ) : null}\n        </p.Stack>\n\n        {true ? (\n          <div\n            data-plasmic-name={\"work\"}\n            data-plasmic-override={overrides.work}\n            className={classNames(projectcss.all, sty.work)}\n          >\n            <h3\n              className={classNames(\n                projectcss.all,\n                projectcss.h3,\n                projectcss.__wab_text,\n                sty.h3___6KB0\n              )}\n            >\n              {\"the work\"}\n            </h3>\n\n            {true ? (\n              <p.Stack\n                as={\"div\"}\n                hasGap={true}\n                className={classNames(projectcss.all, sty.freeBox__zGxN9)}\n              >\n                {p.renderPlasmicSlot({\n                  defaultContents: (\n                    <p.Stack\n                      as={\"div\"}\n                      hasGap={true}\n                      className={classNames(projectcss.all, sty.freeBox__t1Txf)}\n                    >\n                      <h4\n                        className={classNames(\n                          projectcss.all,\n                          projectcss.h4,\n                          projectcss.__wab_text,\n                          sty.h4___2SBb1\n                        )}\n                      >\n                        {\"user research\"}\n                      </h4>\n\n                      {true ? (\n                        <p.Stack\n                          as={\"div\"}\n                          hasGap={true}\n                          className={classNames(\n                            projectcss.all,\n                            sty.freeBox__uWjBd\n                          )}\n                        >\n                          <div\n                            className={classNames(\n                              projectcss.all,\n                              projectcss.__wab_text,\n                              sty.text___5L9Dt\n                            )}\n                          >\n                            {\n                              \"Over the course of several weeks, we carried out dozens of interviews with core OrgTool users and business stakeholders to understand org design from end to end, including how and when OrgTool fit into the process.\"\n                            }\n                          </div>\n\n                          <p.PlasmicImg\n                            alt={\"\"}\n                            className={classNames(sty.img__dbx1Y)}\n                            displayHeight={\"auto\"}\n                            displayMaxHeight={\"none\"}\n                            displayMaxWidth={\"100%\"}\n                            displayMinHeight={\"0\"}\n                            displayMinWidth={\"0\"}\n                            displayWidth={\"100%\"}\n                            loading={\"lazy\"}\n                            src={{\n                              src: orgtoolResearchpngJIeMqIOo,\n                              fullWidth: 1265,\n                              fullHeight: 791,\n                              aspectRatio: undefined,\n                            }}\n                          />\n                        </p.Stack>\n                      ) : null}\n\n                      <div\n                        className={classNames(\n                          projectcss.all,\n                          sty.freeBox__pZcZ2\n                        )}\n                      >\n                        <div\n                          className={classNames(\n                            projectcss.all,\n                            projectcss.__wab_text,\n                            sty.text__pFzr3\n                          )}\n                        >\n                          {\n                            \"We catalogued and mapped this research to key themes related to the product, organized around user goals and pain points during the different phases of their work.\"\n                          }\n                        </div>\n                      </div>\n                    </p.Stack>\n                  ),\n\n                  value: args.work1,\n                })}\n\n                {(\n                  hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                    ? true\n                    : true\n                )\n                  ? p.renderPlasmicSlot({\n                      defaultContents: (\n                        <div\n                          className={classNames(\n                            projectcss.all,\n                            sty.freeBox__tkYh\n                          )}\n                        >\n                          <h4\n                            className={classNames(\n                              projectcss.all,\n                              projectcss.h4,\n                              projectcss.__wab_text,\n                              sty.h4__gxcwv\n                            )}\n                          >\n                            {\"design workshops\"}\n                          </h4>\n\n                          <div\n                            className={classNames(\n                              projectcss.all,\n                              projectcss.__wab_text,\n                              sty.text__uOads\n                            )}\n                          >\n                            {\"after cataloguing the user research\"}\n                          </div>\n                        </div>\n                      ),\n\n                      value: args.work2,\n                    })\n                  : null}\n                {(\n                  hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                    ? true\n                    : true\n                )\n                  ? p.renderPlasmicSlot({\n                      defaultContents: (\n                        <div\n                          className={classNames(\n                            projectcss.all,\n                            sty.freeBox__uDUoD\n                          )}\n                        >\n                          <h4\n                            className={classNames(\n                              projectcss.all,\n                              projectcss.h4,\n                              projectcss.__wab_text,\n                              sty.h4__leY5Y\n                            )}\n                          >\n                            {\"development + testing\"}\n                          </h4>\n\n                          <div\n                            className={classNames(\n                              projectcss.all,\n                              projectcss.__wab_text,\n                              sty.text__gwt9\n                            )}\n                          >\n                            {\n                              \"Over the course of several weeks, we carried out dozens of interviews with core OrgTool users and business stakeholders to understand their goals and pain points.\"\n                            }\n                          </div>\n                        </div>\n                      ),\n\n                      value: args.work3,\n                    })\n                  : null}\n              </p.Stack>\n            ) : null}\n          </div>\n        ) : null}\n\n        <div\n          data-plasmic-name={\"gallery\"}\n          data-plasmic-override={overrides.gallery}\n          className={classNames(projectcss.all, sty.gallery, {\n            [sty.galleryglobal_mode_dark]: hasVariant(\n              globalVariants,\n              \"mode\",\n              \"dark\"\n            ),\n          })}\n        />\n      </div>\n    </article>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\n    \"root\",\n    \"link\",\n    \"back\",\n    \"hero\",\n    \"content\",\n    \"header\",\n    \"title\",\n    \"text\",\n    \"h1\",\n    \"description\",\n    \"services\",\n    \"overview\",\n    \"overviewImages\",\n    \"svg\",\n    \"overviewCaption\",\n    \"overviewDescription\",\n    \"problem\",\n    \"approach\",\n    \"work\",\n    \"gallery\",\n  ],\n\n  link: [\"link\", \"back\"],\n  back: [\"back\"],\n  hero: [\"hero\"],\n  content: [\n    \"content\",\n    \"header\",\n    \"title\",\n    \"text\",\n    \"h1\",\n    \"description\",\n    \"services\",\n    \"overview\",\n    \"overviewImages\",\n    \"svg\",\n    \"overviewCaption\",\n    \"overviewDescription\",\n    \"problem\",\n    \"approach\",\n    \"work\",\n    \"gallery\",\n  ],\n\n  header: [\"header\", \"title\", \"text\", \"h1\", \"description\", \"services\"],\n  title: [\"title\", \"text\", \"h1\", \"description\"],\n  text: [\"text\"],\n  h1: [\"h1\"],\n  description: [\"description\"],\n  services: [\"services\"],\n  overview: [\n    \"overview\",\n    \"overviewImages\",\n    \"svg\",\n    \"overviewCaption\",\n    \"overviewDescription\",\n    \"problem\",\n    \"approach\",\n  ],\n\n  overviewImages: [\"overviewImages\", \"svg\"],\n  svg: [\"svg\"],\n  overviewCaption: [\"overviewCaption\"],\n  overviewDescription: [\"overviewDescription\", \"problem\", \"approach\"],\n  problem: [\"problem\"],\n  approach: [\"approach\"],\n  work: [\"work\"],\n  gallery: [\"gallery\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicCaseStudy__ArgProps,\n      internalVariantPropNames: PlasmicCaseStudy__VariantProps,\n    })\n\n    return PlasmicCaseStudy__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicCaseStudy\"\n  } else {\n    func.displayName = `PlasmicCaseStudy.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicCaseStudy = Object.assign(\n  // Top-level PlasmicCaseStudy renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    link: makeNodeComponent(\"link\"),\n    back: makeNodeComponent(\"back\"),\n    hero: makeNodeComponent(\"hero\"),\n    content: makeNodeComponent(\"content\"),\n    header: makeNodeComponent(\"header\"),\n    title: makeNodeComponent(\"title\"),\n    text: makeNodeComponent(\"text\"),\n    h1: makeNodeComponent(\"h1\"),\n    description: makeNodeComponent(\"description\"),\n    services: makeNodeComponent(\"services\"),\n    overview: makeNodeComponent(\"overview\"),\n    overviewImages: makeNodeComponent(\"overviewImages\"),\n    svg: makeNodeComponent(\"svg\"),\n    overviewCaption: makeNodeComponent(\"overviewCaption\"),\n    overviewDescription: makeNodeComponent(\"overviewDescription\"),\n    problem: makeNodeComponent(\"problem\"),\n    approach: makeNodeComponent(\"approach\"),\n    work: makeNodeComponent(\"work\"),\n    gallery: makeNodeComponent(\"gallery\"),\n    // Metadata about props expected for PlasmicCaseStudy\n    internalVariantProps: PlasmicCaseStudy__VariantProps,\n    internalArgProps: PlasmicCaseStudy__ArgProps,\n  }\n)\n\nexport default PlasmicCaseStudy\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { useState } from \"react\"\nimport { PlasmicCaseStudy } from \"./plasmic/jeffdo_es/PlasmicCaseStudy\"\n\nfunction CaseStudy_(props, ref) {\n\n  return (\n    <PlasmicCaseStudy\n      root={{ ref }}\n      {...props}\n    />\n  )\n}\n\nconst CaseStudy = React.forwardRef(CaseStudy_)\n\nexport default CaseStudy\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicOrgTool-module--root--9lt8X\";\nexport var casestudy = \"PlasmicOrgTool-module--casestudy--Fjqdo\";\nexport var img__uZ61G = \"PlasmicOrgTool-module--img__uZ61G--3bvXD\";\nexport var __wab_imgSpacer = \"PlasmicOrgTool-module--__wab_img-spacer--xhCSS\";\nexport var tag___7Gae2 = \"PlasmicOrgTool-module--tag___7Gae2--AQF9P\";\nexport var text__vzVik = \"PlasmicOrgTool-module--text__vzVik--x2Kn4\";\nexport var tag__bdu4D = \"PlasmicOrgTool-module--tag__bdu4D--l6fnz\";\nexport var text__umOdF = \"PlasmicOrgTool-module--text__umOdF--m451c\";\nexport var tag__cgfqy = \"PlasmicOrgTool-module--tag__cgfqy--YknAI\";\nexport var text__qZdWv = \"PlasmicOrgTool-module--text__qZdWv--Sbgjt\";\nexport var tag__dvOsY = \"PlasmicOrgTool-module--tag__dvOsY--ODckk\";\nexport var text__bruHo = \"PlasmicOrgTool-module--text__bruHo--N02yS\";\nexport var tag__fdX4E = \"PlasmicOrgTool-module--tag__fdX4E--A0SCI\";\nexport var text__p98C9 = \"PlasmicOrgTool-module--text__p98C9--Sp12k\";\nexport var text__peB8U = \"PlasmicOrgTool-module--text__peB8U--4ffwE\";\nexport var freeBox__fqoek = \"PlasmicOrgTool-module--freeBox__fqoek--6iXUN\";\nexport var h4__wDiec = \"PlasmicOrgTool-module--h4__wDiec--YHrg5\";\nexport var freeBox__rrwAn = \"PlasmicOrgTool-module--freeBox__rrwAn--rNeO2\";\nexport var text__uq8Jm = \"PlasmicOrgTool-module--text__uq8Jm--tmHSY\";\nexport var img__le1Ht = \"PlasmicOrgTool-module--img__le1Ht---chSG\";\nexport var freeBox___2GA6W = \"PlasmicOrgTool-module--freeBox___2GA6W--hgczQ\";\nexport var text__kVbP7 = \"PlasmicOrgTool-module--text__kVbP7--sbJwU\";\nexport var freeBox__fsTwj = \"PlasmicOrgTool-module--freeBox__fsTwj--6zZt7\";\nexport var h4___89PYo = \"PlasmicOrgTool-module--h4___89PYo--8oc8r\";\nexport var text__i6PzI = \"PlasmicOrgTool-module--text__i6PzI--kNgja\";\nexport var freeBox__aOuVq = \"PlasmicOrgTool-module--freeBox__aOuVq--4yUaz\";\nexport var h4__jIs6F = \"PlasmicOrgTool-module--h4__jIs6F--IL11p\";\nexport var text__iLwNj = \"PlasmicOrgTool-module--text__iLwNj--r12nG\";\nexport var nav = \"PlasmicOrgTool-module--nav--ztc35\";\nexport var navglobal_mode_dark = \"PlasmicOrgTool-module--navglobal_mode_dark--4J2ly\";\nexport var navglobal_arrangement_float = \"PlasmicOrgTool-module--navglobal_arrangement_float--NXXH4\";\nexport var reveal = \"PlasmicOrgTool-module--reveal--Y-uSl\";\nexport var revealglobal_mode_dark = \"PlasmicOrgTool-module--revealglobal_mode_dark--PPWuh\";\nexport var revealglobal_mode_reveal = \"PlasmicOrgTool-module--revealglobal_mode_reveal--JJsa-\";\nexport var svg__gfvE = \"PlasmicOrgTool-module--svg__gfvE--53PIU\";\nexport var svgglobal_mode_dark__gfvEjYvh = \"PlasmicOrgTool-module--svgglobal_mode_dark__gfvEjYvh--5qxR2\";\nexport var svgglobal_mode_reveal__gfvEv94Jk = \"PlasmicOrgTool-module--svgglobal_mode_reveal__gfvEv94Jk--1BKiY\";\nexport var home = \"PlasmicOrgTool-module--home--sORZI\";\nexport var homeglobal_mode_dark = \"PlasmicOrgTool-module--homeglobal_mode_dark--Sz450\";\nexport var homeglobal_mode_reveal = \"PlasmicOrgTool-module--homeglobal_mode_reveal--eHCOV\";\nexport var svg__zJi4L = \"PlasmicOrgTool-module--svg__zJi4L---i1HY\";\nexport var svgglobal_mode_dark__zJi4LjYvh = \"PlasmicOrgTool-module--svgglobal_mode_dark__zJi4LjYvh--KgOi7\";\nexport var svgglobal_mode_reveal__zJi4Lv94Jk = \"PlasmicOrgTool-module--svgglobal_mode_reveal__zJi4Lv94Jk--IwXYm\";\nexport var svg__rQtLi = \"PlasmicOrgTool-module--svg__rQtLi--McAt+\";\nexport var svgglobal_mode_dark__rQtLijYvh = \"PlasmicOrgTool-module--svgglobal_mode_dark__rQtLijYvh--FiZIt\";\nexport var svgglobal_mode_reveal__rQtLIv94Jk = \"PlasmicOrgTool-module--svgglobal_mode_reveal__rQtLIv94Jk--96Qtc\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: mujoL4gD3qd1ezKDLZ31rZ\n// Component: tKqf7q97A-\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport CaseStudy from \"../../CaseStudy\" // plasmic-import: SiSovdu-fA/component\nimport IconButton from \"../../IconButton\" // plasmic-import: mEnM6zW3GD/component\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\" // plasmic-import: zulsK3o-3W/globalVariant\nimport { useArrangement } from \"./PlasmicGlobalVariant__Arrangement\" // plasmic-import: hhgYSeu_QK/globalVariant\nimport { useScreenVariants as useScreenVariantsekypzdksLjd0F } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: EKYPZDKSLjd0F/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_jeffdo_es.module.css\" // plasmic-import: mujoL4gD3qd1ezKDLZ31rZ/projectcss\nimport * as sty from \"./PlasmicOrgTool.module.css\" // plasmic-import: tKqf7q97A-/css\nimport EyeClosedIcon from \"./icons/PlasmicIcon__EyeClosed\" // plasmic-import: aBAB-JPNq/icon\nimport EyeOpenIcon from \"./icons/PlasmicIcon__EyeOpen\" // plasmic-import: J7fJnmL4N/icon\nimport JwSharpIcon from \"./icons/PlasmicIcon__JwSharp\" // plasmic-import: imnHY-_8sU/icon\nimport NightIcon from \"./icons/PlasmicIcon__Night\" // plasmic-import: nS7MqAdlwl/icon\nimport DayIcon from \"./icons/PlasmicIcon__Day\" // plasmic-import: 2cwRWiCxc/icon\n\nexport const PlasmicOrgTool__VariantProps = new Array()\n\nexport const PlasmicOrgTool__ArgProps = new Array()\n\nfunction PlasmicOrgTool__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode(),\n    arrangement: useArrangement(),\n    screen: useScreenVariantsekypzdksLjd0F(),\n  })\n\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        <div\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          className={classNames(\n            projectcss.all,\n            projectcss.root_reset,\n            projectcss.plasmic_default_styles,\n            projectcss.plasmic_mixins,\n            projectcss.plasmic_tokens,\n            sty.root,\n            {\n              [projectcss.global_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              ),\n            }\n          )}\n        >\n          <CaseStudy\n            data-plasmic-name={\"casestudy\"}\n            data-plasmic-override={overrides.casestudy}\n            className={classNames(\"__wab_instance\", sty.casestudy)}\n          />\n\n          {(\n            hasVariant(globalVariants, \"arrangement\", \"float\")\n              ? true\n              : hasVariant(globalVariants, \"mode\", \"dark\")\n              ? true\n              : hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n              ? true\n              : true\n          ) ? (\n            <nav\n              data-plasmic-name={\"nav\"}\n              data-plasmic-override={overrides.nav}\n              className={classNames(projectcss.all, sty.nav, {\n                [sty.navglobal_arrangement_float]: hasVariant(\n                  globalVariants,\n                  \"arrangement\",\n                  \"float\"\n                ),\n\n                [sty.navglobal_mode_dark]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"dark\"\n                ),\n              })}\n            >\n              <IconButton\n                data-plasmic-name={\"reveal\"}\n                data-plasmic-override={overrides.reveal}\n                className={classNames(\"__wab_instance\", sty.reveal, {\n                  [sty.revealglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.revealglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                icon={\n                  <p.PlasmicIcon\n                    PlasmicIconType={\n                      hasVariant(globalVariants, \"mode\", \"reveal\")\n                        ? EyeOpenIcon\n                        : hasVariant(globalVariants, \"mode\", \"dark\")\n                        ? EyeClosedIcon\n                        : hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                        ? EyeClosedIcon\n                        : EyeClosedIcon\n                    }\n                    className={classNames(projectcss.all, sty.svg__gfvE, {\n                      [sty.svgglobal_mode_dark__gfvEjYvh]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"dark\"\n                      ),\n\n                      [sty.svgglobal_mode_reveal__gfvEv94Jk]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"reveal\"\n                      ),\n                    })}\n                    cursor={\n                      hasVariant(globalVariants, \"mode\", \"reveal\")\n                        ? \"pointer\"\n                        : hasVariant(globalVariants, \"mode\", \"dark\")\n                        ? \"pointer\"\n                        : hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                        ? \"pointer\"\n                        : \"pointer\"\n                    }\n                    role={\"img\"}\n                  />\n                }\n                label={\n                  hasVariant(globalVariants, \"mode\", \"reveal\")\n                    ? \"show images\"\n                    : hasVariant(globalVariants, \"mode\", \"dark\")\n                    ? \"hide images\"\n                    : hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                    ? \"hide images\"\n                    : \"hide images\"\n                }\n              />\n\n              <p.PlasmicLink\n                data-plasmic-name={\"home\"}\n                data-plasmic-override={overrides.home}\n                className={classNames(projectcss.all, projectcss.a, sty.home, {\n                  [sty.homeglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.homeglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                component={Link}\n                href={\"/\"}\n                id={\n                  hasVariant(globalVariants, \"mode\", \"reveal\")\n                    ? \"logo\"\n                    : hasVariant(globalVariants, \"mode\", \"dark\")\n                    ? \"logo\"\n                    : \"logo\"\n                }\n                platform={\"gatsby\"}\n                title={\n                  hasVariant(globalVariants, \"mode\", \"reveal\")\n                    ? \"jeff wade\"\n                    : hasVariant(globalVariants, \"mode\", \"dark\")\n                    ? \"jeff wade\"\n                    : \"jeff wade\"\n                }\n              >\n                <IconButton\n                  data-plasmic-name={\"logo\"}\n                  data-plasmic-override={overrides.logo}\n                  className={classNames(\"__wab_instance\", sty.logo, {\n                    [sty.logoglobal_mode_dark]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"dark\"\n                    ),\n\n                    [sty.logoglobal_mode_reveal]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"reveal\"\n                    ),\n                  })}\n                  icon={\n                    <p.PlasmicIcon\n                      PlasmicIconType={\n                        hasVariant(globalVariants, \"mode\", \"reveal\")\n                          ? JwSharpIcon\n                          : hasVariant(globalVariants, \"mode\", \"dark\")\n                          ? JwSharpIcon\n                          : JwSharpIcon\n                      }\n                      className={classNames(projectcss.all, sty.svg__zJi4L, {\n                        [sty.svgglobal_mode_dark__zJi4LjYvh]: hasVariant(\n                          globalVariants,\n                          \"mode\",\n                          \"dark\"\n                        ),\n\n                        [sty.svgglobal_mode_reveal__zJi4Lv94Jk]: hasVariant(\n                          globalVariants,\n                          \"mode\",\n                          \"reveal\"\n                        ),\n                      })}\n                      role={\"img\"}\n                    />\n                  }\n                  label={\n                    hasVariant(globalVariants, \"mode\", \"reveal\")\n                      ? \"\"\n                      : hasVariant(globalVariants, \"mode\", \"dark\")\n                      ? \"\"\n                      : \"\"\n                  }\n                />\n              </p.PlasmicLink>\n\n              <IconButton\n                data-plasmic-name={\"darkmode\"}\n                data-plasmic-override={overrides.darkmode}\n                className={classNames(\"__wab_instance\", sty.darkmode, {\n                  [sty.darkmodeglobal_mode_dark]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  ),\n\n                  [sty.darkmodeglobal_mode_reveal]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"reveal\"\n                  ),\n                })}\n                icon={\n                  <p.PlasmicIcon\n                    PlasmicIconType={\n                      hasVariant(globalVariants, \"mode\", \"reveal\")\n                        ? NightIcon\n                        : hasVariant(globalVariants, \"mode\", \"dark\")\n                        ? DayIcon\n                        : NightIcon\n                    }\n                    className={classNames(projectcss.all, sty.svg__rQtLi, {\n                      [sty.svgglobal_mode_dark__rQtLijYvh]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"dark\"\n                      ),\n\n                      [sty.svgglobal_mode_reveal__rQtLIv94Jk]: hasVariant(\n                        globalVariants,\n                        \"mode\",\n                        \"reveal\"\n                      ),\n                    })}\n                    cursor={\n                      hasVariant(globalVariants, \"mode\", \"reveal\")\n                        ? \"pointer\"\n                        : hasVariant(globalVariants, \"mode\", \"dark\")\n                        ? \"pointer\"\n                        : \"pointer\"\n                    }\n                    role={\"img\"}\n                  />\n                }\n                label={\n                  hasVariant(globalVariants, \"mode\", \"reveal\")\n                    ? \"switch to dark mode\"\n                    : hasVariant(globalVariants, \"mode\", \"dark\")\n                    ? \"switch to light mode\"\n                    : \"switch to dark mode\"\n                }\n              />\n            </nav>\n          ) : null}\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"casestudy\", \"nav\", \"reveal\", \"home\", \"logo\", \"darkmode\"],\n  casestudy: [\"casestudy\"],\n  nav: [\"nav\", \"reveal\", \"home\", \"logo\", \"darkmode\"],\n  reveal: [\"reveal\"],\n  home: [\"home\", \"logo\"],\n  logo: [\"logo\"],\n  darkmode: [\"darkmode\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicOrgTool__ArgProps,\n      internalVariantPropNames: PlasmicOrgTool__VariantProps,\n    })\n\n    return PlasmicOrgTool__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicOrgTool\"\n  } else {\n    func.displayName = `PlasmicOrgTool.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicOrgTool = Object.assign(\n  // Top-level PlasmicOrgTool renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    casestudy: makeNodeComponent(\"casestudy\"),\n    nav: makeNodeComponent(\"nav\"),\n    reveal: makeNodeComponent(\"reveal\"),\n    home: makeNodeComponent(\"home\"),\n    logo: makeNodeComponent(\"logo\"),\n    darkmode: makeNodeComponent(\"darkmode\"),\n    // Metadata about props expected for PlasmicOrgTool\n    internalVariantProps: PlasmicOrgTool__VariantProps,\n    internalArgProps: PlasmicOrgTool__ArgProps,\n  }\n)\n\nexport default PlasmicOrgTool\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { useState } from \"react\"\nimport { ModeContext } from \"../../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Mode\"\nimport { HighlightContext } from \"../../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Highlight\"\nimport { ArrangementContext } from \"../../components/plasmic/jeffdo_es/PlasmicGlobalVariant__Arrangement\"\nimport { PlasmicOrgTool } from \"../../components/plasmic/jeffdo_es/PlasmicOrgTool\"\n\nfunction OrgTool() {\n  const [mode, setMode] = useState([\"dark\"])\n  const [reveal, setReveal] = useState(true)\n  const [prevReveal, setPrevReveal] = useState(reveal)\n  const [highlight, setHighlight] = useState(undefined)\n\n  const toggleDarkMode = () => {\n    const newMode = [...mode]\n    if (newMode.includes(\"dark\")) {\n      newMode.shift()\n    } else {\n      newMode.unshift(\"dark\")\n    }\n    setMode(newMode)\n  }\n\n  const toggleReveal = () => {\n    const newMode = [...mode]\n    if (newMode.includes(\"reveal\")) {\n      newMode.pop()\n      setReveal(false)\n      setPrevReveal(false)\n    } else {\n      newMode.push(\"reveal\")\n      setReveal(true)\n      setPrevReveal(true)\n    }\n    setMode(newMode)\n  }\n\n\n  return (\n    <ArrangementContext.Provider value={undefined}>\n      <HighlightContext.Provider value={undefined}>\n        <ModeContext.Provider value={mode}>\n          <PlasmicOrgTool\n            darkmode={{\n              onClick: () => toggleDarkMode(),\n            }}\n            reveal={{\n              onClick: () => toggleReveal(),\n            }}\n          />\n        </ModeContext.Provider>\n      </HighlightContext.Provider>\n    </ArrangementContext.Provider>\n  )\n}\n\nexport default OrgTool\n","export default __webpack_public_path__ + \"static/orgDesign-d1f45f731d370dee96c5c2a317236c3d.png\";"],"names":["root","rootstroke","rootflippabble","slotTargetLabel","text___7ZTu","PlasmicTag__VariantProps","Array","PlasmicTag__ArgProps","PlasmicDescendants","nodeName","func","PlasmicTag","Object","assign","props","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","args","overrides","forNode","globalVariants","ensureGlobalVariants","mode","useMode","screen","useScreenVariantsekypzdksLjd0F","className","classNames","projectcss","sty","hasVariant","p","defaultContents","value","label","PlasmicTag__RenderFunc","displayName","internalVariantProps","internalArgProps","Tag_","ref","React","ArrangementContext","useArrangement","style","title","restProps","xmlns","fill","viewBox","height","width","d","fillRule","clipRule","PlasmicBackButton__VariantProps","PlasmicBackButton__ArgProps","svg","text","makeNodeComponent","disabled","id","role","PlasmicBackButton__RenderFunc","PlasmicBackButton","BackButton_","hero","heroglobal_mode_reveal","img__z5CWf","content","contentglobal_mode_reveal","header","h1","slotTargetTitle","description","slotTargetDescription","services","slotTargetServices","tag__biiB9","text__oRvv","tag__kE5P","text__oegoj","tag__fgfHd","text__dvlR2","tag__hpi5N","text__pxaQd","tag__trtnX","text___52AfD","overview","overviewImages","overviewImagesglobal_mode_reveal","freeBox___4M8J","img___2YcZy","img__gS99C","img__lAzkm","overviewCaption","overviewCaptionglobal_mode_reveal","slotTargetOverviewCaption","overviewDescription","overviewDescriptionglobal_mode_dark","problem","h3__i9Mpl","slotTargetProblem","approach","h3__dcsPd","text___9TmiC","work","h3___6KB0","freeBox__zGxN9","freeBox__t1Txf","h4___2SBb1","freeBox__uWjBd","text___5L9Dt","img__dbx1Y","freeBox__pZcZ2","text__pFzr3","freeBox__tkYh","h4__gxcwv","text__uOads","freeBox__uDUoD","h4__leY5Y","text__gwt9","gallery","PlasmicCaseStudy__VariantProps","PlasmicCaseStudy__ArgProps","link","back","component","Link","href","platform","alt","displayHeight","displayMaxHeight","displayMaxWidth","displayMinHeight","displayMinWidth","displayWidth","loading","src","orgtoolHeaderOgUr0KDw","fullWidth","fullHeight","aspectRatio","undefined","heroImage","as","hasGap","Tag","orgtool01PngY3BRp8Cp1","orgtool03PngOVR0NOy","PlasmicIconType","ArrowRightIcon","ArrowDownIcon","orgDesignMeo1PxVz7","orgtoolResearchpngJIeMqIOo","work1","work2","work3","PlasmicCaseStudy__RenderFunc","PlasmicCaseStudy","CaseStudy_","casestudy","nav","navglobal_mode_dark","navglobal_arrangement_float","reveal","revealglobal_mode_dark","revealglobal_mode_reveal","svg__gfvE","svgglobal_mode_dark__gfvEjYvh","svgglobal_mode_reveal__gfvEv94Jk","home","homeglobal_mode_dark","homeglobal_mode_reveal","svg__zJi4L","svgglobal_mode_dark__zJi4LjYvh","svgglobal_mode_reveal__zJi4Lv94Jk","svg__rQtLi","svgglobal_mode_dark__rQtLijYvh","svgglobal_mode_reveal__rQtLIv94Jk","PlasmicOrgTool__VariantProps","PlasmicOrgTool__ArgProps","logo","darkmode","arrangement","IconButton","icon","EyeOpenIcon","EyeClosedIcon","cursor","JwSharpIcon","NightIcon","DayIcon","PlasmicOrgTool__RenderFunc","PlasmicOrgTool","useState","setMode","setReveal","setPrevReveal","onClick","newMode","includes","shift","unshift","pop","push"],"sourceRoot":""}